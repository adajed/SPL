-- custom tokens -------------------------------------------


-- name for classes
token CIdent (upper (letter | digit | '_')*) ;

-- names for variables
token VIdent (lower (letter | digit | '_')*) ;

-- programs ------------------------------------------------

entrypoints Program ;

Prog.      Program ::= [TopDef] ;

FnDef.     TopDef ::= Type VIdent "(" [Argument] ")" Block ;

ClDef.     TopDef ::= "class" CIdent "{" [ClassArgument] "}" ;

separator nonempty TopDef "" ;

Arg.       Argument ::= Type VIdent;

separator  Argument "," ;

Field.     ClassArgument ::= Type [VIdent] ";" ;

separator nonempty VIdent "," ;

-- Method.    ClassArgument ::= Type VIdent "(" [Argument] ")" Block ;

separator ClassArgument "" ;

-- NoExtend.  ClassExtend ::= ;

-- Extend.    ClassExtend ::= "extends" CIdent ;


-- statements ----------------------------------------------

Bl.     Block ::= "{" [Stmt] "}" ;

separator  Stmt "" ;

Empty.     Stmt ::= ";" ;

BStmt.     Stmt ::= Block ;

Decl.      Stmt ::= Type [Item] ";" ;

NoInit.    Item ::= VIdent ;

Init.      Item ::= VIdent "=" Expr ;

separator nonempty Item "," ;

Ass.       Stmt ::= Expr "=" Expr  ";" ;

Incr.      Stmt ::= Expr "++"  ";" ;

Decr.      Stmt ::= Expr "--"  ";" ;

Ret.       Stmt ::= "return" Expr ";" ;

VRet.      Stmt ::= "return" ";" ;

Cond.      Stmt ::= "if" "(" Expr ")" Stmt  ;

CondElse.  Stmt ::= "if" "(" Expr ")" Stmt "else" Stmt  ;

While.     Stmt ::= "while" "(" Expr ")" Stmt ;

-- ForEach.   Stmt ::= "for" "(" Type VIdent ":" Expr ")" Stmt ;

SExp.      Stmt ::= Expr ";" ;


-- Types ---------------------------------------------------

Int.            Type ::= "int" ;

Bool.           Type ::= "bool" ;

Void.           Type ::= "void" ;

Class.          Type ::= CIdent ;

Array.          Type ::= Type "[]" ;

Fun.            Type ::= Type "(" [Type] ")" ;

internal Null.  Type ::= ;

separator Type "," ;


-- Expressions ---------------------------------------------

internal ETypedExpr. Expr6 ::= Type Expr6 ;

ENull.      Expr6 ::= "null" ;

EInt.       Expr6 ::= Integer ;

ETrue.      Expr6 ::= "true" ;

EFalse.     Expr6 ::= "false" ;

EVar.       Expr6 ::= VIdent ;

EField.    Expr6 ::= Expr6 "." VIdent ;

EArrAcc.   Expr6 ::= Expr6 "[" Expr "]" ;

EApp.       Expr6 ::= Expr6 "(" [Expr] ")" ;

EUnaryOp.   Expr5 ::= UnaryOp Expr5 ;

EMul.       Expr4 ::= Expr4 MulOp Expr5 ;

-- EConcat.    Expr3 ::= Expr3 "|" Expr4 ;

EAdd.       Expr3 ::= Expr3 AddOp Expr4 ;

ERel.       Expr2 ::= Expr2 RelOp Expr3 ;

EAnd.       Expr1 ::= Expr2 "&&" Expr1 ;

EOr.        Expr ::= Expr1 "||" Expr ;

EObjNew.   Expr ::= "new" CIdent ;

EArrNew.   Expr ::= "new" Type "[" Expr "]" ;

ELambda.   Expr ::= "\\" [Argument] "->" Stmt ;


coercions  Expr 6 ;

separator  Expr "," ;


-- operators -----------------------------------------------

---- UnaryOp -----------------------------------------------

Neg.        UnaryOp ::= "-" ;

Not.        UnaryOp ::= "!" ;

BitNot.     UnaryOp ::= "~" ;


---- AddOp -------------------------------------------------

Plus.      AddOp ::= "+" ;

Minus.     AddOp ::= "-" ;


---- MulOp -------------------------------------------------

Times.      MulOp ::= "*" ;

Div.        MulOp ::= "/" ;

Mod.        MulOp ::= "%" ;

LShift.     MulOp ::= "<<" ;

RShift.     MulOp ::= ">>" ;

BitAnd.     MulOp ::= "&" ;

BitOr.      MulOp ::= "|" ;

BitXor.     MulOp ::= "^" ;


---- RelOp -------------------------------------------------

LTH.       RelOp ::= "<" ;

LE.        RelOp ::= "<=" ;

GTH.       RelOp ::= ">" ;

GE.        RelOp ::= ">=" ;

EQU.       RelOp ::= "==" ;

NE.        RelOp ::= "!=" ;


-- comments ------------------------------------------------

comment    "//" ;

comment    "/*" "*/" ;

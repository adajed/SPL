-----------------------------------------------------------------------------
Info file generated by Happy Version 1.19.8 from grammar/ParSPL.y
-----------------------------------------------------------------------------

state 95 contains 1 shift/reduce conflicts.
state 176 contains 1 shift/reduce conflicts.

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_pProgram -> Program                         (0)
	Integer -> L_integ                                 (1)
	CIdent -> L_CIdent                                 (2)
	VIdent -> L_VIdent                                 (3)
	Program -> ListTopDef                              (4)
	TopDef -> Type VIdent '(' ListArgument ')' Block   (5)
	TopDef -> 'typedef' CIdent '=' Type ';'            (6)
	TopDef -> 'class' CIdent '{' ListClassElem '}'     (7)
	TopDef -> 'class' CIdent 'extends' CIdent '{' ListClassElem '}'   (8)
	ListTopDef -> TopDef                               (9)
	ListTopDef -> TopDef ListTopDef                    (10)
	Argument -> Type VIdent                            (11)
	ListArgument ->                                    (12)
	ListArgument -> Argument                           (13)
	ListArgument -> Argument ',' ListArgument          (14)
	ClassElem -> Type ListVIdent ';'                   (15)
	ClassElem -> 'constr' '(' ListArgument ')' Block   (16)
	ClassElem -> Type VIdent '(' ListArgument ')' Block   (17)
	ListVIdent -> VIdent                               (18)
	ListVIdent -> VIdent ',' ListVIdent                (19)
	ListClassElem ->                                   (20)
	ListClassElem -> ListClassElem ClassElem           (21)
	Block -> '{' ListStmt '}'                          (22)
	ListStmt ->                                        (23)
	ListStmt -> ListStmt Stmt                          (24)
	Stmt -> ';'                                        (25)
	Stmt -> Block                                      (26)
	Stmt -> Type ListItem ';'                          (27)
	Stmt -> Expr '=' Expr ';'                          (28)
	Stmt -> Expr '++' ';'                              (29)
	Stmt -> Expr '--' ';'                              (30)
	Stmt -> 'return' Expr ';'                          (31)
	Stmt -> 'return' ';'                               (32)
	Stmt -> 'if' '(' Expr ')' Stmt                     (33)
	Stmt -> 'if' '(' Expr ')' Stmt 'else' Stmt         (34)
	Stmt -> 'while' '(' Expr ')' Stmt                  (35)
	Stmt -> 'for' '(' VIdent '=' Expr 'to' Expr ')' Stmt   (36)
	Stmt -> 'for' '(' VIdent '=' Expr 'to' Expr 'by' Expr ')' Stmt   (37)
	Stmt -> 'for' '(' VIdent '=' Expr 'down' 'to' Expr ')' Stmt   (38)
	Stmt -> 'for' '(' VIdent '=' Expr 'down' 'to' Expr 'by' Expr ')' Stmt   (39)
	Stmt -> 'for' '(' VIdent 'in' Expr ')' Stmt        (40)
	Stmt -> Expr ';'                                   (41)
	Item -> VIdent                                     (42)
	Item -> VIdent '=' Expr                            (43)
	ListItem -> Item                                   (44)
	ListItem -> Item ',' ListItem                      (45)
	Type -> 'int'                                      (46)
	Type -> 'bool'                                     (47)
	Type -> 'void'                                     (48)
	Type -> CIdent                                     (49)
	Type -> Type '[]'                                  (50)
	Type -> Type '(' ListType ')'                      (51)
	ListType ->                                        (52)
	ListType -> Type                                   (53)
	ListType -> Type ',' ListType                      (54)
	Expr7 -> 'null'                                    (55)
	Expr7 -> Integer                                   (56)
	Expr7 -> 'true'                                    (57)
	Expr7 -> 'false'                                   (58)
	Expr7 -> VIdent                                    (59)
	Expr7 -> Expr7 '.' VIdent                          (60)
	Expr7 -> Expr7 '[' Expr ']'                        (61)
	Expr7 -> Expr7 '(' ListExpr ')'                    (62)
	Expr7 -> '(' Expr ')'                              (63)
	Expr6 -> UnaryOp Expr6                             (64)
	Expr6 -> Expr7                                     (65)
	Expr5 -> Expr5 MulOp Expr6                         (66)
	Expr5 -> Expr6                                     (67)
	Expr4 -> Expr4 AddOp Expr5                         (68)
	Expr4 -> Expr5                                     (69)
	Expr3 -> Expr3 RelOp Expr4                         (70)
	Expr3 -> Expr4                                     (71)
	Expr2 -> Expr3 '&&' Expr2                          (72)
	Expr2 -> Expr3                                     (73)
	Expr1 -> Expr2 '||' Expr1                          (74)
	Expr1 -> Expr2                                     (75)
	Expr -> 'new' CIdent '(' ListExpr ')'              (76)
	Expr -> 'new' Type '[' Expr ']'                    (77)
	Expr -> '\\' ListArgument '->' LambdaExpr          (78)
	Expr -> Expr1                                      (79)
	ListExpr ->                                        (80)
	ListExpr -> Expr                                   (81)
	ListExpr -> Expr ',' ListExpr                      (82)
	LambdaExpr -> Expr                                 (83)
	LambdaExpr -> 'if' Expr 'then' LambdaExpr 'else' LambdaExpr   (84)
	LambdaExpr -> Block                                (85)
	UnaryOp -> '-'                                     (86)
	UnaryOp -> '!'                                     (87)
	UnaryOp -> '~'                                     (88)
	AddOp -> '+'                                       (89)
	AddOp -> '-'                                       (90)
	MulOp -> '*'                                       (91)
	MulOp -> '/'                                       (92)
	MulOp -> '%'                                       (93)
	MulOp -> '<<'                                      (94)
	MulOp -> '>>'                                      (95)
	MulOp -> '&'                                       (96)
	MulOp -> '|'                                       (97)
	MulOp -> '^'                                       (98)
	RelOp -> '<'                                       (99)
	RelOp -> '<='                                      (100)
	RelOp -> '>'                                       (101)
	RelOp -> '>='                                      (102)
	RelOp -> '=='                                      (103)
	RelOp -> '!='                                      (104)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'!'            { PT _ (TS _ 1) }
	'!='           { PT _ (TS _ 2) }
	'%'            { PT _ (TS _ 3) }
	'&'            { PT _ (TS _ 4) }
	'&&'           { PT _ (TS _ 5) }
	'('            { PT _ (TS _ 6) }
	')'            { PT _ (TS _ 7) }
	'*'            { PT _ (TS _ 8) }
	'+'            { PT _ (TS _ 9) }
	'++'           { PT _ (TS _ 10) }
	','            { PT _ (TS _ 11) }
	'-'            { PT _ (TS _ 12) }
	'--'           { PT _ (TS _ 13) }
	'->'           { PT _ (TS _ 14) }
	'.'            { PT _ (TS _ 15) }
	'/'            { PT _ (TS _ 16) }
	';'            { PT _ (TS _ 17) }
	'<'            { PT _ (TS _ 18) }
	'<<'           { PT _ (TS _ 19) }
	'<='           { PT _ (TS _ 20) }
	'='            { PT _ (TS _ 21) }
	'=='           { PT _ (TS _ 22) }
	'>'            { PT _ (TS _ 23) }
	'>='           { PT _ (TS _ 24) }
	'>>'           { PT _ (TS _ 25) }
	'['            { PT _ (TS _ 26) }
	'[]'           { PT _ (TS _ 27) }
	'\\'           { PT _ (TS _ 28) }
	']'            { PT _ (TS _ 29) }
	'^'            { PT _ (TS _ 30) }
	'bool'         { PT _ (TS _ 31) }
	'class'        { PT _ (TS _ 32) }
	'else'         { PT _ (TS _ 33) }
	'false'        { PT _ (TS _ 34) }
	'if'           { PT _ (TS _ 35) }
	'int'          { PT _ (TS _ 36) }
	'new'          { PT _ (TS _ 37) }
	'null'         { PT _ (TS _ 38) }
	'return'       { PT _ (TS _ 39) }
	'true'         { PT _ (TS _ 40) }
	'void'         { PT _ (TS _ 41) }
	'while'        { PT _ (TS _ 42) }
	'{'            { PT _ (TS _ 43) }
	'|'            { PT _ (TS _ 44) }
	'||'           { PT _ (TS _ 45) }
	'}'            { PT _ (TS _ 46) }
	'~'            { PT _ (TS _ 47) }
	'for'          { PT _ (TS _ 48) }
	'to'           { PT _ (TS _ 49) }
	'down'         { PT _ (TS _ 50) }
	'in'           { PT _ (TS _ 51) }
	'by'           { PT _ (TS _ 52) }
	'extends'      { PT _ (TS _ 53) }
	'constr'       { PT _ (TS _ 54) }
	'then'         { PT _ (TS _ 55) }
	'typedef'      { PT _ (TS _ 56) }
	L_integ        { PT _ (TI _) }
	L_CIdent       { PT _ (T_CIdent _) }
	L_VIdent       { PT _ (T_VIdent _) }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_pProgram rule  0
	Integer         rule  1
	CIdent          rule  2
	VIdent          rule  3
	Program         rule  4
	TopDef          rules 5, 6, 7, 8
	ListTopDef      rules 9, 10
	Argument        rule  11
	ListArgument    rules 12, 13, 14
	ClassElem       rules 15, 16, 17
	ListVIdent      rules 18, 19
	ListClassElem   rules 20, 21
	Block           rule  22
	ListStmt        rules 23, 24
	Stmt            rules 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41
	Item            rules 42, 43
	ListItem        rules 44, 45
	Type            rules 46, 47, 48, 49, 50, 51
	ListType        rules 52, 53, 54
	Expr7           rules 55, 56, 57, 58, 59, 60, 61, 62, 63
	Expr6           rules 64, 65
	Expr5           rules 66, 67
	Expr4           rules 68, 69
	Expr3           rules 70, 71
	Expr2           rules 72, 73
	Expr1           rules 74, 75
	Expr            rules 76, 77, 78, 79
	ListExpr        rules 80, 81, 82
	LambdaExpr      rules 83, 84, 85
	UnaryOp         rules 86, 87, 88
	AddOp           rules 89, 90
	MulOp           rules 91, 92, 93, 94, 95, 96, 97, 98
	RelOp           rules 99, 100, 101, 102, 103, 104

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	'bool'         shift, and enter state 8
	'class'        shift, and enter state 9
	'int'          shift, and enter state 10
	'void'         shift, and enter state 11
	'typedef'      shift, and enter state 12
	L_CIdent       shift, and enter state 13

	CIdent         goto state 3
	Program        goto state 4
	TopDef         goto state 5
	ListTopDef     goto state 6
	Type           goto state 7

State 1


	L_integ        shift, and enter state 2


State 2

	Integer -> L_integ .                                (rule 1)

	'!='           reduce using rule 1
	'%'            reduce using rule 1
	'&'            reduce using rule 1
	'&&'           reduce using rule 1
	'('            reduce using rule 1
	')'            reduce using rule 1
	'*'            reduce using rule 1
	'+'            reduce using rule 1
	'++'           reduce using rule 1
	','            reduce using rule 1
	'-'            reduce using rule 1
	'--'           reduce using rule 1
	'.'            reduce using rule 1
	'/'            reduce using rule 1
	';'            reduce using rule 1
	'<'            reduce using rule 1
	'<<'           reduce using rule 1
	'<='           reduce using rule 1
	'='            reduce using rule 1
	'=='           reduce using rule 1
	'>'            reduce using rule 1
	'>='           reduce using rule 1
	'>>'           reduce using rule 1
	'['            reduce using rule 1
	']'            reduce using rule 1
	'^'            reduce using rule 1
	'else'         reduce using rule 1
	'|'            reduce using rule 1
	'||'           reduce using rule 1
	'to'           reduce using rule 1
	'down'         reduce using rule 1
	'by'           reduce using rule 1
	'then'         reduce using rule 1


State 3

	Type -> CIdent .                                    (rule 49)

	'('            reduce using rule 49
	')'            reduce using rule 49
	','            reduce using rule 49
	';'            reduce using rule 49
	'[]'           reduce using rule 49
	L_VIdent       reduce using rule 49


State 4

	%start_pProgram -> Program .                        (rule 0)

	%eof           accept


State 5

	ListTopDef -> TopDef .                              (rule 9)
	ListTopDef -> TopDef . ListTopDef                   (rule 10)

	'bool'         shift, and enter state 8
	'class'        shift, and enter state 9
	'int'          shift, and enter state 10
	'void'         shift, and enter state 11
	'typedef'      shift, and enter state 12
	L_CIdent       shift, and enter state 13
	%eof           reduce using rule 9

	CIdent         goto state 3
	TopDef         goto state 5
	ListTopDef     goto state 20
	Type           goto state 7

State 6

	Program -> ListTopDef .                             (rule 4)

	%eof           reduce using rule 4


State 7

	TopDef -> Type . VIdent '(' ListArgument ')' Block    (rule 5)
	Type -> Type . '[]'                                 (rule 50)
	Type -> Type . '(' ListType ')'                     (rule 51)

	'('            shift, and enter state 17
	'[]'           shift, and enter state 18
	L_VIdent       shift, and enter state 19

	VIdent         goto state 16

State 8

	Type -> 'bool' .                                    (rule 47)

	'('            reduce using rule 47
	')'            reduce using rule 47
	','            reduce using rule 47
	';'            reduce using rule 47
	'['            reduce using rule 47
	'[]'           reduce using rule 47
	L_VIdent       reduce using rule 47


State 9

	TopDef -> 'class' . CIdent '{' ListClassElem '}'    (rule 7)
	TopDef -> 'class' . CIdent 'extends' CIdent '{' ListClassElem '}'    (rule 8)

	L_CIdent       shift, and enter state 13

	CIdent         goto state 15

State 10

	Type -> 'int' .                                     (rule 46)

	'('            reduce using rule 46
	')'            reduce using rule 46
	','            reduce using rule 46
	';'            reduce using rule 46
	'['            reduce using rule 46
	'[]'           reduce using rule 46
	L_VIdent       reduce using rule 46


State 11

	Type -> 'void' .                                    (rule 48)

	'('            reduce using rule 48
	')'            reduce using rule 48
	','            reduce using rule 48
	';'            reduce using rule 48
	'['            reduce using rule 48
	'[]'           reduce using rule 48
	L_VIdent       reduce using rule 48


State 12

	TopDef -> 'typedef' . CIdent '=' Type ';'           (rule 6)

	L_CIdent       shift, and enter state 13

	CIdent         goto state 14

State 13

	CIdent -> L_CIdent .                                (rule 2)

	'('            reduce using rule 2
	')'            reduce using rule 2
	','            reduce using rule 2
	';'            reduce using rule 2
	'='            reduce using rule 2
	'['            reduce using rule 2
	'[]'           reduce using rule 2
	'{'            reduce using rule 2
	'extends'      reduce using rule 2
	L_VIdent       reduce using rule 2


State 14

	TopDef -> 'typedef' CIdent . '=' Type ';'           (rule 6)

	'='            shift, and enter state 26


State 15

	TopDef -> 'class' CIdent . '{' ListClassElem '}'    (rule 7)
	TopDef -> 'class' CIdent . 'extends' CIdent '{' ListClassElem '}'    (rule 8)

	'{'            shift, and enter state 24
	'extends'      shift, and enter state 25


State 16

	TopDef -> Type VIdent . '(' ListArgument ')' Block    (rule 5)

	'('            shift, and enter state 23


State 17

	Type -> Type '(' . ListType ')'                     (rule 51)

	')'            reduce using rule 52
	'bool'         shift, and enter state 8
	'int'          shift, and enter state 10
	'void'         shift, and enter state 11
	L_CIdent       shift, and enter state 13

	CIdent         goto state 3
	Type           goto state 21
	ListType       goto state 22

State 18

	Type -> Type '[]' .                                 (rule 50)

	'('            reduce using rule 50
	')'            reduce using rule 50
	','            reduce using rule 50
	';'            reduce using rule 50
	'['            reduce using rule 50
	'[]'           reduce using rule 50
	L_VIdent       reduce using rule 50


State 19

	VIdent -> L_VIdent .                                (rule 3)

	'!='           reduce using rule 3
	'%'            reduce using rule 3
	'&'            reduce using rule 3
	'&&'           reduce using rule 3
	'('            reduce using rule 3
	')'            reduce using rule 3
	'*'            reduce using rule 3
	'+'            reduce using rule 3
	'++'           reduce using rule 3
	','            reduce using rule 3
	'-'            reduce using rule 3
	'--'           reduce using rule 3
	'->'           reduce using rule 3
	'.'            reduce using rule 3
	'/'            reduce using rule 3
	';'            reduce using rule 3
	'<'            reduce using rule 3
	'<<'           reduce using rule 3
	'<='           reduce using rule 3
	'='            reduce using rule 3
	'=='           reduce using rule 3
	'>'            reduce using rule 3
	'>='           reduce using rule 3
	'>>'           reduce using rule 3
	'['            reduce using rule 3
	']'            reduce using rule 3
	'^'            reduce using rule 3
	'else'         reduce using rule 3
	'|'            reduce using rule 3
	'||'           reduce using rule 3
	'to'           reduce using rule 3
	'down'         reduce using rule 3
	'in'           reduce using rule 3
	'by'           reduce using rule 3
	'then'         reduce using rule 3


State 20

	ListTopDef -> TopDef ListTopDef .                   (rule 10)

	%eof           reduce using rule 10


State 21

	Type -> Type . '[]'                                 (rule 50)
	Type -> Type . '(' ListType ')'                     (rule 51)
	ListType -> Type .                                  (rule 53)
	ListType -> Type . ',' ListType                     (rule 54)

	'('            shift, and enter state 17
	')'            reduce using rule 53
	','            shift, and enter state 34
	'[]'           shift, and enter state 18


State 22

	Type -> Type '(' ListType . ')'                     (rule 51)

	')'            shift, and enter state 33


State 23

	TopDef -> Type VIdent '(' . ListArgument ')' Block    (rule 5)

	')'            reduce using rule 12
	'bool'         shift, and enter state 8
	'int'          shift, and enter state 10
	'void'         shift, and enter state 11
	L_CIdent       shift, and enter state 13

	CIdent         goto state 3
	Argument       goto state 30
	ListArgument   goto state 31
	Type           goto state 32

State 24

	TopDef -> 'class' CIdent '{' . ListClassElem '}'    (rule 7)

	'bool'         reduce using rule 20
	'int'          reduce using rule 20
	'void'         reduce using rule 20
	'}'            reduce using rule 20
	'constr'       reduce using rule 20
	L_CIdent       reduce using rule 20

	ListClassElem  goto state 29

State 25

	TopDef -> 'class' CIdent 'extends' . CIdent '{' ListClassElem '}'    (rule 8)

	L_CIdent       shift, and enter state 13

	CIdent         goto state 28

State 26

	TopDef -> 'typedef' CIdent '=' . Type ';'           (rule 6)

	'bool'         shift, and enter state 8
	'int'          shift, and enter state 10
	'void'         shift, and enter state 11
	L_CIdent       shift, and enter state 13

	CIdent         goto state 3
	Type           goto state 27

State 27

	TopDef -> 'typedef' CIdent '=' Type . ';'           (rule 6)
	Type -> Type . '[]'                                 (rule 50)
	Type -> Type . '(' ListType ')'                     (rule 51)

	'('            shift, and enter state 17
	';'            shift, and enter state 44
	'[]'           shift, and enter state 18


State 28

	TopDef -> 'class' CIdent 'extends' CIdent . '{' ListClassElem '}'    (rule 8)

	'{'            shift, and enter state 43


State 29

	TopDef -> 'class' CIdent '{' ListClassElem . '}'    (rule 7)
	ListClassElem -> ListClassElem . ClassElem          (rule 21)

	'bool'         shift, and enter state 8
	'int'          shift, and enter state 10
	'void'         shift, and enter state 11
	'}'            shift, and enter state 41
	'constr'       shift, and enter state 42
	L_CIdent       shift, and enter state 13

	CIdent         goto state 3
	ClassElem      goto state 39
	Type           goto state 40

State 30

	ListArgument -> Argument .                          (rule 13)
	ListArgument -> Argument . ',' ListArgument         (rule 14)

	')'            reduce using rule 13
	','            shift, and enter state 38
	'->'           reduce using rule 13


State 31

	TopDef -> Type VIdent '(' ListArgument . ')' Block    (rule 5)

	')'            shift, and enter state 37


State 32

	Argument -> Type . VIdent                           (rule 11)
	Type -> Type . '[]'                                 (rule 50)
	Type -> Type . '(' ListType ')'                     (rule 51)

	'('            shift, and enter state 17
	'[]'           shift, and enter state 18
	L_VIdent       shift, and enter state 19

	VIdent         goto state 36

State 33

	Type -> Type '(' ListType ')' .                     (rule 51)

	'('            reduce using rule 51
	')'            reduce using rule 51
	','            reduce using rule 51
	';'            reduce using rule 51
	'['            reduce using rule 51
	'[]'           reduce using rule 51
	L_VIdent       reduce using rule 51


State 34

	ListType -> Type ',' . ListType                     (rule 54)

	')'            reduce using rule 52
	'bool'         shift, and enter state 8
	'int'          shift, and enter state 10
	'void'         shift, and enter state 11
	L_CIdent       shift, and enter state 13

	CIdent         goto state 3
	Type           goto state 21
	ListType       goto state 35

State 35

	ListType -> Type ',' ListType .                     (rule 54)

	')'            reduce using rule 54


State 36

	Argument -> Type VIdent .                           (rule 11)

	')'            reduce using rule 11
	','            reduce using rule 11
	'->'           reduce using rule 11


State 37

	TopDef -> Type VIdent '(' ListArgument ')' . Block    (rule 5)

	'{'            shift, and enter state 51

	Block          goto state 50

State 38

	ListArgument -> Argument ',' . ListArgument         (rule 14)

	')'            reduce using rule 12
	'->'           reduce using rule 12
	'bool'         shift, and enter state 8
	'int'          shift, and enter state 10
	'void'         shift, and enter state 11
	L_CIdent       shift, and enter state 13

	CIdent         goto state 3
	Argument       goto state 30
	ListArgument   goto state 49
	Type           goto state 32

State 39

	ListClassElem -> ListClassElem ClassElem .          (rule 21)

	'bool'         reduce using rule 21
	'int'          reduce using rule 21
	'void'         reduce using rule 21
	'}'            reduce using rule 21
	'constr'       reduce using rule 21
	L_CIdent       reduce using rule 21


State 40

	ClassElem -> Type . ListVIdent ';'                  (rule 15)
	ClassElem -> Type . VIdent '(' ListArgument ')' Block    (rule 17)
	Type -> Type . '[]'                                 (rule 50)
	Type -> Type . '(' ListType ')'                     (rule 51)

	'('            shift, and enter state 17
	'[]'           shift, and enter state 18
	L_VIdent       shift, and enter state 19

	VIdent         goto state 47
	ListVIdent     goto state 48

State 41

	TopDef -> 'class' CIdent '{' ListClassElem '}' .    (rule 7)

	'bool'         reduce using rule 7
	'class'        reduce using rule 7
	'int'          reduce using rule 7
	'void'         reduce using rule 7
	'typedef'      reduce using rule 7
	L_CIdent       reduce using rule 7
	%eof           reduce using rule 7


State 42

	ClassElem -> 'constr' . '(' ListArgument ')' Block    (rule 16)

	'('            shift, and enter state 46


State 43

	TopDef -> 'class' CIdent 'extends' CIdent '{' . ListClassElem '}'    (rule 8)

	'bool'         reduce using rule 20
	'int'          reduce using rule 20
	'void'         reduce using rule 20
	'}'            reduce using rule 20
	'constr'       reduce using rule 20
	L_CIdent       reduce using rule 20

	ListClassElem  goto state 45

State 44

	TopDef -> 'typedef' CIdent '=' Type ';' .           (rule 6)

	'bool'         reduce using rule 6
	'class'        reduce using rule 6
	'int'          reduce using rule 6
	'void'         reduce using rule 6
	'typedef'      reduce using rule 6
	L_CIdent       reduce using rule 6
	%eof           reduce using rule 6


State 45

	TopDef -> 'class' CIdent 'extends' CIdent '{' ListClassElem . '}'    (rule 8)
	ListClassElem -> ListClassElem . ClassElem          (rule 21)

	'bool'         shift, and enter state 8
	'int'          shift, and enter state 10
	'void'         shift, and enter state 11
	'}'            shift, and enter state 57
	'constr'       shift, and enter state 42
	L_CIdent       shift, and enter state 13

	CIdent         goto state 3
	ClassElem      goto state 39
	Type           goto state 40

State 46

	ClassElem -> 'constr' '(' . ListArgument ')' Block    (rule 16)

	')'            reduce using rule 12
	'bool'         shift, and enter state 8
	'int'          shift, and enter state 10
	'void'         shift, and enter state 11
	L_CIdent       shift, and enter state 13

	CIdent         goto state 3
	Argument       goto state 30
	ListArgument   goto state 56
	Type           goto state 32

State 47

	ClassElem -> Type VIdent . '(' ListArgument ')' Block    (rule 17)
	ListVIdent -> VIdent .                              (rule 18)
	ListVIdent -> VIdent . ',' ListVIdent               (rule 19)

	'('            shift, and enter state 54
	','            shift, and enter state 55
	';'            reduce using rule 18


State 48

	ClassElem -> Type ListVIdent . ';'                  (rule 15)

	';'            shift, and enter state 53


State 49

	ListArgument -> Argument ',' ListArgument .         (rule 14)

	')'            reduce using rule 14
	'->'           reduce using rule 14


State 50

	TopDef -> Type VIdent '(' ListArgument ')' Block .    (rule 5)

	'bool'         reduce using rule 5
	'class'        reduce using rule 5
	'int'          reduce using rule 5
	'void'         reduce using rule 5
	'typedef'      reduce using rule 5
	L_CIdent       reduce using rule 5
	%eof           reduce using rule 5


State 51

	Block -> '{' . ListStmt '}'                         (rule 22)

	'!'            reduce using rule 23
	'('            reduce using rule 23
	'-'            reduce using rule 23
	';'            reduce using rule 23
	'\\'           reduce using rule 23
	'bool'         reduce using rule 23
	'false'        reduce using rule 23
	'if'           reduce using rule 23
	'int'          reduce using rule 23
	'new'          reduce using rule 23
	'null'         reduce using rule 23
	'return'       reduce using rule 23
	'true'         reduce using rule 23
	'void'         reduce using rule 23
	'while'        reduce using rule 23
	'{'            reduce using rule 23
	'}'            reduce using rule 23
	'~'            reduce using rule 23
	'for'          reduce using rule 23
	L_integ        reduce using rule 23
	L_CIdent       reduce using rule 23
	L_VIdent       reduce using rule 23

	ListStmt       goto state 52

State 52

	Block -> '{' ListStmt . '}'                         (rule 22)
	ListStmt -> ListStmt . Stmt                         (rule 24)

	'!'            shift, and enter state 76
	'('            shift, and enter state 77
	'-'            shift, and enter state 78
	';'            shift, and enter state 79
	'\\'           shift, and enter state 80
	'bool'         shift, and enter state 8
	'false'        shift, and enter state 81
	'if'           shift, and enter state 82
	'int'          shift, and enter state 10
	'new'          shift, and enter state 83
	'null'         shift, and enter state 84
	'return'       shift, and enter state 85
	'true'         shift, and enter state 86
	'void'         shift, and enter state 11
	'while'        shift, and enter state 87
	'{'            shift, and enter state 51
	'}'            shift, and enter state 88
	'~'            shift, and enter state 89
	'for'          shift, and enter state 90
	L_integ        shift, and enter state 2
	L_CIdent       shift, and enter state 13
	L_VIdent       shift, and enter state 19

	Integer        goto state 62
	CIdent         goto state 3
	VIdent         goto state 63
	Block          goto state 64
	Stmt           goto state 65
	Type           goto state 66
	Expr7          goto state 67
	Expr6          goto state 68
	Expr5          goto state 69
	Expr4          goto state 70
	Expr3          goto state 71
	Expr2          goto state 72
	Expr1          goto state 73
	Expr           goto state 74
	UnaryOp        goto state 75

State 53

	ClassElem -> Type ListVIdent ';' .                  (rule 15)

	'bool'         reduce using rule 15
	'int'          reduce using rule 15
	'void'         reduce using rule 15
	'}'            reduce using rule 15
	'constr'       reduce using rule 15
	L_CIdent       reduce using rule 15


State 54

	ClassElem -> Type VIdent '(' . ListArgument ')' Block    (rule 17)

	')'            reduce using rule 12
	'bool'         shift, and enter state 8
	'int'          shift, and enter state 10
	'void'         shift, and enter state 11
	L_CIdent       shift, and enter state 13

	CIdent         goto state 3
	Argument       goto state 30
	ListArgument   goto state 61
	Type           goto state 32

State 55

	ListVIdent -> VIdent ',' . ListVIdent               (rule 19)

	L_VIdent       shift, and enter state 19

	VIdent         goto state 59
	ListVIdent     goto state 60

State 56

	ClassElem -> 'constr' '(' ListArgument . ')' Block    (rule 16)

	')'            shift, and enter state 58


State 57

	TopDef -> 'class' CIdent 'extends' CIdent '{' ListClassElem '}' .    (rule 8)

	'bool'         reduce using rule 8
	'class'        reduce using rule 8
	'int'          reduce using rule 8
	'void'         reduce using rule 8
	'typedef'      reduce using rule 8
	L_CIdent       reduce using rule 8
	%eof           reduce using rule 8


State 58

	ClassElem -> 'constr' '(' ListArgument ')' . Block    (rule 16)

	'{'            shift, and enter state 51

	Block          goto state 133

State 59

	ListVIdent -> VIdent .                              (rule 18)
	ListVIdent -> VIdent . ',' ListVIdent               (rule 19)

	','            shift, and enter state 55
	';'            reduce using rule 18


State 60

	ListVIdent -> VIdent ',' ListVIdent .               (rule 19)

	';'            reduce using rule 19


State 61

	ClassElem -> Type VIdent '(' ListArgument . ')' Block    (rule 17)

	')'            shift, and enter state 132


State 62

	Expr7 -> Integer .                                  (rule 56)

	'!='           reduce using rule 56
	'%'            reduce using rule 56
	'&'            reduce using rule 56
	'&&'           reduce using rule 56
	'('            reduce using rule 56
	')'            reduce using rule 56
	'*'            reduce using rule 56
	'+'            reduce using rule 56
	'++'           reduce using rule 56
	','            reduce using rule 56
	'-'            reduce using rule 56
	'--'           reduce using rule 56
	'.'            reduce using rule 56
	'/'            reduce using rule 56
	';'            reduce using rule 56
	'<'            reduce using rule 56
	'<<'           reduce using rule 56
	'<='           reduce using rule 56
	'='            reduce using rule 56
	'=='           reduce using rule 56
	'>'            reduce using rule 56
	'>='           reduce using rule 56
	'>>'           reduce using rule 56
	'['            reduce using rule 56
	']'            reduce using rule 56
	'^'            reduce using rule 56
	'else'         reduce using rule 56
	'|'            reduce using rule 56
	'||'           reduce using rule 56
	'to'           reduce using rule 56
	'down'         reduce using rule 56
	'by'           reduce using rule 56
	'then'         reduce using rule 56


State 63

	Expr7 -> VIdent .                                   (rule 59)

	'!='           reduce using rule 59
	'%'            reduce using rule 59
	'&'            reduce using rule 59
	'&&'           reduce using rule 59
	'('            reduce using rule 59
	')'            reduce using rule 59
	'*'            reduce using rule 59
	'+'            reduce using rule 59
	'++'           reduce using rule 59
	','            reduce using rule 59
	'-'            reduce using rule 59
	'--'           reduce using rule 59
	'.'            reduce using rule 59
	'/'            reduce using rule 59
	';'            reduce using rule 59
	'<'            reduce using rule 59
	'<<'           reduce using rule 59
	'<='           reduce using rule 59
	'='            reduce using rule 59
	'=='           reduce using rule 59
	'>'            reduce using rule 59
	'>='           reduce using rule 59
	'>>'           reduce using rule 59
	'['            reduce using rule 59
	']'            reduce using rule 59
	'^'            reduce using rule 59
	'else'         reduce using rule 59
	'|'            reduce using rule 59
	'||'           reduce using rule 59
	'to'           reduce using rule 59
	'down'         reduce using rule 59
	'by'           reduce using rule 59
	'then'         reduce using rule 59


State 64

	Stmt -> Block .                                     (rule 26)

	'!'            reduce using rule 26
	'('            reduce using rule 26
	'-'            reduce using rule 26
	';'            reduce using rule 26
	'\\'           reduce using rule 26
	'bool'         reduce using rule 26
	'else'         reduce using rule 26
	'false'        reduce using rule 26
	'if'           reduce using rule 26
	'int'          reduce using rule 26
	'new'          reduce using rule 26
	'null'         reduce using rule 26
	'return'       reduce using rule 26
	'true'         reduce using rule 26
	'void'         reduce using rule 26
	'while'        reduce using rule 26
	'{'            reduce using rule 26
	'}'            reduce using rule 26
	'~'            reduce using rule 26
	'for'          reduce using rule 26
	L_integ        reduce using rule 26
	L_CIdent       reduce using rule 26
	L_VIdent       reduce using rule 26


State 65

	ListStmt -> ListStmt Stmt .                         (rule 24)

	'!'            reduce using rule 24
	'('            reduce using rule 24
	'-'            reduce using rule 24
	';'            reduce using rule 24
	'\\'           reduce using rule 24
	'bool'         reduce using rule 24
	'false'        reduce using rule 24
	'if'           reduce using rule 24
	'int'          reduce using rule 24
	'new'          reduce using rule 24
	'null'         reduce using rule 24
	'return'       reduce using rule 24
	'true'         reduce using rule 24
	'void'         reduce using rule 24
	'while'        reduce using rule 24
	'{'            reduce using rule 24
	'}'            reduce using rule 24
	'~'            reduce using rule 24
	'for'          reduce using rule 24
	L_integ        reduce using rule 24
	L_CIdent       reduce using rule 24
	L_VIdent       reduce using rule 24


State 66

	Stmt -> Type . ListItem ';'                         (rule 27)
	Type -> Type . '[]'                                 (rule 50)
	Type -> Type . '(' ListType ')'                     (rule 51)

	'('            shift, and enter state 17
	'[]'           shift, and enter state 18
	L_VIdent       shift, and enter state 19

	VIdent         goto state 129
	Item           goto state 130
	ListItem       goto state 131

State 67

	Expr7 -> Expr7 . '.' VIdent                         (rule 60)
	Expr7 -> Expr7 . '[' Expr ']'                       (rule 61)
	Expr7 -> Expr7 . '(' ListExpr ')'                   (rule 62)
	Expr6 -> Expr7 .                                    (rule 65)

	'!='           reduce using rule 65
	'%'            reduce using rule 65
	'&'            reduce using rule 65
	'&&'           reduce using rule 65
	'('            shift, and enter state 126
	')'            reduce using rule 65
	'*'            reduce using rule 65
	'+'            reduce using rule 65
	'++'           reduce using rule 65
	','            reduce using rule 65
	'-'            reduce using rule 65
	'--'           reduce using rule 65
	'.'            shift, and enter state 127
	'/'            reduce using rule 65
	';'            reduce using rule 65
	'<'            reduce using rule 65
	'<<'           reduce using rule 65
	'<='           reduce using rule 65
	'='            reduce using rule 65
	'=='           reduce using rule 65
	'>'            reduce using rule 65
	'>='           reduce using rule 65
	'>>'           reduce using rule 65
	'['            shift, and enter state 128
	']'            reduce using rule 65
	'^'            reduce using rule 65
	'else'         reduce using rule 65
	'|'            reduce using rule 65
	'||'           reduce using rule 65
	'to'           reduce using rule 65
	'down'         reduce using rule 65
	'by'           reduce using rule 65
	'then'         reduce using rule 65


State 68

	Expr5 -> Expr6 .                                    (rule 67)

	'!='           reduce using rule 67
	'%'            reduce using rule 67
	'&'            reduce using rule 67
	'&&'           reduce using rule 67
	')'            reduce using rule 67
	'*'            reduce using rule 67
	'+'            reduce using rule 67
	'++'           reduce using rule 67
	','            reduce using rule 67
	'-'            reduce using rule 67
	'--'           reduce using rule 67
	'/'            reduce using rule 67
	';'            reduce using rule 67
	'<'            reduce using rule 67
	'<<'           reduce using rule 67
	'<='           reduce using rule 67
	'='            reduce using rule 67
	'=='           reduce using rule 67
	'>'            reduce using rule 67
	'>='           reduce using rule 67
	'>>'           reduce using rule 67
	']'            reduce using rule 67
	'^'            reduce using rule 67
	'else'         reduce using rule 67
	'|'            reduce using rule 67
	'||'           reduce using rule 67
	'to'           reduce using rule 67
	'down'         reduce using rule 67
	'by'           reduce using rule 67
	'then'         reduce using rule 67


State 69

	Expr5 -> Expr5 . MulOp Expr6                        (rule 66)
	Expr4 -> Expr5 .                                    (rule 69)

	'!='           reduce using rule 69
	'%'            shift, and enter state 118
	'&'            shift, and enter state 119
	'&&'           reduce using rule 69
	')'            reduce using rule 69
	'*'            shift, and enter state 120
	'+'            reduce using rule 69
	'++'           reduce using rule 69
	','            reduce using rule 69
	'-'            reduce using rule 69
	'--'           reduce using rule 69
	'/'            shift, and enter state 121
	';'            reduce using rule 69
	'<'            reduce using rule 69
	'<<'           shift, and enter state 122
	'<='           reduce using rule 69
	'='            reduce using rule 69
	'=='           reduce using rule 69
	'>'            reduce using rule 69
	'>='           reduce using rule 69
	'>>'           shift, and enter state 123
	']'            reduce using rule 69
	'^'            shift, and enter state 124
	'else'         reduce using rule 69
	'|'            shift, and enter state 125
	'||'           reduce using rule 69
	'to'           reduce using rule 69
	'down'         reduce using rule 69
	'by'           reduce using rule 69
	'then'         reduce using rule 69

	MulOp          goto state 117

State 70

	Expr4 -> Expr4 . AddOp Expr5                        (rule 68)
	Expr3 -> Expr4 .                                    (rule 71)

	'!='           reduce using rule 71
	'&&'           reduce using rule 71
	')'            reduce using rule 71
	'+'            shift, and enter state 115
	'++'           reduce using rule 71
	','            reduce using rule 71
	'-'            shift, and enter state 116
	'--'           reduce using rule 71
	';'            reduce using rule 71
	'<'            reduce using rule 71
	'<='           reduce using rule 71
	'='            reduce using rule 71
	'=='           reduce using rule 71
	'>'            reduce using rule 71
	'>='           reduce using rule 71
	']'            reduce using rule 71
	'else'         reduce using rule 71
	'||'           reduce using rule 71
	'to'           reduce using rule 71
	'down'         reduce using rule 71
	'by'           reduce using rule 71
	'then'         reduce using rule 71

	AddOp          goto state 114

State 71

	Expr3 -> Expr3 . RelOp Expr4                        (rule 70)
	Expr2 -> Expr3 . '&&' Expr2                         (rule 72)
	Expr2 -> Expr3 .                                    (rule 73)

	'!='           shift, and enter state 107
	'&&'           shift, and enter state 108
	')'            reduce using rule 73
	'++'           reduce using rule 73
	','            reduce using rule 73
	'--'           reduce using rule 73
	';'            reduce using rule 73
	'<'            shift, and enter state 109
	'<='           shift, and enter state 110
	'='            reduce using rule 73
	'=='           shift, and enter state 111
	'>'            shift, and enter state 112
	'>='           shift, and enter state 113
	']'            reduce using rule 73
	'else'         reduce using rule 73
	'||'           reduce using rule 73
	'to'           reduce using rule 73
	'down'         reduce using rule 73
	'by'           reduce using rule 73
	'then'         reduce using rule 73

	RelOp          goto state 106

State 72

	Expr1 -> Expr2 . '||' Expr1                         (rule 74)
	Expr1 -> Expr2 .                                    (rule 75)

	')'            reduce using rule 75
	'++'           reduce using rule 75
	','            reduce using rule 75
	'--'           reduce using rule 75
	';'            reduce using rule 75
	'='            reduce using rule 75
	']'            reduce using rule 75
	'else'         reduce using rule 75
	'||'           shift, and enter state 105
	'to'           reduce using rule 75
	'down'         reduce using rule 75
	'by'           reduce using rule 75
	'then'         reduce using rule 75


State 73

	Expr -> Expr1 .                                     (rule 79)

	')'            reduce using rule 79
	'++'           reduce using rule 79
	','            reduce using rule 79
	'--'           reduce using rule 79
	';'            reduce using rule 79
	'='            reduce using rule 79
	']'            reduce using rule 79
	'else'         reduce using rule 79
	'to'           reduce using rule 79
	'down'         reduce using rule 79
	'by'           reduce using rule 79
	'then'         reduce using rule 79


State 74

	Stmt -> Expr . '=' Expr ';'                         (rule 28)
	Stmt -> Expr . '++' ';'                             (rule 29)
	Stmt -> Expr . '--' ';'                             (rule 30)
	Stmt -> Expr . ';'                                  (rule 41)

	'++'           shift, and enter state 101
	'--'           shift, and enter state 102
	';'            shift, and enter state 103
	'='            shift, and enter state 104


State 75

	Expr6 -> UnaryOp . Expr6                            (rule 64)

	'!'            shift, and enter state 76
	'('            shift, and enter state 77
	'-'            shift, and enter state 78
	'false'        shift, and enter state 81
	'null'         shift, and enter state 84
	'true'         shift, and enter state 86
	'~'            shift, and enter state 89
	L_integ        shift, and enter state 2
	L_VIdent       shift, and enter state 19

	Integer        goto state 62
	VIdent         goto state 63
	Expr7          goto state 67
	Expr6          goto state 100
	UnaryOp        goto state 75

State 76

	UnaryOp -> '!' .                                    (rule 87)

	'!'            reduce using rule 87
	'('            reduce using rule 87
	'-'            reduce using rule 87
	'false'        reduce using rule 87
	'null'         reduce using rule 87
	'true'         reduce using rule 87
	'~'            reduce using rule 87
	L_integ        reduce using rule 87
	L_VIdent       reduce using rule 87


State 77

	Expr7 -> '(' . Expr ')'                             (rule 63)

	'!'            shift, and enter state 76
	'('            shift, and enter state 77
	'-'            shift, and enter state 78
	'\\'           shift, and enter state 80
	'false'        shift, and enter state 81
	'new'          shift, and enter state 83
	'null'         shift, and enter state 84
	'true'         shift, and enter state 86
	'~'            shift, and enter state 89
	L_integ        shift, and enter state 2
	L_VIdent       shift, and enter state 19

	Integer        goto state 62
	VIdent         goto state 63
	Expr7          goto state 67
	Expr6          goto state 68
	Expr5          goto state 69
	Expr4          goto state 70
	Expr3          goto state 71
	Expr2          goto state 72
	Expr1          goto state 73
	Expr           goto state 99
	UnaryOp        goto state 75

State 78

	UnaryOp -> '-' .                                    (rule 86)

	'!'            reduce using rule 86
	'('            reduce using rule 86
	'-'            reduce using rule 86
	'false'        reduce using rule 86
	'null'         reduce using rule 86
	'true'         reduce using rule 86
	'~'            reduce using rule 86
	L_integ        reduce using rule 86
	L_VIdent       reduce using rule 86


State 79

	Stmt -> ';' .                                       (rule 25)

	'!'            reduce using rule 25
	'('            reduce using rule 25
	'-'            reduce using rule 25
	';'            reduce using rule 25
	'\\'           reduce using rule 25
	'bool'         reduce using rule 25
	'else'         reduce using rule 25
	'false'        reduce using rule 25
	'if'           reduce using rule 25
	'int'          reduce using rule 25
	'new'          reduce using rule 25
	'null'         reduce using rule 25
	'return'       reduce using rule 25
	'true'         reduce using rule 25
	'void'         reduce using rule 25
	'while'        reduce using rule 25
	'{'            reduce using rule 25
	'}'            reduce using rule 25
	'~'            reduce using rule 25
	'for'          reduce using rule 25
	L_integ        reduce using rule 25
	L_CIdent       reduce using rule 25
	L_VIdent       reduce using rule 25


State 80

	Expr -> '\\' . ListArgument '->' LambdaExpr         (rule 78)

	'->'           reduce using rule 12
	'bool'         shift, and enter state 8
	'int'          shift, and enter state 10
	'void'         shift, and enter state 11
	L_CIdent       shift, and enter state 13

	CIdent         goto state 3
	Argument       goto state 30
	ListArgument   goto state 98
	Type           goto state 32

State 81

	Expr7 -> 'false' .                                  (rule 58)

	'!='           reduce using rule 58
	'%'            reduce using rule 58
	'&'            reduce using rule 58
	'&&'           reduce using rule 58
	'('            reduce using rule 58
	')'            reduce using rule 58
	'*'            reduce using rule 58
	'+'            reduce using rule 58
	'++'           reduce using rule 58
	','            reduce using rule 58
	'-'            reduce using rule 58
	'--'           reduce using rule 58
	'.'            reduce using rule 58
	'/'            reduce using rule 58
	';'            reduce using rule 58
	'<'            reduce using rule 58
	'<<'           reduce using rule 58
	'<='           reduce using rule 58
	'='            reduce using rule 58
	'=='           reduce using rule 58
	'>'            reduce using rule 58
	'>='           reduce using rule 58
	'>>'           reduce using rule 58
	'['            reduce using rule 58
	']'            reduce using rule 58
	'^'            reduce using rule 58
	'else'         reduce using rule 58
	'|'            reduce using rule 58
	'||'           reduce using rule 58
	'to'           reduce using rule 58
	'down'         reduce using rule 58
	'by'           reduce using rule 58
	'then'         reduce using rule 58


State 82

	Stmt -> 'if' . '(' Expr ')' Stmt                    (rule 33)
	Stmt -> 'if' . '(' Expr ')' Stmt 'else' Stmt        (rule 34)

	'('            shift, and enter state 97


State 83

	Expr -> 'new' . CIdent '(' ListExpr ')'             (rule 76)
	Expr -> 'new' . Type '[' Expr ']'                   (rule 77)

	'bool'         shift, and enter state 8
	'int'          shift, and enter state 10
	'void'         shift, and enter state 11
	L_CIdent       shift, and enter state 13

	CIdent         goto state 95
	Type           goto state 96

State 84

	Expr7 -> 'null' .                                   (rule 55)

	'!='           reduce using rule 55
	'%'            reduce using rule 55
	'&'            reduce using rule 55
	'&&'           reduce using rule 55
	'('            reduce using rule 55
	')'            reduce using rule 55
	'*'            reduce using rule 55
	'+'            reduce using rule 55
	'++'           reduce using rule 55
	','            reduce using rule 55
	'-'            reduce using rule 55
	'--'           reduce using rule 55
	'.'            reduce using rule 55
	'/'            reduce using rule 55
	';'            reduce using rule 55
	'<'            reduce using rule 55
	'<<'           reduce using rule 55
	'<='           reduce using rule 55
	'='            reduce using rule 55
	'=='           reduce using rule 55
	'>'            reduce using rule 55
	'>='           reduce using rule 55
	'>>'           reduce using rule 55
	'['            reduce using rule 55
	']'            reduce using rule 55
	'^'            reduce using rule 55
	'else'         reduce using rule 55
	'|'            reduce using rule 55
	'||'           reduce using rule 55
	'to'           reduce using rule 55
	'down'         reduce using rule 55
	'by'           reduce using rule 55
	'then'         reduce using rule 55


State 85

	Stmt -> 'return' . Expr ';'                         (rule 31)
	Stmt -> 'return' . ';'                              (rule 32)

	'!'            shift, and enter state 76
	'('            shift, and enter state 77
	'-'            shift, and enter state 78
	';'            shift, and enter state 94
	'\\'           shift, and enter state 80
	'false'        shift, and enter state 81
	'new'          shift, and enter state 83
	'null'         shift, and enter state 84
	'true'         shift, and enter state 86
	'~'            shift, and enter state 89
	L_integ        shift, and enter state 2
	L_VIdent       shift, and enter state 19

	Integer        goto state 62
	VIdent         goto state 63
	Expr7          goto state 67
	Expr6          goto state 68
	Expr5          goto state 69
	Expr4          goto state 70
	Expr3          goto state 71
	Expr2          goto state 72
	Expr1          goto state 73
	Expr           goto state 93
	UnaryOp        goto state 75

State 86

	Expr7 -> 'true' .                                   (rule 57)

	'!='           reduce using rule 57
	'%'            reduce using rule 57
	'&'            reduce using rule 57
	'&&'           reduce using rule 57
	'('            reduce using rule 57
	')'            reduce using rule 57
	'*'            reduce using rule 57
	'+'            reduce using rule 57
	'++'           reduce using rule 57
	','            reduce using rule 57
	'-'            reduce using rule 57
	'--'           reduce using rule 57
	'.'            reduce using rule 57
	'/'            reduce using rule 57
	';'            reduce using rule 57
	'<'            reduce using rule 57
	'<<'           reduce using rule 57
	'<='           reduce using rule 57
	'='            reduce using rule 57
	'=='           reduce using rule 57
	'>'            reduce using rule 57
	'>='           reduce using rule 57
	'>>'           reduce using rule 57
	'['            reduce using rule 57
	']'            reduce using rule 57
	'^'            reduce using rule 57
	'else'         reduce using rule 57
	'|'            reduce using rule 57
	'||'           reduce using rule 57
	'to'           reduce using rule 57
	'down'         reduce using rule 57
	'by'           reduce using rule 57
	'then'         reduce using rule 57


State 87

	Stmt -> 'while' . '(' Expr ')' Stmt                 (rule 35)

	'('            shift, and enter state 92


State 88

	Block -> '{' ListStmt '}' .                         (rule 22)

	'!'            reduce using rule 22
	'('            reduce using rule 22
	')'            reduce using rule 22
	'++'           reduce using rule 22
	','            reduce using rule 22
	'-'            reduce using rule 22
	'--'           reduce using rule 22
	';'            reduce using rule 22
	'='            reduce using rule 22
	'\\'           reduce using rule 22
	']'            reduce using rule 22
	'bool'         reduce using rule 22
	'class'        reduce using rule 22
	'else'         reduce using rule 22
	'false'        reduce using rule 22
	'if'           reduce using rule 22
	'int'          reduce using rule 22
	'new'          reduce using rule 22
	'null'         reduce using rule 22
	'return'       reduce using rule 22
	'true'         reduce using rule 22
	'void'         reduce using rule 22
	'while'        reduce using rule 22
	'{'            reduce using rule 22
	'}'            reduce using rule 22
	'~'            reduce using rule 22
	'for'          reduce using rule 22
	'to'           reduce using rule 22
	'down'         reduce using rule 22
	'by'           reduce using rule 22
	'constr'       reduce using rule 22
	'then'         reduce using rule 22
	'typedef'      reduce using rule 22
	L_integ        reduce using rule 22
	L_CIdent       reduce using rule 22
	L_VIdent       reduce using rule 22
	%eof           reduce using rule 22


State 89

	UnaryOp -> '~' .                                    (rule 88)

	'!'            reduce using rule 88
	'('            reduce using rule 88
	'-'            reduce using rule 88
	'false'        reduce using rule 88
	'null'         reduce using rule 88
	'true'         reduce using rule 88
	'~'            reduce using rule 88
	L_integ        reduce using rule 88
	L_VIdent       reduce using rule 88


State 90

	Stmt -> 'for' . '(' VIdent '=' Expr 'to' Expr ')' Stmt    (rule 36)
	Stmt -> 'for' . '(' VIdent '=' Expr 'to' Expr 'by' Expr ')' Stmt    (rule 37)
	Stmt -> 'for' . '(' VIdent '=' Expr 'down' 'to' Expr ')' Stmt    (rule 38)
	Stmt -> 'for' . '(' VIdent '=' Expr 'down' 'to' Expr 'by' Expr ')' Stmt    (rule 39)
	Stmt -> 'for' . '(' VIdent 'in' Expr ')' Stmt       (rule 40)

	'('            shift, and enter state 91


State 91

	Stmt -> 'for' '(' . VIdent '=' Expr 'to' Expr ')' Stmt    (rule 36)
	Stmt -> 'for' '(' . VIdent '=' Expr 'to' Expr 'by' Expr ')' Stmt    (rule 37)
	Stmt -> 'for' '(' . VIdent '=' Expr 'down' 'to' Expr ')' Stmt    (rule 38)
	Stmt -> 'for' '(' . VIdent '=' Expr 'down' 'to' Expr 'by' Expr ')' Stmt    (rule 39)
	Stmt -> 'for' '(' . VIdent 'in' Expr ')' Stmt       (rule 40)

	L_VIdent       shift, and enter state 19

	VIdent         goto state 157

State 92

	Stmt -> 'while' '(' . Expr ')' Stmt                 (rule 35)

	'!'            shift, and enter state 76
	'('            shift, and enter state 77
	'-'            shift, and enter state 78
	'\\'           shift, and enter state 80
	'false'        shift, and enter state 81
	'new'          shift, and enter state 83
	'null'         shift, and enter state 84
	'true'         shift, and enter state 86
	'~'            shift, and enter state 89
	L_integ        shift, and enter state 2
	L_VIdent       shift, and enter state 19

	Integer        goto state 62
	VIdent         goto state 63
	Expr7          goto state 67
	Expr6          goto state 68
	Expr5          goto state 69
	Expr4          goto state 70
	Expr3          goto state 71
	Expr2          goto state 72
	Expr1          goto state 73
	Expr           goto state 156
	UnaryOp        goto state 75

State 93

	Stmt -> 'return' Expr . ';'                         (rule 31)

	';'            shift, and enter state 155


State 94

	Stmt -> 'return' ';' .                              (rule 32)

	'!'            reduce using rule 32
	'('            reduce using rule 32
	'-'            reduce using rule 32
	';'            reduce using rule 32
	'\\'           reduce using rule 32
	'bool'         reduce using rule 32
	'else'         reduce using rule 32
	'false'        reduce using rule 32
	'if'           reduce using rule 32
	'int'          reduce using rule 32
	'new'          reduce using rule 32
	'null'         reduce using rule 32
	'return'       reduce using rule 32
	'true'         reduce using rule 32
	'void'         reduce using rule 32
	'while'        reduce using rule 32
	'{'            reduce using rule 32
	'}'            reduce using rule 32
	'~'            reduce using rule 32
	'for'          reduce using rule 32
	L_integ        reduce using rule 32
	L_CIdent       reduce using rule 32
	L_VIdent       reduce using rule 32


State 95

	Type -> CIdent .                                    (rule 49)
	Expr -> 'new' CIdent . '(' ListExpr ')'             (rule 76)

	'('            shift, and enter state 154
			(reduce using rule 49)

	'['            reduce using rule 49
	'[]'           reduce using rule 49


State 96

	Type -> Type . '[]'                                 (rule 50)
	Type -> Type . '(' ListType ')'                     (rule 51)
	Expr -> 'new' Type . '[' Expr ']'                   (rule 77)

	'('            shift, and enter state 17
	'['            shift, and enter state 153
	'[]'           shift, and enter state 18


State 97

	Stmt -> 'if' '(' . Expr ')' Stmt                    (rule 33)
	Stmt -> 'if' '(' . Expr ')' Stmt 'else' Stmt        (rule 34)

	'!'            shift, and enter state 76
	'('            shift, and enter state 77
	'-'            shift, and enter state 78
	'\\'           shift, and enter state 80
	'false'        shift, and enter state 81
	'new'          shift, and enter state 83
	'null'         shift, and enter state 84
	'true'         shift, and enter state 86
	'~'            shift, and enter state 89
	L_integ        shift, and enter state 2
	L_VIdent       shift, and enter state 19

	Integer        goto state 62
	VIdent         goto state 63
	Expr7          goto state 67
	Expr6          goto state 68
	Expr5          goto state 69
	Expr4          goto state 70
	Expr3          goto state 71
	Expr2          goto state 72
	Expr1          goto state 73
	Expr           goto state 152
	UnaryOp        goto state 75

State 98

	Expr -> '\\' ListArgument . '->' LambdaExpr         (rule 78)

	'->'           shift, and enter state 151


State 99

	Expr7 -> '(' Expr . ')'                             (rule 63)

	')'            shift, and enter state 150


State 100

	Expr6 -> UnaryOp Expr6 .                            (rule 64)

	'!='           reduce using rule 64
	'%'            reduce using rule 64
	'&'            reduce using rule 64
	'&&'           reduce using rule 64
	')'            reduce using rule 64
	'*'            reduce using rule 64
	'+'            reduce using rule 64
	'++'           reduce using rule 64
	','            reduce using rule 64
	'-'            reduce using rule 64
	'--'           reduce using rule 64
	'/'            reduce using rule 64
	';'            reduce using rule 64
	'<'            reduce using rule 64
	'<<'           reduce using rule 64
	'<='           reduce using rule 64
	'='            reduce using rule 64
	'=='           reduce using rule 64
	'>'            reduce using rule 64
	'>='           reduce using rule 64
	'>>'           reduce using rule 64
	']'            reduce using rule 64
	'^'            reduce using rule 64
	'else'         reduce using rule 64
	'|'            reduce using rule 64
	'||'           reduce using rule 64
	'to'           reduce using rule 64
	'down'         reduce using rule 64
	'by'           reduce using rule 64
	'then'         reduce using rule 64


State 101

	Stmt -> Expr '++' . ';'                             (rule 29)

	';'            shift, and enter state 149


State 102

	Stmt -> Expr '--' . ';'                             (rule 30)

	';'            shift, and enter state 148


State 103

	Stmt -> Expr ';' .                                  (rule 41)

	'!'            reduce using rule 41
	'('            reduce using rule 41
	'-'            reduce using rule 41
	';'            reduce using rule 41
	'\\'           reduce using rule 41
	'bool'         reduce using rule 41
	'else'         reduce using rule 41
	'false'        reduce using rule 41
	'if'           reduce using rule 41
	'int'          reduce using rule 41
	'new'          reduce using rule 41
	'null'         reduce using rule 41
	'return'       reduce using rule 41
	'true'         reduce using rule 41
	'void'         reduce using rule 41
	'while'        reduce using rule 41
	'{'            reduce using rule 41
	'}'            reduce using rule 41
	'~'            reduce using rule 41
	'for'          reduce using rule 41
	L_integ        reduce using rule 41
	L_CIdent       reduce using rule 41
	L_VIdent       reduce using rule 41


State 104

	Stmt -> Expr '=' . Expr ';'                         (rule 28)

	'!'            shift, and enter state 76
	'('            shift, and enter state 77
	'-'            shift, and enter state 78
	'\\'           shift, and enter state 80
	'false'        shift, and enter state 81
	'new'          shift, and enter state 83
	'null'         shift, and enter state 84
	'true'         shift, and enter state 86
	'~'            shift, and enter state 89
	L_integ        shift, and enter state 2
	L_VIdent       shift, and enter state 19

	Integer        goto state 62
	VIdent         goto state 63
	Expr7          goto state 67
	Expr6          goto state 68
	Expr5          goto state 69
	Expr4          goto state 70
	Expr3          goto state 71
	Expr2          goto state 72
	Expr1          goto state 73
	Expr           goto state 147
	UnaryOp        goto state 75

State 105

	Expr1 -> Expr2 '||' . Expr1                         (rule 74)

	'!'            shift, and enter state 76
	'('            shift, and enter state 77
	'-'            shift, and enter state 78
	'false'        shift, and enter state 81
	'null'         shift, and enter state 84
	'true'         shift, and enter state 86
	'~'            shift, and enter state 89
	L_integ        shift, and enter state 2
	L_VIdent       shift, and enter state 19

	Integer        goto state 62
	VIdent         goto state 63
	Expr7          goto state 67
	Expr6          goto state 68
	Expr5          goto state 69
	Expr4          goto state 70
	Expr3          goto state 71
	Expr2          goto state 72
	Expr1          goto state 146
	UnaryOp        goto state 75

State 106

	Expr3 -> Expr3 RelOp . Expr4                        (rule 70)

	'!'            shift, and enter state 76
	'('            shift, and enter state 77
	'-'            shift, and enter state 78
	'false'        shift, and enter state 81
	'null'         shift, and enter state 84
	'true'         shift, and enter state 86
	'~'            shift, and enter state 89
	L_integ        shift, and enter state 2
	L_VIdent       shift, and enter state 19

	Integer        goto state 62
	VIdent         goto state 63
	Expr7          goto state 67
	Expr6          goto state 68
	Expr5          goto state 69
	Expr4          goto state 145
	UnaryOp        goto state 75

State 107

	RelOp -> '!=' .                                     (rule 104)

	'!'            reduce using rule 104
	'('            reduce using rule 104
	'-'            reduce using rule 104
	'false'        reduce using rule 104
	'null'         reduce using rule 104
	'true'         reduce using rule 104
	'~'            reduce using rule 104
	L_integ        reduce using rule 104
	L_VIdent       reduce using rule 104


State 108

	Expr2 -> Expr3 '&&' . Expr2                         (rule 72)

	'!'            shift, and enter state 76
	'('            shift, and enter state 77
	'-'            shift, and enter state 78
	'false'        shift, and enter state 81
	'null'         shift, and enter state 84
	'true'         shift, and enter state 86
	'~'            shift, and enter state 89
	L_integ        shift, and enter state 2
	L_VIdent       shift, and enter state 19

	Integer        goto state 62
	VIdent         goto state 63
	Expr7          goto state 67
	Expr6          goto state 68
	Expr5          goto state 69
	Expr4          goto state 70
	Expr3          goto state 71
	Expr2          goto state 144
	UnaryOp        goto state 75

State 109

	RelOp -> '<' .                                      (rule 99)

	'!'            reduce using rule 99
	'('            reduce using rule 99
	'-'            reduce using rule 99
	'false'        reduce using rule 99
	'null'         reduce using rule 99
	'true'         reduce using rule 99
	'~'            reduce using rule 99
	L_integ        reduce using rule 99
	L_VIdent       reduce using rule 99


State 110

	RelOp -> '<=' .                                     (rule 100)

	'!'            reduce using rule 100
	'('            reduce using rule 100
	'-'            reduce using rule 100
	'false'        reduce using rule 100
	'null'         reduce using rule 100
	'true'         reduce using rule 100
	'~'            reduce using rule 100
	L_integ        reduce using rule 100
	L_VIdent       reduce using rule 100


State 111

	RelOp -> '==' .                                     (rule 103)

	'!'            reduce using rule 103
	'('            reduce using rule 103
	'-'            reduce using rule 103
	'false'        reduce using rule 103
	'null'         reduce using rule 103
	'true'         reduce using rule 103
	'~'            reduce using rule 103
	L_integ        reduce using rule 103
	L_VIdent       reduce using rule 103


State 112

	RelOp -> '>' .                                      (rule 101)

	'!'            reduce using rule 101
	'('            reduce using rule 101
	'-'            reduce using rule 101
	'false'        reduce using rule 101
	'null'         reduce using rule 101
	'true'         reduce using rule 101
	'~'            reduce using rule 101
	L_integ        reduce using rule 101
	L_VIdent       reduce using rule 101


State 113

	RelOp -> '>=' .                                     (rule 102)

	'!'            reduce using rule 102
	'('            reduce using rule 102
	'-'            reduce using rule 102
	'false'        reduce using rule 102
	'null'         reduce using rule 102
	'true'         reduce using rule 102
	'~'            reduce using rule 102
	L_integ        reduce using rule 102
	L_VIdent       reduce using rule 102


State 114

	Expr4 -> Expr4 AddOp . Expr5                        (rule 68)

	'!'            shift, and enter state 76
	'('            shift, and enter state 77
	'-'            shift, and enter state 78
	'false'        shift, and enter state 81
	'null'         shift, and enter state 84
	'true'         shift, and enter state 86
	'~'            shift, and enter state 89
	L_integ        shift, and enter state 2
	L_VIdent       shift, and enter state 19

	Integer        goto state 62
	VIdent         goto state 63
	Expr7          goto state 67
	Expr6          goto state 68
	Expr5          goto state 143
	UnaryOp        goto state 75

State 115

	AddOp -> '+' .                                      (rule 89)

	'!'            reduce using rule 89
	'('            reduce using rule 89
	'-'            reduce using rule 89
	'false'        reduce using rule 89
	'null'         reduce using rule 89
	'true'         reduce using rule 89
	'~'            reduce using rule 89
	L_integ        reduce using rule 89
	L_VIdent       reduce using rule 89


State 116

	AddOp -> '-' .                                      (rule 90)

	'!'            reduce using rule 90
	'('            reduce using rule 90
	'-'            reduce using rule 90
	'false'        reduce using rule 90
	'null'         reduce using rule 90
	'true'         reduce using rule 90
	'~'            reduce using rule 90
	L_integ        reduce using rule 90
	L_VIdent       reduce using rule 90


State 117

	Expr5 -> Expr5 MulOp . Expr6                        (rule 66)

	'!'            shift, and enter state 76
	'('            shift, and enter state 77
	'-'            shift, and enter state 78
	'false'        shift, and enter state 81
	'null'         shift, and enter state 84
	'true'         shift, and enter state 86
	'~'            shift, and enter state 89
	L_integ        shift, and enter state 2
	L_VIdent       shift, and enter state 19

	Integer        goto state 62
	VIdent         goto state 63
	Expr7          goto state 67
	Expr6          goto state 142
	UnaryOp        goto state 75

State 118

	MulOp -> '%' .                                      (rule 93)

	'!'            reduce using rule 93
	'('            reduce using rule 93
	'-'            reduce using rule 93
	'false'        reduce using rule 93
	'null'         reduce using rule 93
	'true'         reduce using rule 93
	'~'            reduce using rule 93
	L_integ        reduce using rule 93
	L_VIdent       reduce using rule 93


State 119

	MulOp -> '&' .                                      (rule 96)

	'!'            reduce using rule 96
	'('            reduce using rule 96
	'-'            reduce using rule 96
	'false'        reduce using rule 96
	'null'         reduce using rule 96
	'true'         reduce using rule 96
	'~'            reduce using rule 96
	L_integ        reduce using rule 96
	L_VIdent       reduce using rule 96


State 120

	MulOp -> '*' .                                      (rule 91)

	'!'            reduce using rule 91
	'('            reduce using rule 91
	'-'            reduce using rule 91
	'false'        reduce using rule 91
	'null'         reduce using rule 91
	'true'         reduce using rule 91
	'~'            reduce using rule 91
	L_integ        reduce using rule 91
	L_VIdent       reduce using rule 91


State 121

	MulOp -> '/' .                                      (rule 92)

	'!'            reduce using rule 92
	'('            reduce using rule 92
	'-'            reduce using rule 92
	'false'        reduce using rule 92
	'null'         reduce using rule 92
	'true'         reduce using rule 92
	'~'            reduce using rule 92
	L_integ        reduce using rule 92
	L_VIdent       reduce using rule 92


State 122

	MulOp -> '<<' .                                     (rule 94)

	'!'            reduce using rule 94
	'('            reduce using rule 94
	'-'            reduce using rule 94
	'false'        reduce using rule 94
	'null'         reduce using rule 94
	'true'         reduce using rule 94
	'~'            reduce using rule 94
	L_integ        reduce using rule 94
	L_VIdent       reduce using rule 94


State 123

	MulOp -> '>>' .                                     (rule 95)

	'!'            reduce using rule 95
	'('            reduce using rule 95
	'-'            reduce using rule 95
	'false'        reduce using rule 95
	'null'         reduce using rule 95
	'true'         reduce using rule 95
	'~'            reduce using rule 95
	L_integ        reduce using rule 95
	L_VIdent       reduce using rule 95


State 124

	MulOp -> '^' .                                      (rule 98)

	'!'            reduce using rule 98
	'('            reduce using rule 98
	'-'            reduce using rule 98
	'false'        reduce using rule 98
	'null'         reduce using rule 98
	'true'         reduce using rule 98
	'~'            reduce using rule 98
	L_integ        reduce using rule 98
	L_VIdent       reduce using rule 98


State 125

	MulOp -> '|' .                                      (rule 97)

	'!'            reduce using rule 97
	'('            reduce using rule 97
	'-'            reduce using rule 97
	'false'        reduce using rule 97
	'null'         reduce using rule 97
	'true'         reduce using rule 97
	'~'            reduce using rule 97
	L_integ        reduce using rule 97
	L_VIdent       reduce using rule 97


State 126

	Expr7 -> Expr7 '(' . ListExpr ')'                   (rule 62)

	'!'            shift, and enter state 76
	'('            shift, and enter state 77
	')'            reduce using rule 80
	'-'            shift, and enter state 78
	'\\'           shift, and enter state 80
	'false'        shift, and enter state 81
	'new'          shift, and enter state 83
	'null'         shift, and enter state 84
	'true'         shift, and enter state 86
	'~'            shift, and enter state 89
	L_integ        shift, and enter state 2
	L_VIdent       shift, and enter state 19

	Integer        goto state 62
	VIdent         goto state 63
	Expr7          goto state 67
	Expr6          goto state 68
	Expr5          goto state 69
	Expr4          goto state 70
	Expr3          goto state 71
	Expr2          goto state 72
	Expr1          goto state 73
	Expr           goto state 140
	ListExpr       goto state 141
	UnaryOp        goto state 75

State 127

	Expr7 -> Expr7 '.' . VIdent                         (rule 60)

	L_VIdent       shift, and enter state 19

	VIdent         goto state 139

State 128

	Expr7 -> Expr7 '[' . Expr ']'                       (rule 61)

	'!'            shift, and enter state 76
	'('            shift, and enter state 77
	'-'            shift, and enter state 78
	'\\'           shift, and enter state 80
	'false'        shift, and enter state 81
	'new'          shift, and enter state 83
	'null'         shift, and enter state 84
	'true'         shift, and enter state 86
	'~'            shift, and enter state 89
	L_integ        shift, and enter state 2
	L_VIdent       shift, and enter state 19

	Integer        goto state 62
	VIdent         goto state 63
	Expr7          goto state 67
	Expr6          goto state 68
	Expr5          goto state 69
	Expr4          goto state 70
	Expr3          goto state 71
	Expr2          goto state 72
	Expr1          goto state 73
	Expr           goto state 138
	UnaryOp        goto state 75

State 129

	Item -> VIdent .                                    (rule 42)
	Item -> VIdent . '=' Expr                           (rule 43)

	','            reduce using rule 42
	';'            reduce using rule 42
	'='            shift, and enter state 137


State 130

	ListItem -> Item .                                  (rule 44)
	ListItem -> Item . ',' ListItem                     (rule 45)

	','            shift, and enter state 136
	';'            reduce using rule 44


State 131

	Stmt -> Type ListItem . ';'                         (rule 27)

	';'            shift, and enter state 135


State 132

	ClassElem -> Type VIdent '(' ListArgument ')' . Block    (rule 17)

	'{'            shift, and enter state 51

	Block          goto state 134

State 133

	ClassElem -> 'constr' '(' ListArgument ')' Block .    (rule 16)

	'bool'         reduce using rule 16
	'int'          reduce using rule 16
	'void'         reduce using rule 16
	'}'            reduce using rule 16
	'constr'       reduce using rule 16
	L_CIdent       reduce using rule 16


State 134

	ClassElem -> Type VIdent '(' ListArgument ')' Block .    (rule 17)

	'bool'         reduce using rule 17
	'int'          reduce using rule 17
	'void'         reduce using rule 17
	'}'            reduce using rule 17
	'constr'       reduce using rule 17
	L_CIdent       reduce using rule 17


State 135

	Stmt -> Type ListItem ';' .                         (rule 27)

	'!'            reduce using rule 27
	'('            reduce using rule 27
	'-'            reduce using rule 27
	';'            reduce using rule 27
	'\\'           reduce using rule 27
	'bool'         reduce using rule 27
	'else'         reduce using rule 27
	'false'        reduce using rule 27
	'if'           reduce using rule 27
	'int'          reduce using rule 27
	'new'          reduce using rule 27
	'null'         reduce using rule 27
	'return'       reduce using rule 27
	'true'         reduce using rule 27
	'void'         reduce using rule 27
	'while'        reduce using rule 27
	'{'            reduce using rule 27
	'}'            reduce using rule 27
	'~'            reduce using rule 27
	'for'          reduce using rule 27
	L_integ        reduce using rule 27
	L_CIdent       reduce using rule 27
	L_VIdent       reduce using rule 27


State 136

	ListItem -> Item ',' . ListItem                     (rule 45)

	L_VIdent       shift, and enter state 19

	VIdent         goto state 129
	Item           goto state 130
	ListItem       goto state 173

State 137

	Item -> VIdent '=' . Expr                           (rule 43)

	'!'            shift, and enter state 76
	'('            shift, and enter state 77
	'-'            shift, and enter state 78
	'\\'           shift, and enter state 80
	'false'        shift, and enter state 81
	'new'          shift, and enter state 83
	'null'         shift, and enter state 84
	'true'         shift, and enter state 86
	'~'            shift, and enter state 89
	L_integ        shift, and enter state 2
	L_VIdent       shift, and enter state 19

	Integer        goto state 62
	VIdent         goto state 63
	Expr7          goto state 67
	Expr6          goto state 68
	Expr5          goto state 69
	Expr4          goto state 70
	Expr3          goto state 71
	Expr2          goto state 72
	Expr1          goto state 73
	Expr           goto state 172
	UnaryOp        goto state 75

State 138

	Expr7 -> Expr7 '[' Expr . ']'                       (rule 61)

	']'            shift, and enter state 171


State 139

	Expr7 -> Expr7 '.' VIdent .                         (rule 60)

	'!='           reduce using rule 60
	'%'            reduce using rule 60
	'&'            reduce using rule 60
	'&&'           reduce using rule 60
	'('            reduce using rule 60
	')'            reduce using rule 60
	'*'            reduce using rule 60
	'+'            reduce using rule 60
	'++'           reduce using rule 60
	','            reduce using rule 60
	'-'            reduce using rule 60
	'--'           reduce using rule 60
	'.'            reduce using rule 60
	'/'            reduce using rule 60
	';'            reduce using rule 60
	'<'            reduce using rule 60
	'<<'           reduce using rule 60
	'<='           reduce using rule 60
	'='            reduce using rule 60
	'=='           reduce using rule 60
	'>'            reduce using rule 60
	'>='           reduce using rule 60
	'>>'           reduce using rule 60
	'['            reduce using rule 60
	']'            reduce using rule 60
	'^'            reduce using rule 60
	'else'         reduce using rule 60
	'|'            reduce using rule 60
	'||'           reduce using rule 60
	'to'           reduce using rule 60
	'down'         reduce using rule 60
	'by'           reduce using rule 60
	'then'         reduce using rule 60


State 140

	ListExpr -> Expr .                                  (rule 81)
	ListExpr -> Expr . ',' ListExpr                     (rule 82)

	')'            reduce using rule 81
	','            shift, and enter state 170


State 141

	Expr7 -> Expr7 '(' ListExpr . ')'                   (rule 62)

	')'            shift, and enter state 169


State 142

	Expr5 -> Expr5 MulOp Expr6 .                        (rule 66)

	'!='           reduce using rule 66
	'%'            reduce using rule 66
	'&'            reduce using rule 66
	'&&'           reduce using rule 66
	')'            reduce using rule 66
	'*'            reduce using rule 66
	'+'            reduce using rule 66
	'++'           reduce using rule 66
	','            reduce using rule 66
	'-'            reduce using rule 66
	'--'           reduce using rule 66
	'/'            reduce using rule 66
	';'            reduce using rule 66
	'<'            reduce using rule 66
	'<<'           reduce using rule 66
	'<='           reduce using rule 66
	'='            reduce using rule 66
	'=='           reduce using rule 66
	'>'            reduce using rule 66
	'>='           reduce using rule 66
	'>>'           reduce using rule 66
	']'            reduce using rule 66
	'^'            reduce using rule 66
	'else'         reduce using rule 66
	'|'            reduce using rule 66
	'||'           reduce using rule 66
	'to'           reduce using rule 66
	'down'         reduce using rule 66
	'by'           reduce using rule 66
	'then'         reduce using rule 66


State 143

	Expr5 -> Expr5 . MulOp Expr6                        (rule 66)
	Expr4 -> Expr4 AddOp Expr5 .                        (rule 68)

	'!='           reduce using rule 68
	'%'            shift, and enter state 118
	'&'            shift, and enter state 119
	'&&'           reduce using rule 68
	')'            reduce using rule 68
	'*'            shift, and enter state 120
	'+'            reduce using rule 68
	'++'           reduce using rule 68
	','            reduce using rule 68
	'-'            reduce using rule 68
	'--'           reduce using rule 68
	'/'            shift, and enter state 121
	';'            reduce using rule 68
	'<'            reduce using rule 68
	'<<'           shift, and enter state 122
	'<='           reduce using rule 68
	'='            reduce using rule 68
	'=='           reduce using rule 68
	'>'            reduce using rule 68
	'>='           reduce using rule 68
	'>>'           shift, and enter state 123
	']'            reduce using rule 68
	'^'            shift, and enter state 124
	'else'         reduce using rule 68
	'|'            shift, and enter state 125
	'||'           reduce using rule 68
	'to'           reduce using rule 68
	'down'         reduce using rule 68
	'by'           reduce using rule 68
	'then'         reduce using rule 68

	MulOp          goto state 117

State 144

	Expr2 -> Expr3 '&&' Expr2 .                         (rule 72)

	')'            reduce using rule 72
	'++'           reduce using rule 72
	','            reduce using rule 72
	'--'           reduce using rule 72
	';'            reduce using rule 72
	'='            reduce using rule 72
	']'            reduce using rule 72
	'else'         reduce using rule 72
	'||'           reduce using rule 72
	'to'           reduce using rule 72
	'down'         reduce using rule 72
	'by'           reduce using rule 72
	'then'         reduce using rule 72


State 145

	Expr4 -> Expr4 . AddOp Expr5                        (rule 68)
	Expr3 -> Expr3 RelOp Expr4 .                        (rule 70)

	'!='           reduce using rule 70
	'&&'           reduce using rule 70
	')'            reduce using rule 70
	'+'            shift, and enter state 115
	'++'           reduce using rule 70
	','            reduce using rule 70
	'-'            shift, and enter state 116
	'--'           reduce using rule 70
	';'            reduce using rule 70
	'<'            reduce using rule 70
	'<='           reduce using rule 70
	'='            reduce using rule 70
	'=='           reduce using rule 70
	'>'            reduce using rule 70
	'>='           reduce using rule 70
	']'            reduce using rule 70
	'else'         reduce using rule 70
	'||'           reduce using rule 70
	'to'           reduce using rule 70
	'down'         reduce using rule 70
	'by'           reduce using rule 70
	'then'         reduce using rule 70

	AddOp          goto state 114

State 146

	Expr1 -> Expr2 '||' Expr1 .                         (rule 74)

	')'            reduce using rule 74
	'++'           reduce using rule 74
	','            reduce using rule 74
	'--'           reduce using rule 74
	';'            reduce using rule 74
	'='            reduce using rule 74
	']'            reduce using rule 74
	'else'         reduce using rule 74
	'to'           reduce using rule 74
	'down'         reduce using rule 74
	'by'           reduce using rule 74
	'then'         reduce using rule 74


State 147

	Stmt -> Expr '=' Expr . ';'                         (rule 28)

	';'            shift, and enter state 168


State 148

	Stmt -> Expr '--' ';' .                             (rule 30)

	'!'            reduce using rule 30
	'('            reduce using rule 30
	'-'            reduce using rule 30
	';'            reduce using rule 30
	'\\'           reduce using rule 30
	'bool'         reduce using rule 30
	'else'         reduce using rule 30
	'false'        reduce using rule 30
	'if'           reduce using rule 30
	'int'          reduce using rule 30
	'new'          reduce using rule 30
	'null'         reduce using rule 30
	'return'       reduce using rule 30
	'true'         reduce using rule 30
	'void'         reduce using rule 30
	'while'        reduce using rule 30
	'{'            reduce using rule 30
	'}'            reduce using rule 30
	'~'            reduce using rule 30
	'for'          reduce using rule 30
	L_integ        reduce using rule 30
	L_CIdent       reduce using rule 30
	L_VIdent       reduce using rule 30


State 149

	Stmt -> Expr '++' ';' .                             (rule 29)

	'!'            reduce using rule 29
	'('            reduce using rule 29
	'-'            reduce using rule 29
	';'            reduce using rule 29
	'\\'           reduce using rule 29
	'bool'         reduce using rule 29
	'else'         reduce using rule 29
	'false'        reduce using rule 29
	'if'           reduce using rule 29
	'int'          reduce using rule 29
	'new'          reduce using rule 29
	'null'         reduce using rule 29
	'return'       reduce using rule 29
	'true'         reduce using rule 29
	'void'         reduce using rule 29
	'while'        reduce using rule 29
	'{'            reduce using rule 29
	'}'            reduce using rule 29
	'~'            reduce using rule 29
	'for'          reduce using rule 29
	L_integ        reduce using rule 29
	L_CIdent       reduce using rule 29
	L_VIdent       reduce using rule 29


State 150

	Expr7 -> '(' Expr ')' .                             (rule 63)

	'!='           reduce using rule 63
	'%'            reduce using rule 63
	'&'            reduce using rule 63
	'&&'           reduce using rule 63
	'('            reduce using rule 63
	')'            reduce using rule 63
	'*'            reduce using rule 63
	'+'            reduce using rule 63
	'++'           reduce using rule 63
	','            reduce using rule 63
	'-'            reduce using rule 63
	'--'           reduce using rule 63
	'.'            reduce using rule 63
	'/'            reduce using rule 63
	';'            reduce using rule 63
	'<'            reduce using rule 63
	'<<'           reduce using rule 63
	'<='           reduce using rule 63
	'='            reduce using rule 63
	'=='           reduce using rule 63
	'>'            reduce using rule 63
	'>='           reduce using rule 63
	'>>'           reduce using rule 63
	'['            reduce using rule 63
	']'            reduce using rule 63
	'^'            reduce using rule 63
	'else'         reduce using rule 63
	'|'            reduce using rule 63
	'||'           reduce using rule 63
	'to'           reduce using rule 63
	'down'         reduce using rule 63
	'by'           reduce using rule 63
	'then'         reduce using rule 63


State 151

	Expr -> '\\' ListArgument '->' . LambdaExpr         (rule 78)

	'!'            shift, and enter state 76
	'('            shift, and enter state 77
	'-'            shift, and enter state 78
	'\\'           shift, and enter state 80
	'false'        shift, and enter state 81
	'if'           shift, and enter state 167
	'new'          shift, and enter state 83
	'null'         shift, and enter state 84
	'true'         shift, and enter state 86
	'{'            shift, and enter state 51
	'~'            shift, and enter state 89
	L_integ        shift, and enter state 2
	L_VIdent       shift, and enter state 19

	Integer        goto state 62
	VIdent         goto state 63
	Block          goto state 164
	Expr7          goto state 67
	Expr6          goto state 68
	Expr5          goto state 69
	Expr4          goto state 70
	Expr3          goto state 71
	Expr2          goto state 72
	Expr1          goto state 73
	Expr           goto state 165
	LambdaExpr     goto state 166
	UnaryOp        goto state 75

State 152

	Stmt -> 'if' '(' Expr . ')' Stmt                    (rule 33)
	Stmt -> 'if' '(' Expr . ')' Stmt 'else' Stmt        (rule 34)

	')'            shift, and enter state 163


State 153

	Expr -> 'new' Type '[' . Expr ']'                   (rule 77)

	'!'            shift, and enter state 76
	'('            shift, and enter state 77
	'-'            shift, and enter state 78
	'\\'           shift, and enter state 80
	'false'        shift, and enter state 81
	'new'          shift, and enter state 83
	'null'         shift, and enter state 84
	'true'         shift, and enter state 86
	'~'            shift, and enter state 89
	L_integ        shift, and enter state 2
	L_VIdent       shift, and enter state 19

	Integer        goto state 62
	VIdent         goto state 63
	Expr7          goto state 67
	Expr6          goto state 68
	Expr5          goto state 69
	Expr4          goto state 70
	Expr3          goto state 71
	Expr2          goto state 72
	Expr1          goto state 73
	Expr           goto state 162
	UnaryOp        goto state 75

State 154

	Expr -> 'new' CIdent '(' . ListExpr ')'             (rule 76)

	'!'            shift, and enter state 76
	'('            shift, and enter state 77
	')'            reduce using rule 80
	'-'            shift, and enter state 78
	'\\'           shift, and enter state 80
	'false'        shift, and enter state 81
	'new'          shift, and enter state 83
	'null'         shift, and enter state 84
	'true'         shift, and enter state 86
	'~'            shift, and enter state 89
	L_integ        shift, and enter state 2
	L_VIdent       shift, and enter state 19

	Integer        goto state 62
	VIdent         goto state 63
	Expr7          goto state 67
	Expr6          goto state 68
	Expr5          goto state 69
	Expr4          goto state 70
	Expr3          goto state 71
	Expr2          goto state 72
	Expr1          goto state 73
	Expr           goto state 140
	ListExpr       goto state 161
	UnaryOp        goto state 75

State 155

	Stmt -> 'return' Expr ';' .                         (rule 31)

	'!'            reduce using rule 31
	'('            reduce using rule 31
	'-'            reduce using rule 31
	';'            reduce using rule 31
	'\\'           reduce using rule 31
	'bool'         reduce using rule 31
	'else'         reduce using rule 31
	'false'        reduce using rule 31
	'if'           reduce using rule 31
	'int'          reduce using rule 31
	'new'          reduce using rule 31
	'null'         reduce using rule 31
	'return'       reduce using rule 31
	'true'         reduce using rule 31
	'void'         reduce using rule 31
	'while'        reduce using rule 31
	'{'            reduce using rule 31
	'}'            reduce using rule 31
	'~'            reduce using rule 31
	'for'          reduce using rule 31
	L_integ        reduce using rule 31
	L_CIdent       reduce using rule 31
	L_VIdent       reduce using rule 31


State 156

	Stmt -> 'while' '(' Expr . ')' Stmt                 (rule 35)

	')'            shift, and enter state 160


State 157

	Stmt -> 'for' '(' VIdent . '=' Expr 'to' Expr ')' Stmt    (rule 36)
	Stmt -> 'for' '(' VIdent . '=' Expr 'to' Expr 'by' Expr ')' Stmt    (rule 37)
	Stmt -> 'for' '(' VIdent . '=' Expr 'down' 'to' Expr ')' Stmt    (rule 38)
	Stmt -> 'for' '(' VIdent . '=' Expr 'down' 'to' Expr 'by' Expr ')' Stmt    (rule 39)
	Stmt -> 'for' '(' VIdent . 'in' Expr ')' Stmt       (rule 40)

	'='            shift, and enter state 158
	'in'           shift, and enter state 159


State 158

	Stmt -> 'for' '(' VIdent '=' . Expr 'to' Expr ')' Stmt    (rule 36)
	Stmt -> 'for' '(' VIdent '=' . Expr 'to' Expr 'by' Expr ')' Stmt    (rule 37)
	Stmt -> 'for' '(' VIdent '=' . Expr 'down' 'to' Expr ')' Stmt    (rule 38)
	Stmt -> 'for' '(' VIdent '=' . Expr 'down' 'to' Expr 'by' Expr ')' Stmt    (rule 39)

	'!'            shift, and enter state 76
	'('            shift, and enter state 77
	'-'            shift, and enter state 78
	'\\'           shift, and enter state 80
	'false'        shift, and enter state 81
	'new'          shift, and enter state 83
	'null'         shift, and enter state 84
	'true'         shift, and enter state 86
	'~'            shift, and enter state 89
	L_integ        shift, and enter state 2
	L_VIdent       shift, and enter state 19

	Integer        goto state 62
	VIdent         goto state 63
	Expr7          goto state 67
	Expr6          goto state 68
	Expr5          goto state 69
	Expr4          goto state 70
	Expr3          goto state 71
	Expr2          goto state 72
	Expr1          goto state 73
	Expr           goto state 181
	UnaryOp        goto state 75

State 159

	Stmt -> 'for' '(' VIdent 'in' . Expr ')' Stmt       (rule 40)

	'!'            shift, and enter state 76
	'('            shift, and enter state 77
	'-'            shift, and enter state 78
	'\\'           shift, and enter state 80
	'false'        shift, and enter state 81
	'new'          shift, and enter state 83
	'null'         shift, and enter state 84
	'true'         shift, and enter state 86
	'~'            shift, and enter state 89
	L_integ        shift, and enter state 2
	L_VIdent       shift, and enter state 19

	Integer        goto state 62
	VIdent         goto state 63
	Expr7          goto state 67
	Expr6          goto state 68
	Expr5          goto state 69
	Expr4          goto state 70
	Expr3          goto state 71
	Expr2          goto state 72
	Expr1          goto state 73
	Expr           goto state 180
	UnaryOp        goto state 75

State 160

	Stmt -> 'while' '(' Expr ')' . Stmt                 (rule 35)

	'!'            shift, and enter state 76
	'('            shift, and enter state 77
	'-'            shift, and enter state 78
	';'            shift, and enter state 79
	'\\'           shift, and enter state 80
	'bool'         shift, and enter state 8
	'false'        shift, and enter state 81
	'if'           shift, and enter state 82
	'int'          shift, and enter state 10
	'new'          shift, and enter state 83
	'null'         shift, and enter state 84
	'return'       shift, and enter state 85
	'true'         shift, and enter state 86
	'void'         shift, and enter state 11
	'while'        shift, and enter state 87
	'{'            shift, and enter state 51
	'~'            shift, and enter state 89
	'for'          shift, and enter state 90
	L_integ        shift, and enter state 2
	L_CIdent       shift, and enter state 13
	L_VIdent       shift, and enter state 19

	Integer        goto state 62
	CIdent         goto state 3
	VIdent         goto state 63
	Block          goto state 64
	Stmt           goto state 179
	Type           goto state 66
	Expr7          goto state 67
	Expr6          goto state 68
	Expr5          goto state 69
	Expr4          goto state 70
	Expr3          goto state 71
	Expr2          goto state 72
	Expr1          goto state 73
	Expr           goto state 74
	UnaryOp        goto state 75

State 161

	Expr -> 'new' CIdent '(' ListExpr . ')'             (rule 76)

	')'            shift, and enter state 178


State 162

	Expr -> 'new' Type '[' Expr . ']'                   (rule 77)

	']'            shift, and enter state 177


State 163

	Stmt -> 'if' '(' Expr ')' . Stmt                    (rule 33)
	Stmt -> 'if' '(' Expr ')' . Stmt 'else' Stmt        (rule 34)

	'!'            shift, and enter state 76
	'('            shift, and enter state 77
	'-'            shift, and enter state 78
	';'            shift, and enter state 79
	'\\'           shift, and enter state 80
	'bool'         shift, and enter state 8
	'false'        shift, and enter state 81
	'if'           shift, and enter state 82
	'int'          shift, and enter state 10
	'new'          shift, and enter state 83
	'null'         shift, and enter state 84
	'return'       shift, and enter state 85
	'true'         shift, and enter state 86
	'void'         shift, and enter state 11
	'while'        shift, and enter state 87
	'{'            shift, and enter state 51
	'~'            shift, and enter state 89
	'for'          shift, and enter state 90
	L_integ        shift, and enter state 2
	L_CIdent       shift, and enter state 13
	L_VIdent       shift, and enter state 19

	Integer        goto state 62
	CIdent         goto state 3
	VIdent         goto state 63
	Block          goto state 64
	Stmt           goto state 176
	Type           goto state 66
	Expr7          goto state 67
	Expr6          goto state 68
	Expr5          goto state 69
	Expr4          goto state 70
	Expr3          goto state 71
	Expr2          goto state 72
	Expr1          goto state 73
	Expr           goto state 74
	UnaryOp        goto state 75

State 164

	LambdaExpr -> Block .                               (rule 85)

	')'            reduce using rule 85
	'++'           reduce using rule 85
	','            reduce using rule 85
	'--'           reduce using rule 85
	';'            reduce using rule 85
	'='            reduce using rule 85
	']'            reduce using rule 85
	'else'         reduce using rule 85
	'to'           reduce using rule 85
	'down'         reduce using rule 85
	'by'           reduce using rule 85
	'then'         reduce using rule 85


State 165

	LambdaExpr -> Expr .                                (rule 83)

	')'            reduce using rule 83
	'++'           reduce using rule 83
	','            reduce using rule 83
	'--'           reduce using rule 83
	';'            reduce using rule 83
	'='            reduce using rule 83
	']'            reduce using rule 83
	'else'         reduce using rule 83
	'to'           reduce using rule 83
	'down'         reduce using rule 83
	'by'           reduce using rule 83
	'then'         reduce using rule 83


State 166

	Expr -> '\\' ListArgument '->' LambdaExpr .         (rule 78)

	')'            reduce using rule 78
	'++'           reduce using rule 78
	','            reduce using rule 78
	'--'           reduce using rule 78
	';'            reduce using rule 78
	'='            reduce using rule 78
	']'            reduce using rule 78
	'else'         reduce using rule 78
	'to'           reduce using rule 78
	'down'         reduce using rule 78
	'by'           reduce using rule 78
	'then'         reduce using rule 78


State 167

	LambdaExpr -> 'if' . Expr 'then' LambdaExpr 'else' LambdaExpr    (rule 84)

	'!'            shift, and enter state 76
	'('            shift, and enter state 77
	'-'            shift, and enter state 78
	'\\'           shift, and enter state 80
	'false'        shift, and enter state 81
	'new'          shift, and enter state 83
	'null'         shift, and enter state 84
	'true'         shift, and enter state 86
	'~'            shift, and enter state 89
	L_integ        shift, and enter state 2
	L_VIdent       shift, and enter state 19

	Integer        goto state 62
	VIdent         goto state 63
	Expr7          goto state 67
	Expr6          goto state 68
	Expr5          goto state 69
	Expr4          goto state 70
	Expr3          goto state 71
	Expr2          goto state 72
	Expr1          goto state 73
	Expr           goto state 175
	UnaryOp        goto state 75

State 168

	Stmt -> Expr '=' Expr ';' .                         (rule 28)

	'!'            reduce using rule 28
	'('            reduce using rule 28
	'-'            reduce using rule 28
	';'            reduce using rule 28
	'\\'           reduce using rule 28
	'bool'         reduce using rule 28
	'else'         reduce using rule 28
	'false'        reduce using rule 28
	'if'           reduce using rule 28
	'int'          reduce using rule 28
	'new'          reduce using rule 28
	'null'         reduce using rule 28
	'return'       reduce using rule 28
	'true'         reduce using rule 28
	'void'         reduce using rule 28
	'while'        reduce using rule 28
	'{'            reduce using rule 28
	'}'            reduce using rule 28
	'~'            reduce using rule 28
	'for'          reduce using rule 28
	L_integ        reduce using rule 28
	L_CIdent       reduce using rule 28
	L_VIdent       reduce using rule 28


State 169

	Expr7 -> Expr7 '(' ListExpr ')' .                   (rule 62)

	'!='           reduce using rule 62
	'%'            reduce using rule 62
	'&'            reduce using rule 62
	'&&'           reduce using rule 62
	'('            reduce using rule 62
	')'            reduce using rule 62
	'*'            reduce using rule 62
	'+'            reduce using rule 62
	'++'           reduce using rule 62
	','            reduce using rule 62
	'-'            reduce using rule 62
	'--'           reduce using rule 62
	'.'            reduce using rule 62
	'/'            reduce using rule 62
	';'            reduce using rule 62
	'<'            reduce using rule 62
	'<<'           reduce using rule 62
	'<='           reduce using rule 62
	'='            reduce using rule 62
	'=='           reduce using rule 62
	'>'            reduce using rule 62
	'>='           reduce using rule 62
	'>>'           reduce using rule 62
	'['            reduce using rule 62
	']'            reduce using rule 62
	'^'            reduce using rule 62
	'else'         reduce using rule 62
	'|'            reduce using rule 62
	'||'           reduce using rule 62
	'to'           reduce using rule 62
	'down'         reduce using rule 62
	'by'           reduce using rule 62
	'then'         reduce using rule 62


State 170

	ListExpr -> Expr ',' . ListExpr                     (rule 82)

	'!'            shift, and enter state 76
	'('            shift, and enter state 77
	')'            reduce using rule 80
	'-'            shift, and enter state 78
	'\\'           shift, and enter state 80
	'false'        shift, and enter state 81
	'new'          shift, and enter state 83
	'null'         shift, and enter state 84
	'true'         shift, and enter state 86
	'~'            shift, and enter state 89
	L_integ        shift, and enter state 2
	L_VIdent       shift, and enter state 19

	Integer        goto state 62
	VIdent         goto state 63
	Expr7          goto state 67
	Expr6          goto state 68
	Expr5          goto state 69
	Expr4          goto state 70
	Expr3          goto state 71
	Expr2          goto state 72
	Expr1          goto state 73
	Expr           goto state 140
	ListExpr       goto state 174
	UnaryOp        goto state 75

State 171

	Expr7 -> Expr7 '[' Expr ']' .                       (rule 61)

	'!='           reduce using rule 61
	'%'            reduce using rule 61
	'&'            reduce using rule 61
	'&&'           reduce using rule 61
	'('            reduce using rule 61
	')'            reduce using rule 61
	'*'            reduce using rule 61
	'+'            reduce using rule 61
	'++'           reduce using rule 61
	','            reduce using rule 61
	'-'            reduce using rule 61
	'--'           reduce using rule 61
	'.'            reduce using rule 61
	'/'            reduce using rule 61
	';'            reduce using rule 61
	'<'            reduce using rule 61
	'<<'           reduce using rule 61
	'<='           reduce using rule 61
	'='            reduce using rule 61
	'=='           reduce using rule 61
	'>'            reduce using rule 61
	'>='           reduce using rule 61
	'>>'           reduce using rule 61
	'['            reduce using rule 61
	']'            reduce using rule 61
	'^'            reduce using rule 61
	'else'         reduce using rule 61
	'|'            reduce using rule 61
	'||'           reduce using rule 61
	'to'           reduce using rule 61
	'down'         reduce using rule 61
	'by'           reduce using rule 61
	'then'         reduce using rule 61


State 172

	Item -> VIdent '=' Expr .                           (rule 43)

	','            reduce using rule 43
	';'            reduce using rule 43


State 173

	ListItem -> Item ',' ListItem .                     (rule 45)

	';'            reduce using rule 45


State 174

	ListExpr -> Expr ',' ListExpr .                     (rule 82)

	')'            reduce using rule 82


State 175

	LambdaExpr -> 'if' Expr . 'then' LambdaExpr 'else' LambdaExpr    (rule 84)

	'then'         shift, and enter state 186


State 176

	Stmt -> 'if' '(' Expr ')' Stmt .                    (rule 33)
	Stmt -> 'if' '(' Expr ')' Stmt . 'else' Stmt        (rule 34)

	'!'            reduce using rule 33
	'('            reduce using rule 33
	'-'            reduce using rule 33
	';'            reduce using rule 33
	'\\'           reduce using rule 33
	'bool'         reduce using rule 33
	'else'         shift, and enter state 185
			(reduce using rule 33)

	'false'        reduce using rule 33
	'if'           reduce using rule 33
	'int'          reduce using rule 33
	'new'          reduce using rule 33
	'null'         reduce using rule 33
	'return'       reduce using rule 33
	'true'         reduce using rule 33
	'void'         reduce using rule 33
	'while'        reduce using rule 33
	'{'            reduce using rule 33
	'}'            reduce using rule 33
	'~'            reduce using rule 33
	'for'          reduce using rule 33
	L_integ        reduce using rule 33
	L_CIdent       reduce using rule 33
	L_VIdent       reduce using rule 33


State 177

	Expr -> 'new' Type '[' Expr ']' .                   (rule 77)

	')'            reduce using rule 77
	'++'           reduce using rule 77
	','            reduce using rule 77
	'--'           reduce using rule 77
	';'            reduce using rule 77
	'='            reduce using rule 77
	']'            reduce using rule 77
	'else'         reduce using rule 77
	'to'           reduce using rule 77
	'down'         reduce using rule 77
	'by'           reduce using rule 77
	'then'         reduce using rule 77


State 178

	Expr -> 'new' CIdent '(' ListExpr ')' .             (rule 76)

	')'            reduce using rule 76
	'++'           reduce using rule 76
	','            reduce using rule 76
	'--'           reduce using rule 76
	';'            reduce using rule 76
	'='            reduce using rule 76
	']'            reduce using rule 76
	'else'         reduce using rule 76
	'to'           reduce using rule 76
	'down'         reduce using rule 76
	'by'           reduce using rule 76
	'then'         reduce using rule 76


State 179

	Stmt -> 'while' '(' Expr ')' Stmt .                 (rule 35)

	'!'            reduce using rule 35
	'('            reduce using rule 35
	'-'            reduce using rule 35
	';'            reduce using rule 35
	'\\'           reduce using rule 35
	'bool'         reduce using rule 35
	'else'         reduce using rule 35
	'false'        reduce using rule 35
	'if'           reduce using rule 35
	'int'          reduce using rule 35
	'new'          reduce using rule 35
	'null'         reduce using rule 35
	'return'       reduce using rule 35
	'true'         reduce using rule 35
	'void'         reduce using rule 35
	'while'        reduce using rule 35
	'{'            reduce using rule 35
	'}'            reduce using rule 35
	'~'            reduce using rule 35
	'for'          reduce using rule 35
	L_integ        reduce using rule 35
	L_CIdent       reduce using rule 35
	L_VIdent       reduce using rule 35


State 180

	Stmt -> 'for' '(' VIdent 'in' Expr . ')' Stmt       (rule 40)

	')'            shift, and enter state 184


State 181

	Stmt -> 'for' '(' VIdent '=' Expr . 'to' Expr ')' Stmt    (rule 36)
	Stmt -> 'for' '(' VIdent '=' Expr . 'to' Expr 'by' Expr ')' Stmt    (rule 37)
	Stmt -> 'for' '(' VIdent '=' Expr . 'down' 'to' Expr ')' Stmt    (rule 38)
	Stmt -> 'for' '(' VIdent '=' Expr . 'down' 'to' Expr 'by' Expr ')' Stmt    (rule 39)

	'to'           shift, and enter state 182
	'down'         shift, and enter state 183


State 182

	Stmt -> 'for' '(' VIdent '=' Expr 'to' . Expr ')' Stmt    (rule 36)
	Stmt -> 'for' '(' VIdent '=' Expr 'to' . Expr 'by' Expr ')' Stmt    (rule 37)

	'!'            shift, and enter state 76
	'('            shift, and enter state 77
	'-'            shift, and enter state 78
	'\\'           shift, and enter state 80
	'false'        shift, and enter state 81
	'new'          shift, and enter state 83
	'null'         shift, and enter state 84
	'true'         shift, and enter state 86
	'~'            shift, and enter state 89
	L_integ        shift, and enter state 2
	L_VIdent       shift, and enter state 19

	Integer        goto state 62
	VIdent         goto state 63
	Expr7          goto state 67
	Expr6          goto state 68
	Expr5          goto state 69
	Expr4          goto state 70
	Expr3          goto state 71
	Expr2          goto state 72
	Expr1          goto state 73
	Expr           goto state 191
	UnaryOp        goto state 75

State 183

	Stmt -> 'for' '(' VIdent '=' Expr 'down' . 'to' Expr ')' Stmt    (rule 38)
	Stmt -> 'for' '(' VIdent '=' Expr 'down' . 'to' Expr 'by' Expr ')' Stmt    (rule 39)

	'to'           shift, and enter state 190


State 184

	Stmt -> 'for' '(' VIdent 'in' Expr ')' . Stmt       (rule 40)

	'!'            shift, and enter state 76
	'('            shift, and enter state 77
	'-'            shift, and enter state 78
	';'            shift, and enter state 79
	'\\'           shift, and enter state 80
	'bool'         shift, and enter state 8
	'false'        shift, and enter state 81
	'if'           shift, and enter state 82
	'int'          shift, and enter state 10
	'new'          shift, and enter state 83
	'null'         shift, and enter state 84
	'return'       shift, and enter state 85
	'true'         shift, and enter state 86
	'void'         shift, and enter state 11
	'while'        shift, and enter state 87
	'{'            shift, and enter state 51
	'~'            shift, and enter state 89
	'for'          shift, and enter state 90
	L_integ        shift, and enter state 2
	L_CIdent       shift, and enter state 13
	L_VIdent       shift, and enter state 19

	Integer        goto state 62
	CIdent         goto state 3
	VIdent         goto state 63
	Block          goto state 64
	Stmt           goto state 189
	Type           goto state 66
	Expr7          goto state 67
	Expr6          goto state 68
	Expr5          goto state 69
	Expr4          goto state 70
	Expr3          goto state 71
	Expr2          goto state 72
	Expr1          goto state 73
	Expr           goto state 74
	UnaryOp        goto state 75

State 185

	Stmt -> 'if' '(' Expr ')' Stmt 'else' . Stmt        (rule 34)

	'!'            shift, and enter state 76
	'('            shift, and enter state 77
	'-'            shift, and enter state 78
	';'            shift, and enter state 79
	'\\'           shift, and enter state 80
	'bool'         shift, and enter state 8
	'false'        shift, and enter state 81
	'if'           shift, and enter state 82
	'int'          shift, and enter state 10
	'new'          shift, and enter state 83
	'null'         shift, and enter state 84
	'return'       shift, and enter state 85
	'true'         shift, and enter state 86
	'void'         shift, and enter state 11
	'while'        shift, and enter state 87
	'{'            shift, and enter state 51
	'~'            shift, and enter state 89
	'for'          shift, and enter state 90
	L_integ        shift, and enter state 2
	L_CIdent       shift, and enter state 13
	L_VIdent       shift, and enter state 19

	Integer        goto state 62
	CIdent         goto state 3
	VIdent         goto state 63
	Block          goto state 64
	Stmt           goto state 188
	Type           goto state 66
	Expr7          goto state 67
	Expr6          goto state 68
	Expr5          goto state 69
	Expr4          goto state 70
	Expr3          goto state 71
	Expr2          goto state 72
	Expr1          goto state 73
	Expr           goto state 74
	UnaryOp        goto state 75

State 186

	LambdaExpr -> 'if' Expr 'then' . LambdaExpr 'else' LambdaExpr    (rule 84)

	'!'            shift, and enter state 76
	'('            shift, and enter state 77
	'-'            shift, and enter state 78
	'\\'           shift, and enter state 80
	'false'        shift, and enter state 81
	'if'           shift, and enter state 167
	'new'          shift, and enter state 83
	'null'         shift, and enter state 84
	'true'         shift, and enter state 86
	'{'            shift, and enter state 51
	'~'            shift, and enter state 89
	L_integ        shift, and enter state 2
	L_VIdent       shift, and enter state 19

	Integer        goto state 62
	VIdent         goto state 63
	Block          goto state 164
	Expr7          goto state 67
	Expr6          goto state 68
	Expr5          goto state 69
	Expr4          goto state 70
	Expr3          goto state 71
	Expr2          goto state 72
	Expr1          goto state 73
	Expr           goto state 165
	LambdaExpr     goto state 187
	UnaryOp        goto state 75

State 187

	LambdaExpr -> 'if' Expr 'then' LambdaExpr . 'else' LambdaExpr    (rule 84)

	'else'         shift, and enter state 195


State 188

	Stmt -> 'if' '(' Expr ')' Stmt 'else' Stmt .        (rule 34)

	'!'            reduce using rule 34
	'('            reduce using rule 34
	'-'            reduce using rule 34
	';'            reduce using rule 34
	'\\'           reduce using rule 34
	'bool'         reduce using rule 34
	'else'         reduce using rule 34
	'false'        reduce using rule 34
	'if'           reduce using rule 34
	'int'          reduce using rule 34
	'new'          reduce using rule 34
	'null'         reduce using rule 34
	'return'       reduce using rule 34
	'true'         reduce using rule 34
	'void'         reduce using rule 34
	'while'        reduce using rule 34
	'{'            reduce using rule 34
	'}'            reduce using rule 34
	'~'            reduce using rule 34
	'for'          reduce using rule 34
	L_integ        reduce using rule 34
	L_CIdent       reduce using rule 34
	L_VIdent       reduce using rule 34


State 189

	Stmt -> 'for' '(' VIdent 'in' Expr ')' Stmt .       (rule 40)

	'!'            reduce using rule 40
	'('            reduce using rule 40
	'-'            reduce using rule 40
	';'            reduce using rule 40
	'\\'           reduce using rule 40
	'bool'         reduce using rule 40
	'else'         reduce using rule 40
	'false'        reduce using rule 40
	'if'           reduce using rule 40
	'int'          reduce using rule 40
	'new'          reduce using rule 40
	'null'         reduce using rule 40
	'return'       reduce using rule 40
	'true'         reduce using rule 40
	'void'         reduce using rule 40
	'while'        reduce using rule 40
	'{'            reduce using rule 40
	'}'            reduce using rule 40
	'~'            reduce using rule 40
	'for'          reduce using rule 40
	L_integ        reduce using rule 40
	L_CIdent       reduce using rule 40
	L_VIdent       reduce using rule 40


State 190

	Stmt -> 'for' '(' VIdent '=' Expr 'down' 'to' . Expr ')' Stmt    (rule 38)
	Stmt -> 'for' '(' VIdent '=' Expr 'down' 'to' . Expr 'by' Expr ')' Stmt    (rule 39)

	'!'            shift, and enter state 76
	'('            shift, and enter state 77
	'-'            shift, and enter state 78
	'\\'           shift, and enter state 80
	'false'        shift, and enter state 81
	'new'          shift, and enter state 83
	'null'         shift, and enter state 84
	'true'         shift, and enter state 86
	'~'            shift, and enter state 89
	L_integ        shift, and enter state 2
	L_VIdent       shift, and enter state 19

	Integer        goto state 62
	VIdent         goto state 63
	Expr7          goto state 67
	Expr6          goto state 68
	Expr5          goto state 69
	Expr4          goto state 70
	Expr3          goto state 71
	Expr2          goto state 72
	Expr1          goto state 73
	Expr           goto state 194
	UnaryOp        goto state 75

State 191

	Stmt -> 'for' '(' VIdent '=' Expr 'to' Expr . ')' Stmt    (rule 36)
	Stmt -> 'for' '(' VIdent '=' Expr 'to' Expr . 'by' Expr ')' Stmt    (rule 37)

	')'            shift, and enter state 192
	'by'           shift, and enter state 193


State 192

	Stmt -> 'for' '(' VIdent '=' Expr 'to' Expr ')' . Stmt    (rule 36)

	'!'            shift, and enter state 76
	'('            shift, and enter state 77
	'-'            shift, and enter state 78
	';'            shift, and enter state 79
	'\\'           shift, and enter state 80
	'bool'         shift, and enter state 8
	'false'        shift, and enter state 81
	'if'           shift, and enter state 82
	'int'          shift, and enter state 10
	'new'          shift, and enter state 83
	'null'         shift, and enter state 84
	'return'       shift, and enter state 85
	'true'         shift, and enter state 86
	'void'         shift, and enter state 11
	'while'        shift, and enter state 87
	'{'            shift, and enter state 51
	'~'            shift, and enter state 89
	'for'          shift, and enter state 90
	L_integ        shift, and enter state 2
	L_CIdent       shift, and enter state 13
	L_VIdent       shift, and enter state 19

	Integer        goto state 62
	CIdent         goto state 3
	VIdent         goto state 63
	Block          goto state 64
	Stmt           goto state 200
	Type           goto state 66
	Expr7          goto state 67
	Expr6          goto state 68
	Expr5          goto state 69
	Expr4          goto state 70
	Expr3          goto state 71
	Expr2          goto state 72
	Expr1          goto state 73
	Expr           goto state 74
	UnaryOp        goto state 75

State 193

	Stmt -> 'for' '(' VIdent '=' Expr 'to' Expr 'by' . Expr ')' Stmt    (rule 37)

	'!'            shift, and enter state 76
	'('            shift, and enter state 77
	'-'            shift, and enter state 78
	'\\'           shift, and enter state 80
	'false'        shift, and enter state 81
	'new'          shift, and enter state 83
	'null'         shift, and enter state 84
	'true'         shift, and enter state 86
	'~'            shift, and enter state 89
	L_integ        shift, and enter state 2
	L_VIdent       shift, and enter state 19

	Integer        goto state 62
	VIdent         goto state 63
	Expr7          goto state 67
	Expr6          goto state 68
	Expr5          goto state 69
	Expr4          goto state 70
	Expr3          goto state 71
	Expr2          goto state 72
	Expr1          goto state 73
	Expr           goto state 199
	UnaryOp        goto state 75

State 194

	Stmt -> 'for' '(' VIdent '=' Expr 'down' 'to' Expr . ')' Stmt    (rule 38)
	Stmt -> 'for' '(' VIdent '=' Expr 'down' 'to' Expr . 'by' Expr ')' Stmt    (rule 39)

	')'            shift, and enter state 197
	'by'           shift, and enter state 198


State 195

	LambdaExpr -> 'if' Expr 'then' LambdaExpr 'else' . LambdaExpr    (rule 84)

	'!'            shift, and enter state 76
	'('            shift, and enter state 77
	'-'            shift, and enter state 78
	'\\'           shift, and enter state 80
	'false'        shift, and enter state 81
	'if'           shift, and enter state 167
	'new'          shift, and enter state 83
	'null'         shift, and enter state 84
	'true'         shift, and enter state 86
	'{'            shift, and enter state 51
	'~'            shift, and enter state 89
	L_integ        shift, and enter state 2
	L_VIdent       shift, and enter state 19

	Integer        goto state 62
	VIdent         goto state 63
	Block          goto state 164
	Expr7          goto state 67
	Expr6          goto state 68
	Expr5          goto state 69
	Expr4          goto state 70
	Expr3          goto state 71
	Expr2          goto state 72
	Expr1          goto state 73
	Expr           goto state 165
	LambdaExpr     goto state 196
	UnaryOp        goto state 75

State 196

	LambdaExpr -> 'if' Expr 'then' LambdaExpr 'else' LambdaExpr .    (rule 84)

	')'            reduce using rule 84
	'++'           reduce using rule 84
	','            reduce using rule 84
	'--'           reduce using rule 84
	';'            reduce using rule 84
	'='            reduce using rule 84
	']'            reduce using rule 84
	'else'         reduce using rule 84
	'to'           reduce using rule 84
	'down'         reduce using rule 84
	'by'           reduce using rule 84
	'then'         reduce using rule 84


State 197

	Stmt -> 'for' '(' VIdent '=' Expr 'down' 'to' Expr ')' . Stmt    (rule 38)

	'!'            shift, and enter state 76
	'('            shift, and enter state 77
	'-'            shift, and enter state 78
	';'            shift, and enter state 79
	'\\'           shift, and enter state 80
	'bool'         shift, and enter state 8
	'false'        shift, and enter state 81
	'if'           shift, and enter state 82
	'int'          shift, and enter state 10
	'new'          shift, and enter state 83
	'null'         shift, and enter state 84
	'return'       shift, and enter state 85
	'true'         shift, and enter state 86
	'void'         shift, and enter state 11
	'while'        shift, and enter state 87
	'{'            shift, and enter state 51
	'~'            shift, and enter state 89
	'for'          shift, and enter state 90
	L_integ        shift, and enter state 2
	L_CIdent       shift, and enter state 13
	L_VIdent       shift, and enter state 19

	Integer        goto state 62
	CIdent         goto state 3
	VIdent         goto state 63
	Block          goto state 64
	Stmt           goto state 203
	Type           goto state 66
	Expr7          goto state 67
	Expr6          goto state 68
	Expr5          goto state 69
	Expr4          goto state 70
	Expr3          goto state 71
	Expr2          goto state 72
	Expr1          goto state 73
	Expr           goto state 74
	UnaryOp        goto state 75

State 198

	Stmt -> 'for' '(' VIdent '=' Expr 'down' 'to' Expr 'by' . Expr ')' Stmt    (rule 39)

	'!'            shift, and enter state 76
	'('            shift, and enter state 77
	'-'            shift, and enter state 78
	'\\'           shift, and enter state 80
	'false'        shift, and enter state 81
	'new'          shift, and enter state 83
	'null'         shift, and enter state 84
	'true'         shift, and enter state 86
	'~'            shift, and enter state 89
	L_integ        shift, and enter state 2
	L_VIdent       shift, and enter state 19

	Integer        goto state 62
	VIdent         goto state 63
	Expr7          goto state 67
	Expr6          goto state 68
	Expr5          goto state 69
	Expr4          goto state 70
	Expr3          goto state 71
	Expr2          goto state 72
	Expr1          goto state 73
	Expr           goto state 202
	UnaryOp        goto state 75

State 199

	Stmt -> 'for' '(' VIdent '=' Expr 'to' Expr 'by' Expr . ')' Stmt    (rule 37)

	')'            shift, and enter state 201


State 200

	Stmt -> 'for' '(' VIdent '=' Expr 'to' Expr ')' Stmt .    (rule 36)

	'!'            reduce using rule 36
	'('            reduce using rule 36
	'-'            reduce using rule 36
	';'            reduce using rule 36
	'\\'           reduce using rule 36
	'bool'         reduce using rule 36
	'else'         reduce using rule 36
	'false'        reduce using rule 36
	'if'           reduce using rule 36
	'int'          reduce using rule 36
	'new'          reduce using rule 36
	'null'         reduce using rule 36
	'return'       reduce using rule 36
	'true'         reduce using rule 36
	'void'         reduce using rule 36
	'while'        reduce using rule 36
	'{'            reduce using rule 36
	'}'            reduce using rule 36
	'~'            reduce using rule 36
	'for'          reduce using rule 36
	L_integ        reduce using rule 36
	L_CIdent       reduce using rule 36
	L_VIdent       reduce using rule 36


State 201

	Stmt -> 'for' '(' VIdent '=' Expr 'to' Expr 'by' Expr ')' . Stmt    (rule 37)

	'!'            shift, and enter state 76
	'('            shift, and enter state 77
	'-'            shift, and enter state 78
	';'            shift, and enter state 79
	'\\'           shift, and enter state 80
	'bool'         shift, and enter state 8
	'false'        shift, and enter state 81
	'if'           shift, and enter state 82
	'int'          shift, and enter state 10
	'new'          shift, and enter state 83
	'null'         shift, and enter state 84
	'return'       shift, and enter state 85
	'true'         shift, and enter state 86
	'void'         shift, and enter state 11
	'while'        shift, and enter state 87
	'{'            shift, and enter state 51
	'~'            shift, and enter state 89
	'for'          shift, and enter state 90
	L_integ        shift, and enter state 2
	L_CIdent       shift, and enter state 13
	L_VIdent       shift, and enter state 19

	Integer        goto state 62
	CIdent         goto state 3
	VIdent         goto state 63
	Block          goto state 64
	Stmt           goto state 205
	Type           goto state 66
	Expr7          goto state 67
	Expr6          goto state 68
	Expr5          goto state 69
	Expr4          goto state 70
	Expr3          goto state 71
	Expr2          goto state 72
	Expr1          goto state 73
	Expr           goto state 74
	UnaryOp        goto state 75

State 202

	Stmt -> 'for' '(' VIdent '=' Expr 'down' 'to' Expr 'by' Expr . ')' Stmt    (rule 39)

	')'            shift, and enter state 204


State 203

	Stmt -> 'for' '(' VIdent '=' Expr 'down' 'to' Expr ')' Stmt .    (rule 38)

	'!'            reduce using rule 38
	'('            reduce using rule 38
	'-'            reduce using rule 38
	';'            reduce using rule 38
	'\\'           reduce using rule 38
	'bool'         reduce using rule 38
	'else'         reduce using rule 38
	'false'        reduce using rule 38
	'if'           reduce using rule 38
	'int'          reduce using rule 38
	'new'          reduce using rule 38
	'null'         reduce using rule 38
	'return'       reduce using rule 38
	'true'         reduce using rule 38
	'void'         reduce using rule 38
	'while'        reduce using rule 38
	'{'            reduce using rule 38
	'}'            reduce using rule 38
	'~'            reduce using rule 38
	'for'          reduce using rule 38
	L_integ        reduce using rule 38
	L_CIdent       reduce using rule 38
	L_VIdent       reduce using rule 38


State 204

	Stmt -> 'for' '(' VIdent '=' Expr 'down' 'to' Expr 'by' Expr ')' . Stmt    (rule 39)

	'!'            shift, and enter state 76
	'('            shift, and enter state 77
	'-'            shift, and enter state 78
	';'            shift, and enter state 79
	'\\'           shift, and enter state 80
	'bool'         shift, and enter state 8
	'false'        shift, and enter state 81
	'if'           shift, and enter state 82
	'int'          shift, and enter state 10
	'new'          shift, and enter state 83
	'null'         shift, and enter state 84
	'return'       shift, and enter state 85
	'true'         shift, and enter state 86
	'void'         shift, and enter state 11
	'while'        shift, and enter state 87
	'{'            shift, and enter state 51
	'~'            shift, and enter state 89
	'for'          shift, and enter state 90
	L_integ        shift, and enter state 2
	L_CIdent       shift, and enter state 13
	L_VIdent       shift, and enter state 19

	Integer        goto state 62
	CIdent         goto state 3
	VIdent         goto state 63
	Block          goto state 64
	Stmt           goto state 206
	Type           goto state 66
	Expr7          goto state 67
	Expr6          goto state 68
	Expr5          goto state 69
	Expr4          goto state 70
	Expr3          goto state 71
	Expr2          goto state 72
	Expr1          goto state 73
	Expr           goto state 74
	UnaryOp        goto state 75

State 205

	Stmt -> 'for' '(' VIdent '=' Expr 'to' Expr 'by' Expr ')' Stmt .    (rule 37)

	'!'            reduce using rule 37
	'('            reduce using rule 37
	'-'            reduce using rule 37
	';'            reduce using rule 37
	'\\'           reduce using rule 37
	'bool'         reduce using rule 37
	'else'         reduce using rule 37
	'false'        reduce using rule 37
	'if'           reduce using rule 37
	'int'          reduce using rule 37
	'new'          reduce using rule 37
	'null'         reduce using rule 37
	'return'       reduce using rule 37
	'true'         reduce using rule 37
	'void'         reduce using rule 37
	'while'        reduce using rule 37
	'{'            reduce using rule 37
	'}'            reduce using rule 37
	'~'            reduce using rule 37
	'for'          reduce using rule 37
	L_integ        reduce using rule 37
	L_CIdent       reduce using rule 37
	L_VIdent       reduce using rule 37


State 206

	Stmt -> 'for' '(' VIdent '=' Expr 'down' 'to' Expr 'by' Expr ')' Stmt .    (rule 39)

	'!'            reduce using rule 39
	'('            reduce using rule 39
	'-'            reduce using rule 39
	';'            reduce using rule 39
	'\\'           reduce using rule 39
	'bool'         reduce using rule 39
	'else'         reduce using rule 39
	'false'        reduce using rule 39
	'if'           reduce using rule 39
	'int'          reduce using rule 39
	'new'          reduce using rule 39
	'null'         reduce using rule 39
	'return'       reduce using rule 39
	'true'         reduce using rule 39
	'void'         reduce using rule 39
	'while'        reduce using rule 39
	'{'            reduce using rule 39
	'}'            reduce using rule 39
	'~'            reduce using rule 39
	'for'          reduce using rule 39
	L_integ        reduce using rule 39
	L_CIdent       reduce using rule 39
	L_VIdent       reduce using rule 39


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 105
Number of terminals: 59
Number of non-terminals: 33
Number of states: 207

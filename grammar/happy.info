-----------------------------------------------------------------------------
Info file generated by Happy Version 1.19.8 from grammar/ParSPL.y
-----------------------------------------------------------------------------

state 101 contains 1 shift/reduce conflicts.
state 182 contains 1 shift/reduce conflicts.

terminal 'real' is unused

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_pProgram -> Program                         (0)
	Integer -> L_integ                                 (1)
	String -> L_String                                 (2)
	Char -> L_Char                                     (3)
	CIdent -> L_CIdent                                 (4)
	VIdent -> L_VIdent                                 (5)
	Program -> ListTopDef                              (6)
	TopDef -> Type VIdent '(' ListArgument ')' Block   (7)
	TopDef -> 'typedef' CIdent '=' Type ';'            (8)
	TopDef -> 'class' CIdent '{' ListClassElem '}'     (9)
	TopDef -> 'class' CIdent 'extends' CIdent '{' ListClassElem '}'   (10)
	ListTopDef -> TopDef                               (11)
	ListTopDef -> TopDef ListTopDef                    (12)
	Argument -> Type VIdent                            (13)
	ListArgument ->                                    (14)
	ListArgument -> Argument                           (15)
	ListArgument -> Argument ',' ListArgument          (16)
	ClassElem -> Type ListVIdent ';'                   (17)
	ClassElem -> 'constr' '(' ListArgument ')' Block   (18)
	ClassElem -> Type VIdent '(' ListArgument ')' Block   (19)
	ListVIdent -> VIdent                               (20)
	ListVIdent -> VIdent ',' ListVIdent                (21)
	ListClassElem ->                                   (22)
	ListClassElem -> ListClassElem ClassElem           (23)
	Block -> '{' ListStmt '}'                          (24)
	ListStmt ->                                        (25)
	ListStmt -> ListStmt Stmt                          (26)
	Stmt -> ';'                                        (27)
	Stmt -> Block                                      (28)
	Stmt -> Type ListItem ';'                          (29)
	Stmt -> Expr '=' Expr ';'                          (30)
	Stmt -> Expr '++' ';'                              (31)
	Stmt -> Expr '--' ';'                              (32)
	Stmt -> 'return' Expr ';'                          (33)
	Stmt -> 'return' ';'                               (34)
	Stmt -> 'if' '(' Expr ')' Stmt                     (35)
	Stmt -> 'if' '(' Expr ')' Stmt 'else' Stmt         (36)
	Stmt -> 'while' '(' Expr ')' Stmt                  (37)
	Stmt -> 'for' '(' VIdent '=' Expr 'to' Expr ')' Stmt   (38)
	Stmt -> 'for' '(' VIdent '=' Expr 'to' Expr 'by' Expr ')' Stmt   (39)
	Stmt -> 'for' '(' VIdent '=' Expr 'down' 'to' Expr ')' Stmt   (40)
	Stmt -> 'for' '(' VIdent '=' Expr 'down' 'to' Expr 'by' Expr ')' Stmt   (41)
	Stmt -> 'for' '(' VIdent 'in' Expr ')' Stmt        (42)
	Stmt -> Expr ';'                                   (43)
	Item -> VIdent                                     (44)
	Item -> VIdent '=' Expr                            (45)
	ListItem -> Item                                   (46)
	ListItem -> Item ',' ListItem                      (47)
	Type -> 'int'                                      (48)
	Type -> 'char'                                     (49)
	Type -> 'string'                                   (50)
	Type -> 'bool'                                     (51)
	Type -> 'void'                                     (52)
	Type -> CIdent                                     (53)
	Type -> Type '[]'                                  (54)
	Type -> Type '(' ListType ')'                      (55)
	ListType ->                                        (56)
	ListType -> Type                                   (57)
	ListType -> Type ',' ListType                      (58)
	Expr7 -> 'null'                                    (59)
	Expr7 -> 'true'                                    (60)
	Expr7 -> 'false'                                   (61)
	Expr7 -> VIdent                                    (62)
	Expr7 -> String                                    (63)
	Expr7 -> Integer                                   (64)
	Expr7 -> Char                                      (65)
	Expr7 -> Expr7 '.' VIdent                          (66)
	Expr7 -> Expr7 '[' Expr ']'                        (67)
	Expr7 -> Expr7 '(' ListExpr ')'                    (68)
	Expr7 -> '(' Expr ')'                              (69)
	Expr6 -> UnaryOp Expr6                             (70)
	Expr6 -> Expr7                                     (71)
	Expr5 -> Expr5 MulOp Expr6                         (72)
	Expr5 -> Expr6                                     (73)
	Expr4 -> Expr4 AddOp Expr5                         (74)
	Expr4 -> Expr5                                     (75)
	Expr3 -> Expr3 RelOp Expr4                         (76)
	Expr3 -> Expr4                                     (77)
	Expr2 -> Expr3 '&&' Expr2                          (78)
	Expr2 -> Expr3                                     (79)
	Expr1 -> Expr2 '||' Expr1                          (80)
	Expr1 -> Expr2                                     (81)
	Expr -> 'new' CIdent '(' ListExpr ')'              (82)
	Expr -> 'new' Type '[' Expr ']'                    (83)
	Expr -> '\\' ListArgument '->' LambdaExpr          (84)
	Expr -> Expr1                                      (85)
	ListExpr ->                                        (86)
	ListExpr -> Expr                                   (87)
	ListExpr -> Expr ',' ListExpr                      (88)
	LambdaExpr -> Expr                                 (89)
	LambdaExpr -> 'if' Expr 'then' LambdaExpr 'else' LambdaExpr   (90)
	LambdaExpr -> Block                                (91)
	UnaryOp -> '-'                                     (92)
	UnaryOp -> '!'                                     (93)
	UnaryOp -> '~'                                     (94)
	AddOp -> '+'                                       (95)
	AddOp -> '-'                                       (96)
	MulOp -> '*'                                       (97)
	MulOp -> '/'                                       (98)
	MulOp -> '%'                                       (99)
	MulOp -> '<<'                                      (100)
	MulOp -> '>>'                                      (101)
	MulOp -> '&'                                       (102)
	MulOp -> '|'                                       (103)
	MulOp -> '^'                                       (104)
	RelOp -> '<'                                       (105)
	RelOp -> '<='                                      (106)
	RelOp -> '>'                                       (107)
	RelOp -> '>='                                      (108)
	RelOp -> '=='                                      (109)
	RelOp -> '!='                                      (110)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'!'            { PT _ (T_Keyword _ 1) }
	'!='           { PT _ (T_Keyword _ 2) }
	'%'            { PT _ (T_Keyword _ 3) }
	'&'            { PT _ (T_Keyword _ 4) }
	'&&'           { PT _ (T_Keyword _ 5) }
	'('            { PT _ (T_Keyword _ 6) }
	')'            { PT _ (T_Keyword _ 7) }
	'*'            { PT _ (T_Keyword _ 8) }
	'+'            { PT _ (T_Keyword _ 9) }
	'++'           { PT _ (T_Keyword _ 10) }
	','            { PT _ (T_Keyword _ 11) }
	'-'            { PT _ (T_Keyword _ 12) }
	'--'           { PT _ (T_Keyword _ 13) }
	'->'           { PT _ (T_Keyword _ 14) }
	'.'            { PT _ (T_Keyword _ 15) }
	'/'            { PT _ (T_Keyword _ 16) }
	';'            { PT _ (T_Keyword _ 17) }
	'<'            { PT _ (T_Keyword _ 18) }
	'<<'           { PT _ (T_Keyword _ 19) }
	'<='           { PT _ (T_Keyword _ 20) }
	'='            { PT _ (T_Keyword _ 21) }
	'=='           { PT _ (T_Keyword _ 22) }
	'>'            { PT _ (T_Keyword _ 23) }
	'>='           { PT _ (T_Keyword _ 24) }
	'>>'           { PT _ (T_Keyword _ 25) }
	'['            { PT _ (T_Keyword _ 26) }
	'[]'           { PT _ (T_Keyword _ 27) }
	'\\'           { PT _ (T_Keyword _ 28) }
	']'            { PT _ (T_Keyword _ 29) }
	'^'            { PT _ (T_Keyword _ 30) }
	'bool'         { PT _ (T_Keyword _ 31) }
	'class'        { PT _ (T_Keyword _ 32) }
	'else'         { PT _ (T_Keyword _ 33) }
	'false'        { PT _ (T_Keyword _ 34) }
	'if'           { PT _ (T_Keyword _ 35) }
	'int'          { PT _ (T_Keyword _ 36) }
	'new'          { PT _ (T_Keyword _ 37) }
	'null'         { PT _ (T_Keyword _ 38) }
	'return'       { PT _ (T_Keyword _ 39) }
	'true'         { PT _ (T_Keyword _ 40) }
	'void'         { PT _ (T_Keyword _ 41) }
	'while'        { PT _ (T_Keyword _ 42) }
	'{'            { PT _ (T_Keyword _ 43) }
	'|'            { PT _ (T_Keyword _ 44) }
	'||'           { PT _ (T_Keyword _ 45) }
	'}'            { PT _ (T_Keyword _ 46) }
	'~'            { PT _ (T_Keyword _ 47) }
	'for'          { PT _ (T_Keyword _ 48) }
	'to'           { PT _ (T_Keyword _ 49) }
	'down'         { PT _ (T_Keyword _ 50) }
	'in'           { PT _ (T_Keyword _ 51) }
	'by'           { PT _ (T_Keyword _ 52) }
	'extends'      { PT _ (T_Keyword _ 53) }
	'constr'       { PT _ (T_Keyword _ 54) }
	'then'         { PT _ (T_Keyword _ 55) }
	'typedef'      { PT _ (T_Keyword _ 56) }
	'char'         { PT _ (T_Keyword _ 57) }
	'string'       { PT _ (T_Keyword _ 58) }
	'real'         { PT _ (T_Keyword _ 59) }
	L_integ        { PT _ (T_Int _) }
	L_CIdent       { PT _ (T_CIdent _) }
	L_VIdent       { PT _ (T_VIdent _) }
	L_String       { PT _ (T_String _) }
	L_Char         { PT _ (T_Char _) }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_pProgram rule  0
	Integer         rule  1
	String          rule  2
	Char            rule  3
	CIdent          rule  4
	VIdent          rule  5
	Program         rule  6
	TopDef          rules 7, 8, 9, 10
	ListTopDef      rules 11, 12
	Argument        rule  13
	ListArgument    rules 14, 15, 16
	ClassElem       rules 17, 18, 19
	ListVIdent      rules 20, 21
	ListClassElem   rules 22, 23
	Block           rule  24
	ListStmt        rules 25, 26
	Stmt            rules 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43
	Item            rules 44, 45
	ListItem        rules 46, 47
	Type            rules 48, 49, 50, 51, 52, 53, 54, 55
	ListType        rules 56, 57, 58
	Expr7           rules 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69
	Expr6           rules 70, 71
	Expr5           rules 72, 73
	Expr4           rules 74, 75
	Expr3           rules 76, 77
	Expr2           rules 78, 79
	Expr1           rules 80, 81
	Expr            rules 82, 83, 84, 85
	ListExpr        rules 86, 87, 88
	LambdaExpr      rules 89, 90, 91
	UnaryOp         rules 92, 93, 94
	AddOp           rules 95, 96
	MulOp           rules 97, 98, 99, 100, 101, 102, 103, 104
	RelOp           rules 105, 106, 107, 108, 109, 110

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	'bool'         shift, and enter state 8
	'class'        shift, and enter state 9
	'int'          shift, and enter state 10
	'void'         shift, and enter state 11
	'typedef'      shift, and enter state 12
	'char'         shift, and enter state 13
	'string'       shift, and enter state 14
	L_CIdent       shift, and enter state 15

	CIdent         goto state 3
	Program        goto state 4
	TopDef         goto state 5
	ListTopDef     goto state 6
	Type           goto state 7

State 1


	L_integ        shift, and enter state 2


State 2

	Integer -> L_integ .                                (rule 1)

	'!='           reduce using rule 1
	'%'            reduce using rule 1
	'&'            reduce using rule 1
	'&&'           reduce using rule 1
	'('            reduce using rule 1
	')'            reduce using rule 1
	'*'            reduce using rule 1
	'+'            reduce using rule 1
	'++'           reduce using rule 1
	','            reduce using rule 1
	'-'            reduce using rule 1
	'--'           reduce using rule 1
	'.'            reduce using rule 1
	'/'            reduce using rule 1
	';'            reduce using rule 1
	'<'            reduce using rule 1
	'<<'           reduce using rule 1
	'<='           reduce using rule 1
	'='            reduce using rule 1
	'=='           reduce using rule 1
	'>'            reduce using rule 1
	'>='           reduce using rule 1
	'>>'           reduce using rule 1
	'['            reduce using rule 1
	']'            reduce using rule 1
	'^'            reduce using rule 1
	'else'         reduce using rule 1
	'|'            reduce using rule 1
	'||'           reduce using rule 1
	'to'           reduce using rule 1
	'down'         reduce using rule 1
	'by'           reduce using rule 1
	'then'         reduce using rule 1


State 3

	Type -> CIdent .                                    (rule 53)

	'('            reduce using rule 53
	')'            reduce using rule 53
	','            reduce using rule 53
	';'            reduce using rule 53
	'[]'           reduce using rule 53
	L_VIdent       reduce using rule 53


State 4

	%start_pProgram -> Program .                        (rule 0)

	%eof           accept


State 5

	ListTopDef -> TopDef .                              (rule 11)
	ListTopDef -> TopDef . ListTopDef                   (rule 12)

	'bool'         shift, and enter state 8
	'class'        shift, and enter state 9
	'int'          shift, and enter state 10
	'void'         shift, and enter state 11
	'typedef'      shift, and enter state 12
	'char'         shift, and enter state 13
	'string'       shift, and enter state 14
	L_CIdent       shift, and enter state 15
	%eof           reduce using rule 11

	CIdent         goto state 3
	TopDef         goto state 5
	ListTopDef     goto state 22
	Type           goto state 7

State 6

	Program -> ListTopDef .                             (rule 6)

	%eof           reduce using rule 6


State 7

	TopDef -> Type . VIdent '(' ListArgument ')' Block    (rule 7)
	Type -> Type . '[]'                                 (rule 54)
	Type -> Type . '(' ListType ')'                     (rule 55)

	'('            shift, and enter state 19
	'[]'           shift, and enter state 20
	L_VIdent       shift, and enter state 21

	VIdent         goto state 18

State 8

	Type -> 'bool' .                                    (rule 51)

	'('            reduce using rule 51
	')'            reduce using rule 51
	','            reduce using rule 51
	';'            reduce using rule 51
	'['            reduce using rule 51
	'[]'           reduce using rule 51
	L_VIdent       reduce using rule 51


State 9

	TopDef -> 'class' . CIdent '{' ListClassElem '}'    (rule 9)
	TopDef -> 'class' . CIdent 'extends' CIdent '{' ListClassElem '}'    (rule 10)

	L_CIdent       shift, and enter state 15

	CIdent         goto state 17

State 10

	Type -> 'int' .                                     (rule 48)

	'('            reduce using rule 48
	')'            reduce using rule 48
	','            reduce using rule 48
	';'            reduce using rule 48
	'['            reduce using rule 48
	'[]'           reduce using rule 48
	L_VIdent       reduce using rule 48


State 11

	Type -> 'void' .                                    (rule 52)

	'('            reduce using rule 52
	')'            reduce using rule 52
	','            reduce using rule 52
	';'            reduce using rule 52
	'['            reduce using rule 52
	'[]'           reduce using rule 52
	L_VIdent       reduce using rule 52


State 12

	TopDef -> 'typedef' . CIdent '=' Type ';'           (rule 8)

	L_CIdent       shift, and enter state 15

	CIdent         goto state 16

State 13

	Type -> 'char' .                                    (rule 49)

	'('            reduce using rule 49
	')'            reduce using rule 49
	','            reduce using rule 49
	';'            reduce using rule 49
	'['            reduce using rule 49
	'[]'           reduce using rule 49
	L_VIdent       reduce using rule 49


State 14

	Type -> 'string' .                                  (rule 50)

	'('            reduce using rule 50
	')'            reduce using rule 50
	','            reduce using rule 50
	';'            reduce using rule 50
	'['            reduce using rule 50
	'[]'           reduce using rule 50
	L_VIdent       reduce using rule 50


State 15

	CIdent -> L_CIdent .                                (rule 4)

	'('            reduce using rule 4
	')'            reduce using rule 4
	','            reduce using rule 4
	';'            reduce using rule 4
	'='            reduce using rule 4
	'['            reduce using rule 4
	'[]'           reduce using rule 4
	'{'            reduce using rule 4
	'extends'      reduce using rule 4
	L_VIdent       reduce using rule 4


State 16

	TopDef -> 'typedef' CIdent . '=' Type ';'           (rule 8)

	'='            shift, and enter state 28


State 17

	TopDef -> 'class' CIdent . '{' ListClassElem '}'    (rule 9)
	TopDef -> 'class' CIdent . 'extends' CIdent '{' ListClassElem '}'    (rule 10)

	'{'            shift, and enter state 26
	'extends'      shift, and enter state 27


State 18

	TopDef -> Type VIdent . '(' ListArgument ')' Block    (rule 7)

	'('            shift, and enter state 25


State 19

	Type -> Type '(' . ListType ')'                     (rule 55)

	')'            reduce using rule 56
	'bool'         shift, and enter state 8
	'int'          shift, and enter state 10
	'void'         shift, and enter state 11
	'char'         shift, and enter state 13
	'string'       shift, and enter state 14
	L_CIdent       shift, and enter state 15

	CIdent         goto state 3
	Type           goto state 23
	ListType       goto state 24

State 20

	Type -> Type '[]' .                                 (rule 54)

	'('            reduce using rule 54
	')'            reduce using rule 54
	','            reduce using rule 54
	';'            reduce using rule 54
	'['            reduce using rule 54
	'[]'           reduce using rule 54
	L_VIdent       reduce using rule 54


State 21

	VIdent -> L_VIdent .                                (rule 5)

	'!='           reduce using rule 5
	'%'            reduce using rule 5
	'&'            reduce using rule 5
	'&&'           reduce using rule 5
	'('            reduce using rule 5
	')'            reduce using rule 5
	'*'            reduce using rule 5
	'+'            reduce using rule 5
	'++'           reduce using rule 5
	','            reduce using rule 5
	'-'            reduce using rule 5
	'--'           reduce using rule 5
	'->'           reduce using rule 5
	'.'            reduce using rule 5
	'/'            reduce using rule 5
	';'            reduce using rule 5
	'<'            reduce using rule 5
	'<<'           reduce using rule 5
	'<='           reduce using rule 5
	'='            reduce using rule 5
	'=='           reduce using rule 5
	'>'            reduce using rule 5
	'>='           reduce using rule 5
	'>>'           reduce using rule 5
	'['            reduce using rule 5
	']'            reduce using rule 5
	'^'            reduce using rule 5
	'else'         reduce using rule 5
	'|'            reduce using rule 5
	'||'           reduce using rule 5
	'to'           reduce using rule 5
	'down'         reduce using rule 5
	'in'           reduce using rule 5
	'by'           reduce using rule 5
	'then'         reduce using rule 5


State 22

	ListTopDef -> TopDef ListTopDef .                   (rule 12)

	%eof           reduce using rule 12


State 23

	Type -> Type . '[]'                                 (rule 54)
	Type -> Type . '(' ListType ')'                     (rule 55)
	ListType -> Type .                                  (rule 57)
	ListType -> Type . ',' ListType                     (rule 58)

	'('            shift, and enter state 19
	')'            reduce using rule 57
	','            shift, and enter state 36
	'[]'           shift, and enter state 20


State 24

	Type -> Type '(' ListType . ')'                     (rule 55)

	')'            shift, and enter state 35


State 25

	TopDef -> Type VIdent '(' . ListArgument ')' Block    (rule 7)

	')'            reduce using rule 14
	'bool'         shift, and enter state 8
	'int'          shift, and enter state 10
	'void'         shift, and enter state 11
	'char'         shift, and enter state 13
	'string'       shift, and enter state 14
	L_CIdent       shift, and enter state 15

	CIdent         goto state 3
	Argument       goto state 32
	ListArgument   goto state 33
	Type           goto state 34

State 26

	TopDef -> 'class' CIdent '{' . ListClassElem '}'    (rule 9)

	'bool'         reduce using rule 22
	'int'          reduce using rule 22
	'void'         reduce using rule 22
	'}'            reduce using rule 22
	'constr'       reduce using rule 22
	'char'         reduce using rule 22
	'string'       reduce using rule 22
	L_CIdent       reduce using rule 22

	ListClassElem  goto state 31

State 27

	TopDef -> 'class' CIdent 'extends' . CIdent '{' ListClassElem '}'    (rule 10)

	L_CIdent       shift, and enter state 15

	CIdent         goto state 30

State 28

	TopDef -> 'typedef' CIdent '=' . Type ';'           (rule 8)

	'bool'         shift, and enter state 8
	'int'          shift, and enter state 10
	'void'         shift, and enter state 11
	'char'         shift, and enter state 13
	'string'       shift, and enter state 14
	L_CIdent       shift, and enter state 15

	CIdent         goto state 3
	Type           goto state 29

State 29

	TopDef -> 'typedef' CIdent '=' Type . ';'           (rule 8)
	Type -> Type . '[]'                                 (rule 54)
	Type -> Type . '(' ListType ')'                     (rule 55)

	'('            shift, and enter state 19
	';'            shift, and enter state 46
	'[]'           shift, and enter state 20


State 30

	TopDef -> 'class' CIdent 'extends' CIdent . '{' ListClassElem '}'    (rule 10)

	'{'            shift, and enter state 45


State 31

	TopDef -> 'class' CIdent '{' ListClassElem . '}'    (rule 9)
	ListClassElem -> ListClassElem . ClassElem          (rule 23)

	'bool'         shift, and enter state 8
	'int'          shift, and enter state 10
	'void'         shift, and enter state 11
	'}'            shift, and enter state 43
	'constr'       shift, and enter state 44
	'char'         shift, and enter state 13
	'string'       shift, and enter state 14
	L_CIdent       shift, and enter state 15

	CIdent         goto state 3
	ClassElem      goto state 41
	Type           goto state 42

State 32

	ListArgument -> Argument .                          (rule 15)
	ListArgument -> Argument . ',' ListArgument         (rule 16)

	')'            reduce using rule 15
	','            shift, and enter state 40
	'->'           reduce using rule 15


State 33

	TopDef -> Type VIdent '(' ListArgument . ')' Block    (rule 7)

	')'            shift, and enter state 39


State 34

	Argument -> Type . VIdent                           (rule 13)
	Type -> Type . '[]'                                 (rule 54)
	Type -> Type . '(' ListType ')'                     (rule 55)

	'('            shift, and enter state 19
	'[]'           shift, and enter state 20
	L_VIdent       shift, and enter state 21

	VIdent         goto state 38

State 35

	Type -> Type '(' ListType ')' .                     (rule 55)

	'('            reduce using rule 55
	')'            reduce using rule 55
	','            reduce using rule 55
	';'            reduce using rule 55
	'['            reduce using rule 55
	'[]'           reduce using rule 55
	L_VIdent       reduce using rule 55


State 36

	ListType -> Type ',' . ListType                     (rule 58)

	')'            reduce using rule 56
	'bool'         shift, and enter state 8
	'int'          shift, and enter state 10
	'void'         shift, and enter state 11
	'char'         shift, and enter state 13
	'string'       shift, and enter state 14
	L_CIdent       shift, and enter state 15

	CIdent         goto state 3
	Type           goto state 23
	ListType       goto state 37

State 37

	ListType -> Type ',' ListType .                     (rule 58)

	')'            reduce using rule 58


State 38

	Argument -> Type VIdent .                           (rule 13)

	')'            reduce using rule 13
	','            reduce using rule 13
	'->'           reduce using rule 13


State 39

	TopDef -> Type VIdent '(' ListArgument ')' . Block    (rule 7)

	'{'            shift, and enter state 53

	Block          goto state 52

State 40

	ListArgument -> Argument ',' . ListArgument         (rule 16)

	')'            reduce using rule 14
	'->'           reduce using rule 14
	'bool'         shift, and enter state 8
	'int'          shift, and enter state 10
	'void'         shift, and enter state 11
	'char'         shift, and enter state 13
	'string'       shift, and enter state 14
	L_CIdent       shift, and enter state 15

	CIdent         goto state 3
	Argument       goto state 32
	ListArgument   goto state 51
	Type           goto state 34

State 41

	ListClassElem -> ListClassElem ClassElem .          (rule 23)

	'bool'         reduce using rule 23
	'int'          reduce using rule 23
	'void'         reduce using rule 23
	'}'            reduce using rule 23
	'constr'       reduce using rule 23
	'char'         reduce using rule 23
	'string'       reduce using rule 23
	L_CIdent       reduce using rule 23


State 42

	ClassElem -> Type . ListVIdent ';'                  (rule 17)
	ClassElem -> Type . VIdent '(' ListArgument ')' Block    (rule 19)
	Type -> Type . '[]'                                 (rule 54)
	Type -> Type . '(' ListType ')'                     (rule 55)

	'('            shift, and enter state 19
	'[]'           shift, and enter state 20
	L_VIdent       shift, and enter state 21

	VIdent         goto state 49
	ListVIdent     goto state 50

State 43

	TopDef -> 'class' CIdent '{' ListClassElem '}' .    (rule 9)

	'bool'         reduce using rule 9
	'class'        reduce using rule 9
	'int'          reduce using rule 9
	'void'         reduce using rule 9
	'typedef'      reduce using rule 9
	'char'         reduce using rule 9
	'string'       reduce using rule 9
	L_CIdent       reduce using rule 9
	%eof           reduce using rule 9


State 44

	ClassElem -> 'constr' . '(' ListArgument ')' Block    (rule 18)

	'('            shift, and enter state 48


State 45

	TopDef -> 'class' CIdent 'extends' CIdent '{' . ListClassElem '}'    (rule 10)

	'bool'         reduce using rule 22
	'int'          reduce using rule 22
	'void'         reduce using rule 22
	'}'            reduce using rule 22
	'constr'       reduce using rule 22
	'char'         reduce using rule 22
	'string'       reduce using rule 22
	L_CIdent       reduce using rule 22

	ListClassElem  goto state 47

State 46

	TopDef -> 'typedef' CIdent '=' Type ';' .           (rule 8)

	'bool'         reduce using rule 8
	'class'        reduce using rule 8
	'int'          reduce using rule 8
	'void'         reduce using rule 8
	'typedef'      reduce using rule 8
	'char'         reduce using rule 8
	'string'       reduce using rule 8
	L_CIdent       reduce using rule 8
	%eof           reduce using rule 8


State 47

	TopDef -> 'class' CIdent 'extends' CIdent '{' ListClassElem . '}'    (rule 10)
	ListClassElem -> ListClassElem . ClassElem          (rule 23)

	'bool'         shift, and enter state 8
	'int'          shift, and enter state 10
	'void'         shift, and enter state 11
	'}'            shift, and enter state 59
	'constr'       shift, and enter state 44
	'char'         shift, and enter state 13
	'string'       shift, and enter state 14
	L_CIdent       shift, and enter state 15

	CIdent         goto state 3
	ClassElem      goto state 41
	Type           goto state 42

State 48

	ClassElem -> 'constr' '(' . ListArgument ')' Block    (rule 18)

	')'            reduce using rule 14
	'bool'         shift, and enter state 8
	'int'          shift, and enter state 10
	'void'         shift, and enter state 11
	'char'         shift, and enter state 13
	'string'       shift, and enter state 14
	L_CIdent       shift, and enter state 15

	CIdent         goto state 3
	Argument       goto state 32
	ListArgument   goto state 58
	Type           goto state 34

State 49

	ClassElem -> Type VIdent . '(' ListArgument ')' Block    (rule 19)
	ListVIdent -> VIdent .                              (rule 20)
	ListVIdent -> VIdent . ',' ListVIdent               (rule 21)

	'('            shift, and enter state 56
	','            shift, and enter state 57
	';'            reduce using rule 20


State 50

	ClassElem -> Type ListVIdent . ';'                  (rule 17)

	';'            shift, and enter state 55


State 51

	ListArgument -> Argument ',' ListArgument .         (rule 16)

	')'            reduce using rule 16
	'->'           reduce using rule 16


State 52

	TopDef -> Type VIdent '(' ListArgument ')' Block .    (rule 7)

	'bool'         reduce using rule 7
	'class'        reduce using rule 7
	'int'          reduce using rule 7
	'void'         reduce using rule 7
	'typedef'      reduce using rule 7
	'char'         reduce using rule 7
	'string'       reduce using rule 7
	L_CIdent       reduce using rule 7
	%eof           reduce using rule 7


State 53

	Block -> '{' . ListStmt '}'                         (rule 24)

	'!'            reduce using rule 25
	'('            reduce using rule 25
	'-'            reduce using rule 25
	';'            reduce using rule 25
	'\\'           reduce using rule 25
	'bool'         reduce using rule 25
	'false'        reduce using rule 25
	'if'           reduce using rule 25
	'int'          reduce using rule 25
	'new'          reduce using rule 25
	'null'         reduce using rule 25
	'return'       reduce using rule 25
	'true'         reduce using rule 25
	'void'         reduce using rule 25
	'while'        reduce using rule 25
	'{'            reduce using rule 25
	'}'            reduce using rule 25
	'~'            reduce using rule 25
	'for'          reduce using rule 25
	'char'         reduce using rule 25
	'string'       reduce using rule 25
	L_integ        reduce using rule 25
	L_CIdent       reduce using rule 25
	L_VIdent       reduce using rule 25
	L_String       reduce using rule 25
	L_Char         reduce using rule 25

	ListStmt       goto state 54

State 54

	Block -> '{' ListStmt . '}'                         (rule 24)
	ListStmt -> ListStmt . Stmt                         (rule 26)

	'!'            shift, and enter state 80
	'('            shift, and enter state 81
	'-'            shift, and enter state 82
	';'            shift, and enter state 83
	'\\'           shift, and enter state 84
	'bool'         shift, and enter state 8
	'false'        shift, and enter state 85
	'if'           shift, and enter state 86
	'int'          shift, and enter state 10
	'new'          shift, and enter state 87
	'null'         shift, and enter state 88
	'return'       shift, and enter state 89
	'true'         shift, and enter state 90
	'void'         shift, and enter state 11
	'while'        shift, and enter state 91
	'{'            shift, and enter state 53
	'}'            shift, and enter state 92
	'~'            shift, and enter state 93
	'for'          shift, and enter state 94
	'char'         shift, and enter state 13
	'string'       shift, and enter state 14
	L_integ        shift, and enter state 2
	L_CIdent       shift, and enter state 15
	L_VIdent       shift, and enter state 21
	L_String       shift, and enter state 95
	L_Char         shift, and enter state 96

	Integer        goto state 64
	String         goto state 65
	Char           goto state 66
	CIdent         goto state 3
	VIdent         goto state 67
	Block          goto state 68
	Stmt           goto state 69
	Type           goto state 70
	Expr7          goto state 71
	Expr6          goto state 72
	Expr5          goto state 73
	Expr4          goto state 74
	Expr3          goto state 75
	Expr2          goto state 76
	Expr1          goto state 77
	Expr           goto state 78
	UnaryOp        goto state 79

State 55

	ClassElem -> Type ListVIdent ';' .                  (rule 17)

	'bool'         reduce using rule 17
	'int'          reduce using rule 17
	'void'         reduce using rule 17
	'}'            reduce using rule 17
	'constr'       reduce using rule 17
	'char'         reduce using rule 17
	'string'       reduce using rule 17
	L_CIdent       reduce using rule 17


State 56

	ClassElem -> Type VIdent '(' . ListArgument ')' Block    (rule 19)

	')'            reduce using rule 14
	'bool'         shift, and enter state 8
	'int'          shift, and enter state 10
	'void'         shift, and enter state 11
	'char'         shift, and enter state 13
	'string'       shift, and enter state 14
	L_CIdent       shift, and enter state 15

	CIdent         goto state 3
	Argument       goto state 32
	ListArgument   goto state 63
	Type           goto state 34

State 57

	ListVIdent -> VIdent ',' . ListVIdent               (rule 21)

	L_VIdent       shift, and enter state 21

	VIdent         goto state 61
	ListVIdent     goto state 62

State 58

	ClassElem -> 'constr' '(' ListArgument . ')' Block    (rule 18)

	')'            shift, and enter state 60


State 59

	TopDef -> 'class' CIdent 'extends' CIdent '{' ListClassElem '}' .    (rule 10)

	'bool'         reduce using rule 10
	'class'        reduce using rule 10
	'int'          reduce using rule 10
	'void'         reduce using rule 10
	'typedef'      reduce using rule 10
	'char'         reduce using rule 10
	'string'       reduce using rule 10
	L_CIdent       reduce using rule 10
	%eof           reduce using rule 10


State 60

	ClassElem -> 'constr' '(' ListArgument ')' . Block    (rule 18)

	'{'            shift, and enter state 53

	Block          goto state 139

State 61

	ListVIdent -> VIdent .                              (rule 20)
	ListVIdent -> VIdent . ',' ListVIdent               (rule 21)

	','            shift, and enter state 57
	';'            reduce using rule 20


State 62

	ListVIdent -> VIdent ',' ListVIdent .               (rule 21)

	';'            reduce using rule 21


State 63

	ClassElem -> Type VIdent '(' ListArgument . ')' Block    (rule 19)

	')'            shift, and enter state 138


State 64

	Expr7 -> Integer .                                  (rule 64)

	'!='           reduce using rule 64
	'%'            reduce using rule 64
	'&'            reduce using rule 64
	'&&'           reduce using rule 64
	'('            reduce using rule 64
	')'            reduce using rule 64
	'*'            reduce using rule 64
	'+'            reduce using rule 64
	'++'           reduce using rule 64
	','            reduce using rule 64
	'-'            reduce using rule 64
	'--'           reduce using rule 64
	'.'            reduce using rule 64
	'/'            reduce using rule 64
	';'            reduce using rule 64
	'<'            reduce using rule 64
	'<<'           reduce using rule 64
	'<='           reduce using rule 64
	'='            reduce using rule 64
	'=='           reduce using rule 64
	'>'            reduce using rule 64
	'>='           reduce using rule 64
	'>>'           reduce using rule 64
	'['            reduce using rule 64
	']'            reduce using rule 64
	'^'            reduce using rule 64
	'else'         reduce using rule 64
	'|'            reduce using rule 64
	'||'           reduce using rule 64
	'to'           reduce using rule 64
	'down'         reduce using rule 64
	'by'           reduce using rule 64
	'then'         reduce using rule 64


State 65

	Expr7 -> String .                                   (rule 63)

	'!='           reduce using rule 63
	'%'            reduce using rule 63
	'&'            reduce using rule 63
	'&&'           reduce using rule 63
	'('            reduce using rule 63
	')'            reduce using rule 63
	'*'            reduce using rule 63
	'+'            reduce using rule 63
	'++'           reduce using rule 63
	','            reduce using rule 63
	'-'            reduce using rule 63
	'--'           reduce using rule 63
	'.'            reduce using rule 63
	'/'            reduce using rule 63
	';'            reduce using rule 63
	'<'            reduce using rule 63
	'<<'           reduce using rule 63
	'<='           reduce using rule 63
	'='            reduce using rule 63
	'=='           reduce using rule 63
	'>'            reduce using rule 63
	'>='           reduce using rule 63
	'>>'           reduce using rule 63
	'['            reduce using rule 63
	']'            reduce using rule 63
	'^'            reduce using rule 63
	'else'         reduce using rule 63
	'|'            reduce using rule 63
	'||'           reduce using rule 63
	'to'           reduce using rule 63
	'down'         reduce using rule 63
	'by'           reduce using rule 63
	'then'         reduce using rule 63


State 66

	Expr7 -> Char .                                     (rule 65)

	'!='           reduce using rule 65
	'%'            reduce using rule 65
	'&'            reduce using rule 65
	'&&'           reduce using rule 65
	'('            reduce using rule 65
	')'            reduce using rule 65
	'*'            reduce using rule 65
	'+'            reduce using rule 65
	'++'           reduce using rule 65
	','            reduce using rule 65
	'-'            reduce using rule 65
	'--'           reduce using rule 65
	'.'            reduce using rule 65
	'/'            reduce using rule 65
	';'            reduce using rule 65
	'<'            reduce using rule 65
	'<<'           reduce using rule 65
	'<='           reduce using rule 65
	'='            reduce using rule 65
	'=='           reduce using rule 65
	'>'            reduce using rule 65
	'>='           reduce using rule 65
	'>>'           reduce using rule 65
	'['            reduce using rule 65
	']'            reduce using rule 65
	'^'            reduce using rule 65
	'else'         reduce using rule 65
	'|'            reduce using rule 65
	'||'           reduce using rule 65
	'to'           reduce using rule 65
	'down'         reduce using rule 65
	'by'           reduce using rule 65
	'then'         reduce using rule 65


State 67

	Expr7 -> VIdent .                                   (rule 62)

	'!='           reduce using rule 62
	'%'            reduce using rule 62
	'&'            reduce using rule 62
	'&&'           reduce using rule 62
	'('            reduce using rule 62
	')'            reduce using rule 62
	'*'            reduce using rule 62
	'+'            reduce using rule 62
	'++'           reduce using rule 62
	','            reduce using rule 62
	'-'            reduce using rule 62
	'--'           reduce using rule 62
	'.'            reduce using rule 62
	'/'            reduce using rule 62
	';'            reduce using rule 62
	'<'            reduce using rule 62
	'<<'           reduce using rule 62
	'<='           reduce using rule 62
	'='            reduce using rule 62
	'=='           reduce using rule 62
	'>'            reduce using rule 62
	'>='           reduce using rule 62
	'>>'           reduce using rule 62
	'['            reduce using rule 62
	']'            reduce using rule 62
	'^'            reduce using rule 62
	'else'         reduce using rule 62
	'|'            reduce using rule 62
	'||'           reduce using rule 62
	'to'           reduce using rule 62
	'down'         reduce using rule 62
	'by'           reduce using rule 62
	'then'         reduce using rule 62


State 68

	Stmt -> Block .                                     (rule 28)

	'!'            reduce using rule 28
	'('            reduce using rule 28
	'-'            reduce using rule 28
	';'            reduce using rule 28
	'\\'           reduce using rule 28
	'bool'         reduce using rule 28
	'else'         reduce using rule 28
	'false'        reduce using rule 28
	'if'           reduce using rule 28
	'int'          reduce using rule 28
	'new'          reduce using rule 28
	'null'         reduce using rule 28
	'return'       reduce using rule 28
	'true'         reduce using rule 28
	'void'         reduce using rule 28
	'while'        reduce using rule 28
	'{'            reduce using rule 28
	'}'            reduce using rule 28
	'~'            reduce using rule 28
	'for'          reduce using rule 28
	'char'         reduce using rule 28
	'string'       reduce using rule 28
	L_integ        reduce using rule 28
	L_CIdent       reduce using rule 28
	L_VIdent       reduce using rule 28
	L_String       reduce using rule 28
	L_Char         reduce using rule 28


State 69

	ListStmt -> ListStmt Stmt .                         (rule 26)

	'!'            reduce using rule 26
	'('            reduce using rule 26
	'-'            reduce using rule 26
	';'            reduce using rule 26
	'\\'           reduce using rule 26
	'bool'         reduce using rule 26
	'false'        reduce using rule 26
	'if'           reduce using rule 26
	'int'          reduce using rule 26
	'new'          reduce using rule 26
	'null'         reduce using rule 26
	'return'       reduce using rule 26
	'true'         reduce using rule 26
	'void'         reduce using rule 26
	'while'        reduce using rule 26
	'{'            reduce using rule 26
	'}'            reduce using rule 26
	'~'            reduce using rule 26
	'for'          reduce using rule 26
	'char'         reduce using rule 26
	'string'       reduce using rule 26
	L_integ        reduce using rule 26
	L_CIdent       reduce using rule 26
	L_VIdent       reduce using rule 26
	L_String       reduce using rule 26
	L_Char         reduce using rule 26


State 70

	Stmt -> Type . ListItem ';'                         (rule 29)
	Type -> Type . '[]'                                 (rule 54)
	Type -> Type . '(' ListType ')'                     (rule 55)

	'('            shift, and enter state 19
	'[]'           shift, and enter state 20
	L_VIdent       shift, and enter state 21

	VIdent         goto state 135
	Item           goto state 136
	ListItem       goto state 137

State 71

	Expr7 -> Expr7 . '.' VIdent                         (rule 66)
	Expr7 -> Expr7 . '[' Expr ']'                       (rule 67)
	Expr7 -> Expr7 . '(' ListExpr ')'                   (rule 68)
	Expr6 -> Expr7 .                                    (rule 71)

	'!='           reduce using rule 71
	'%'            reduce using rule 71
	'&'            reduce using rule 71
	'&&'           reduce using rule 71
	'('            shift, and enter state 132
	')'            reduce using rule 71
	'*'            reduce using rule 71
	'+'            reduce using rule 71
	'++'           reduce using rule 71
	','            reduce using rule 71
	'-'            reduce using rule 71
	'--'           reduce using rule 71
	'.'            shift, and enter state 133
	'/'            reduce using rule 71
	';'            reduce using rule 71
	'<'            reduce using rule 71
	'<<'           reduce using rule 71
	'<='           reduce using rule 71
	'='            reduce using rule 71
	'=='           reduce using rule 71
	'>'            reduce using rule 71
	'>='           reduce using rule 71
	'>>'           reduce using rule 71
	'['            shift, and enter state 134
	']'            reduce using rule 71
	'^'            reduce using rule 71
	'else'         reduce using rule 71
	'|'            reduce using rule 71
	'||'           reduce using rule 71
	'to'           reduce using rule 71
	'down'         reduce using rule 71
	'by'           reduce using rule 71
	'then'         reduce using rule 71


State 72

	Expr5 -> Expr6 .                                    (rule 73)

	'!='           reduce using rule 73
	'%'            reduce using rule 73
	'&'            reduce using rule 73
	'&&'           reduce using rule 73
	')'            reduce using rule 73
	'*'            reduce using rule 73
	'+'            reduce using rule 73
	'++'           reduce using rule 73
	','            reduce using rule 73
	'-'            reduce using rule 73
	'--'           reduce using rule 73
	'/'            reduce using rule 73
	';'            reduce using rule 73
	'<'            reduce using rule 73
	'<<'           reduce using rule 73
	'<='           reduce using rule 73
	'='            reduce using rule 73
	'=='           reduce using rule 73
	'>'            reduce using rule 73
	'>='           reduce using rule 73
	'>>'           reduce using rule 73
	']'            reduce using rule 73
	'^'            reduce using rule 73
	'else'         reduce using rule 73
	'|'            reduce using rule 73
	'||'           reduce using rule 73
	'to'           reduce using rule 73
	'down'         reduce using rule 73
	'by'           reduce using rule 73
	'then'         reduce using rule 73


State 73

	Expr5 -> Expr5 . MulOp Expr6                        (rule 72)
	Expr4 -> Expr5 .                                    (rule 75)

	'!='           reduce using rule 75
	'%'            shift, and enter state 124
	'&'            shift, and enter state 125
	'&&'           reduce using rule 75
	')'            reduce using rule 75
	'*'            shift, and enter state 126
	'+'            reduce using rule 75
	'++'           reduce using rule 75
	','            reduce using rule 75
	'-'            reduce using rule 75
	'--'           reduce using rule 75
	'/'            shift, and enter state 127
	';'            reduce using rule 75
	'<'            reduce using rule 75
	'<<'           shift, and enter state 128
	'<='           reduce using rule 75
	'='            reduce using rule 75
	'=='           reduce using rule 75
	'>'            reduce using rule 75
	'>='           reduce using rule 75
	'>>'           shift, and enter state 129
	']'            reduce using rule 75
	'^'            shift, and enter state 130
	'else'         reduce using rule 75
	'|'            shift, and enter state 131
	'||'           reduce using rule 75
	'to'           reduce using rule 75
	'down'         reduce using rule 75
	'by'           reduce using rule 75
	'then'         reduce using rule 75

	MulOp          goto state 123

State 74

	Expr4 -> Expr4 . AddOp Expr5                        (rule 74)
	Expr3 -> Expr4 .                                    (rule 77)

	'!='           reduce using rule 77
	'&&'           reduce using rule 77
	')'            reduce using rule 77
	'+'            shift, and enter state 121
	'++'           reduce using rule 77
	','            reduce using rule 77
	'-'            shift, and enter state 122
	'--'           reduce using rule 77
	';'            reduce using rule 77
	'<'            reduce using rule 77
	'<='           reduce using rule 77
	'='            reduce using rule 77
	'=='           reduce using rule 77
	'>'            reduce using rule 77
	'>='           reduce using rule 77
	']'            reduce using rule 77
	'else'         reduce using rule 77
	'||'           reduce using rule 77
	'to'           reduce using rule 77
	'down'         reduce using rule 77
	'by'           reduce using rule 77
	'then'         reduce using rule 77

	AddOp          goto state 120

State 75

	Expr3 -> Expr3 . RelOp Expr4                        (rule 76)
	Expr2 -> Expr3 . '&&' Expr2                         (rule 78)
	Expr2 -> Expr3 .                                    (rule 79)

	'!='           shift, and enter state 113
	'&&'           shift, and enter state 114
	')'            reduce using rule 79
	'++'           reduce using rule 79
	','            reduce using rule 79
	'--'           reduce using rule 79
	';'            reduce using rule 79
	'<'            shift, and enter state 115
	'<='           shift, and enter state 116
	'='            reduce using rule 79
	'=='           shift, and enter state 117
	'>'            shift, and enter state 118
	'>='           shift, and enter state 119
	']'            reduce using rule 79
	'else'         reduce using rule 79
	'||'           reduce using rule 79
	'to'           reduce using rule 79
	'down'         reduce using rule 79
	'by'           reduce using rule 79
	'then'         reduce using rule 79

	RelOp          goto state 112

State 76

	Expr1 -> Expr2 . '||' Expr1                         (rule 80)
	Expr1 -> Expr2 .                                    (rule 81)

	')'            reduce using rule 81
	'++'           reduce using rule 81
	','            reduce using rule 81
	'--'           reduce using rule 81
	';'            reduce using rule 81
	'='            reduce using rule 81
	']'            reduce using rule 81
	'else'         reduce using rule 81
	'||'           shift, and enter state 111
	'to'           reduce using rule 81
	'down'         reduce using rule 81
	'by'           reduce using rule 81
	'then'         reduce using rule 81


State 77

	Expr -> Expr1 .                                     (rule 85)

	')'            reduce using rule 85
	'++'           reduce using rule 85
	','            reduce using rule 85
	'--'           reduce using rule 85
	';'            reduce using rule 85
	'='            reduce using rule 85
	']'            reduce using rule 85
	'else'         reduce using rule 85
	'to'           reduce using rule 85
	'down'         reduce using rule 85
	'by'           reduce using rule 85
	'then'         reduce using rule 85


State 78

	Stmt -> Expr . '=' Expr ';'                         (rule 30)
	Stmt -> Expr . '++' ';'                             (rule 31)
	Stmt -> Expr . '--' ';'                             (rule 32)
	Stmt -> Expr . ';'                                  (rule 43)

	'++'           shift, and enter state 107
	'--'           shift, and enter state 108
	';'            shift, and enter state 109
	'='            shift, and enter state 110


State 79

	Expr6 -> UnaryOp . Expr6                            (rule 70)

	'!'            shift, and enter state 80
	'('            shift, and enter state 81
	'-'            shift, and enter state 82
	'false'        shift, and enter state 85
	'null'         shift, and enter state 88
	'true'         shift, and enter state 90
	'~'            shift, and enter state 93
	L_integ        shift, and enter state 2
	L_VIdent       shift, and enter state 21
	L_String       shift, and enter state 95
	L_Char         shift, and enter state 96

	Integer        goto state 64
	String         goto state 65
	Char           goto state 66
	VIdent         goto state 67
	Expr7          goto state 71
	Expr6          goto state 106
	UnaryOp        goto state 79

State 80

	UnaryOp -> '!' .                                    (rule 93)

	'!'            reduce using rule 93
	'('            reduce using rule 93
	'-'            reduce using rule 93
	'false'        reduce using rule 93
	'null'         reduce using rule 93
	'true'         reduce using rule 93
	'~'            reduce using rule 93
	L_integ        reduce using rule 93
	L_VIdent       reduce using rule 93
	L_String       reduce using rule 93
	L_Char         reduce using rule 93


State 81

	Expr7 -> '(' . Expr ')'                             (rule 69)

	'!'            shift, and enter state 80
	'('            shift, and enter state 81
	'-'            shift, and enter state 82
	'\\'           shift, and enter state 84
	'false'        shift, and enter state 85
	'new'          shift, and enter state 87
	'null'         shift, and enter state 88
	'true'         shift, and enter state 90
	'~'            shift, and enter state 93
	L_integ        shift, and enter state 2
	L_VIdent       shift, and enter state 21
	L_String       shift, and enter state 95
	L_Char         shift, and enter state 96

	Integer        goto state 64
	String         goto state 65
	Char           goto state 66
	VIdent         goto state 67
	Expr7          goto state 71
	Expr6          goto state 72
	Expr5          goto state 73
	Expr4          goto state 74
	Expr3          goto state 75
	Expr2          goto state 76
	Expr1          goto state 77
	Expr           goto state 105
	UnaryOp        goto state 79

State 82

	UnaryOp -> '-' .                                    (rule 92)

	'!'            reduce using rule 92
	'('            reduce using rule 92
	'-'            reduce using rule 92
	'false'        reduce using rule 92
	'null'         reduce using rule 92
	'true'         reduce using rule 92
	'~'            reduce using rule 92
	L_integ        reduce using rule 92
	L_VIdent       reduce using rule 92
	L_String       reduce using rule 92
	L_Char         reduce using rule 92


State 83

	Stmt -> ';' .                                       (rule 27)

	'!'            reduce using rule 27
	'('            reduce using rule 27
	'-'            reduce using rule 27
	';'            reduce using rule 27
	'\\'           reduce using rule 27
	'bool'         reduce using rule 27
	'else'         reduce using rule 27
	'false'        reduce using rule 27
	'if'           reduce using rule 27
	'int'          reduce using rule 27
	'new'          reduce using rule 27
	'null'         reduce using rule 27
	'return'       reduce using rule 27
	'true'         reduce using rule 27
	'void'         reduce using rule 27
	'while'        reduce using rule 27
	'{'            reduce using rule 27
	'}'            reduce using rule 27
	'~'            reduce using rule 27
	'for'          reduce using rule 27
	'char'         reduce using rule 27
	'string'       reduce using rule 27
	L_integ        reduce using rule 27
	L_CIdent       reduce using rule 27
	L_VIdent       reduce using rule 27
	L_String       reduce using rule 27
	L_Char         reduce using rule 27


State 84

	Expr -> '\\' . ListArgument '->' LambdaExpr         (rule 84)

	'->'           reduce using rule 14
	'bool'         shift, and enter state 8
	'int'          shift, and enter state 10
	'void'         shift, and enter state 11
	'char'         shift, and enter state 13
	'string'       shift, and enter state 14
	L_CIdent       shift, and enter state 15

	CIdent         goto state 3
	Argument       goto state 32
	ListArgument   goto state 104
	Type           goto state 34

State 85

	Expr7 -> 'false' .                                  (rule 61)

	'!='           reduce using rule 61
	'%'            reduce using rule 61
	'&'            reduce using rule 61
	'&&'           reduce using rule 61
	'('            reduce using rule 61
	')'            reduce using rule 61
	'*'            reduce using rule 61
	'+'            reduce using rule 61
	'++'           reduce using rule 61
	','            reduce using rule 61
	'-'            reduce using rule 61
	'--'           reduce using rule 61
	'.'            reduce using rule 61
	'/'            reduce using rule 61
	';'            reduce using rule 61
	'<'            reduce using rule 61
	'<<'           reduce using rule 61
	'<='           reduce using rule 61
	'='            reduce using rule 61
	'=='           reduce using rule 61
	'>'            reduce using rule 61
	'>='           reduce using rule 61
	'>>'           reduce using rule 61
	'['            reduce using rule 61
	']'            reduce using rule 61
	'^'            reduce using rule 61
	'else'         reduce using rule 61
	'|'            reduce using rule 61
	'||'           reduce using rule 61
	'to'           reduce using rule 61
	'down'         reduce using rule 61
	'by'           reduce using rule 61
	'then'         reduce using rule 61


State 86

	Stmt -> 'if' . '(' Expr ')' Stmt                    (rule 35)
	Stmt -> 'if' . '(' Expr ')' Stmt 'else' Stmt        (rule 36)

	'('            shift, and enter state 103


State 87

	Expr -> 'new' . CIdent '(' ListExpr ')'             (rule 82)
	Expr -> 'new' . Type '[' Expr ']'                   (rule 83)

	'bool'         shift, and enter state 8
	'int'          shift, and enter state 10
	'void'         shift, and enter state 11
	'char'         shift, and enter state 13
	'string'       shift, and enter state 14
	L_CIdent       shift, and enter state 15

	CIdent         goto state 101
	Type           goto state 102

State 88

	Expr7 -> 'null' .                                   (rule 59)

	'!='           reduce using rule 59
	'%'            reduce using rule 59
	'&'            reduce using rule 59
	'&&'           reduce using rule 59
	'('            reduce using rule 59
	')'            reduce using rule 59
	'*'            reduce using rule 59
	'+'            reduce using rule 59
	'++'           reduce using rule 59
	','            reduce using rule 59
	'-'            reduce using rule 59
	'--'           reduce using rule 59
	'.'            reduce using rule 59
	'/'            reduce using rule 59
	';'            reduce using rule 59
	'<'            reduce using rule 59
	'<<'           reduce using rule 59
	'<='           reduce using rule 59
	'='            reduce using rule 59
	'=='           reduce using rule 59
	'>'            reduce using rule 59
	'>='           reduce using rule 59
	'>>'           reduce using rule 59
	'['            reduce using rule 59
	']'            reduce using rule 59
	'^'            reduce using rule 59
	'else'         reduce using rule 59
	'|'            reduce using rule 59
	'||'           reduce using rule 59
	'to'           reduce using rule 59
	'down'         reduce using rule 59
	'by'           reduce using rule 59
	'then'         reduce using rule 59


State 89

	Stmt -> 'return' . Expr ';'                         (rule 33)
	Stmt -> 'return' . ';'                              (rule 34)

	'!'            shift, and enter state 80
	'('            shift, and enter state 81
	'-'            shift, and enter state 82
	';'            shift, and enter state 100
	'\\'           shift, and enter state 84
	'false'        shift, and enter state 85
	'new'          shift, and enter state 87
	'null'         shift, and enter state 88
	'true'         shift, and enter state 90
	'~'            shift, and enter state 93
	L_integ        shift, and enter state 2
	L_VIdent       shift, and enter state 21
	L_String       shift, and enter state 95
	L_Char         shift, and enter state 96

	Integer        goto state 64
	String         goto state 65
	Char           goto state 66
	VIdent         goto state 67
	Expr7          goto state 71
	Expr6          goto state 72
	Expr5          goto state 73
	Expr4          goto state 74
	Expr3          goto state 75
	Expr2          goto state 76
	Expr1          goto state 77
	Expr           goto state 99
	UnaryOp        goto state 79

State 90

	Expr7 -> 'true' .                                   (rule 60)

	'!='           reduce using rule 60
	'%'            reduce using rule 60
	'&'            reduce using rule 60
	'&&'           reduce using rule 60
	'('            reduce using rule 60
	')'            reduce using rule 60
	'*'            reduce using rule 60
	'+'            reduce using rule 60
	'++'           reduce using rule 60
	','            reduce using rule 60
	'-'            reduce using rule 60
	'--'           reduce using rule 60
	'.'            reduce using rule 60
	'/'            reduce using rule 60
	';'            reduce using rule 60
	'<'            reduce using rule 60
	'<<'           reduce using rule 60
	'<='           reduce using rule 60
	'='            reduce using rule 60
	'=='           reduce using rule 60
	'>'            reduce using rule 60
	'>='           reduce using rule 60
	'>>'           reduce using rule 60
	'['            reduce using rule 60
	']'            reduce using rule 60
	'^'            reduce using rule 60
	'else'         reduce using rule 60
	'|'            reduce using rule 60
	'||'           reduce using rule 60
	'to'           reduce using rule 60
	'down'         reduce using rule 60
	'by'           reduce using rule 60
	'then'         reduce using rule 60


State 91

	Stmt -> 'while' . '(' Expr ')' Stmt                 (rule 37)

	'('            shift, and enter state 98


State 92

	Block -> '{' ListStmt '}' .                         (rule 24)

	'!'            reduce using rule 24
	'('            reduce using rule 24
	')'            reduce using rule 24
	'++'           reduce using rule 24
	','            reduce using rule 24
	'-'            reduce using rule 24
	'--'           reduce using rule 24
	';'            reduce using rule 24
	'='            reduce using rule 24
	'\\'           reduce using rule 24
	']'            reduce using rule 24
	'bool'         reduce using rule 24
	'class'        reduce using rule 24
	'else'         reduce using rule 24
	'false'        reduce using rule 24
	'if'           reduce using rule 24
	'int'          reduce using rule 24
	'new'          reduce using rule 24
	'null'         reduce using rule 24
	'return'       reduce using rule 24
	'true'         reduce using rule 24
	'void'         reduce using rule 24
	'while'        reduce using rule 24
	'{'            reduce using rule 24
	'}'            reduce using rule 24
	'~'            reduce using rule 24
	'for'          reduce using rule 24
	'to'           reduce using rule 24
	'down'         reduce using rule 24
	'by'           reduce using rule 24
	'constr'       reduce using rule 24
	'then'         reduce using rule 24
	'typedef'      reduce using rule 24
	'char'         reduce using rule 24
	'string'       reduce using rule 24
	L_integ        reduce using rule 24
	L_CIdent       reduce using rule 24
	L_VIdent       reduce using rule 24
	L_String       reduce using rule 24
	L_Char         reduce using rule 24
	%eof           reduce using rule 24


State 93

	UnaryOp -> '~' .                                    (rule 94)

	'!'            reduce using rule 94
	'('            reduce using rule 94
	'-'            reduce using rule 94
	'false'        reduce using rule 94
	'null'         reduce using rule 94
	'true'         reduce using rule 94
	'~'            reduce using rule 94
	L_integ        reduce using rule 94
	L_VIdent       reduce using rule 94
	L_String       reduce using rule 94
	L_Char         reduce using rule 94


State 94

	Stmt -> 'for' . '(' VIdent '=' Expr 'to' Expr ')' Stmt    (rule 38)
	Stmt -> 'for' . '(' VIdent '=' Expr 'to' Expr 'by' Expr ')' Stmt    (rule 39)
	Stmt -> 'for' . '(' VIdent '=' Expr 'down' 'to' Expr ')' Stmt    (rule 40)
	Stmt -> 'for' . '(' VIdent '=' Expr 'down' 'to' Expr 'by' Expr ')' Stmt    (rule 41)
	Stmt -> 'for' . '(' VIdent 'in' Expr ')' Stmt       (rule 42)

	'('            shift, and enter state 97


State 95

	String -> L_String .                                (rule 2)

	'!='           reduce using rule 2
	'%'            reduce using rule 2
	'&'            reduce using rule 2
	'&&'           reduce using rule 2
	'('            reduce using rule 2
	')'            reduce using rule 2
	'*'            reduce using rule 2
	'+'            reduce using rule 2
	'++'           reduce using rule 2
	','            reduce using rule 2
	'-'            reduce using rule 2
	'--'           reduce using rule 2
	'.'            reduce using rule 2
	'/'            reduce using rule 2
	';'            reduce using rule 2
	'<'            reduce using rule 2
	'<<'           reduce using rule 2
	'<='           reduce using rule 2
	'='            reduce using rule 2
	'=='           reduce using rule 2
	'>'            reduce using rule 2
	'>='           reduce using rule 2
	'>>'           reduce using rule 2
	'['            reduce using rule 2
	']'            reduce using rule 2
	'^'            reduce using rule 2
	'else'         reduce using rule 2
	'|'            reduce using rule 2
	'||'           reduce using rule 2
	'to'           reduce using rule 2
	'down'         reduce using rule 2
	'by'           reduce using rule 2
	'then'         reduce using rule 2


State 96

	Char -> L_Char .                                    (rule 3)

	'!='           reduce using rule 3
	'%'            reduce using rule 3
	'&'            reduce using rule 3
	'&&'           reduce using rule 3
	'('            reduce using rule 3
	')'            reduce using rule 3
	'*'            reduce using rule 3
	'+'            reduce using rule 3
	'++'           reduce using rule 3
	','            reduce using rule 3
	'-'            reduce using rule 3
	'--'           reduce using rule 3
	'.'            reduce using rule 3
	'/'            reduce using rule 3
	';'            reduce using rule 3
	'<'            reduce using rule 3
	'<<'           reduce using rule 3
	'<='           reduce using rule 3
	'='            reduce using rule 3
	'=='           reduce using rule 3
	'>'            reduce using rule 3
	'>='           reduce using rule 3
	'>>'           reduce using rule 3
	'['            reduce using rule 3
	']'            reduce using rule 3
	'^'            reduce using rule 3
	'else'         reduce using rule 3
	'|'            reduce using rule 3
	'||'           reduce using rule 3
	'to'           reduce using rule 3
	'down'         reduce using rule 3
	'by'           reduce using rule 3
	'then'         reduce using rule 3


State 97

	Stmt -> 'for' '(' . VIdent '=' Expr 'to' Expr ')' Stmt    (rule 38)
	Stmt -> 'for' '(' . VIdent '=' Expr 'to' Expr 'by' Expr ')' Stmt    (rule 39)
	Stmt -> 'for' '(' . VIdent '=' Expr 'down' 'to' Expr ')' Stmt    (rule 40)
	Stmt -> 'for' '(' . VIdent '=' Expr 'down' 'to' Expr 'by' Expr ')' Stmt    (rule 41)
	Stmt -> 'for' '(' . VIdent 'in' Expr ')' Stmt       (rule 42)

	L_VIdent       shift, and enter state 21

	VIdent         goto state 163

State 98

	Stmt -> 'while' '(' . Expr ')' Stmt                 (rule 37)

	'!'            shift, and enter state 80
	'('            shift, and enter state 81
	'-'            shift, and enter state 82
	'\\'           shift, and enter state 84
	'false'        shift, and enter state 85
	'new'          shift, and enter state 87
	'null'         shift, and enter state 88
	'true'         shift, and enter state 90
	'~'            shift, and enter state 93
	L_integ        shift, and enter state 2
	L_VIdent       shift, and enter state 21
	L_String       shift, and enter state 95
	L_Char         shift, and enter state 96

	Integer        goto state 64
	String         goto state 65
	Char           goto state 66
	VIdent         goto state 67
	Expr7          goto state 71
	Expr6          goto state 72
	Expr5          goto state 73
	Expr4          goto state 74
	Expr3          goto state 75
	Expr2          goto state 76
	Expr1          goto state 77
	Expr           goto state 162
	UnaryOp        goto state 79

State 99

	Stmt -> 'return' Expr . ';'                         (rule 33)

	';'            shift, and enter state 161


State 100

	Stmt -> 'return' ';' .                              (rule 34)

	'!'            reduce using rule 34
	'('            reduce using rule 34
	'-'            reduce using rule 34
	';'            reduce using rule 34
	'\\'           reduce using rule 34
	'bool'         reduce using rule 34
	'else'         reduce using rule 34
	'false'        reduce using rule 34
	'if'           reduce using rule 34
	'int'          reduce using rule 34
	'new'          reduce using rule 34
	'null'         reduce using rule 34
	'return'       reduce using rule 34
	'true'         reduce using rule 34
	'void'         reduce using rule 34
	'while'        reduce using rule 34
	'{'            reduce using rule 34
	'}'            reduce using rule 34
	'~'            reduce using rule 34
	'for'          reduce using rule 34
	'char'         reduce using rule 34
	'string'       reduce using rule 34
	L_integ        reduce using rule 34
	L_CIdent       reduce using rule 34
	L_VIdent       reduce using rule 34
	L_String       reduce using rule 34
	L_Char         reduce using rule 34


State 101

	Type -> CIdent .                                    (rule 53)
	Expr -> 'new' CIdent . '(' ListExpr ')'             (rule 82)

	'('            shift, and enter state 160
			(reduce using rule 53)

	'['            reduce using rule 53
	'[]'           reduce using rule 53


State 102

	Type -> Type . '[]'                                 (rule 54)
	Type -> Type . '(' ListType ')'                     (rule 55)
	Expr -> 'new' Type . '[' Expr ']'                   (rule 83)

	'('            shift, and enter state 19
	'['            shift, and enter state 159
	'[]'           shift, and enter state 20


State 103

	Stmt -> 'if' '(' . Expr ')' Stmt                    (rule 35)
	Stmt -> 'if' '(' . Expr ')' Stmt 'else' Stmt        (rule 36)

	'!'            shift, and enter state 80
	'('            shift, and enter state 81
	'-'            shift, and enter state 82
	'\\'           shift, and enter state 84
	'false'        shift, and enter state 85
	'new'          shift, and enter state 87
	'null'         shift, and enter state 88
	'true'         shift, and enter state 90
	'~'            shift, and enter state 93
	L_integ        shift, and enter state 2
	L_VIdent       shift, and enter state 21
	L_String       shift, and enter state 95
	L_Char         shift, and enter state 96

	Integer        goto state 64
	String         goto state 65
	Char           goto state 66
	VIdent         goto state 67
	Expr7          goto state 71
	Expr6          goto state 72
	Expr5          goto state 73
	Expr4          goto state 74
	Expr3          goto state 75
	Expr2          goto state 76
	Expr1          goto state 77
	Expr           goto state 158
	UnaryOp        goto state 79

State 104

	Expr -> '\\' ListArgument . '->' LambdaExpr         (rule 84)

	'->'           shift, and enter state 157


State 105

	Expr7 -> '(' Expr . ')'                             (rule 69)

	')'            shift, and enter state 156


State 106

	Expr6 -> UnaryOp Expr6 .                            (rule 70)

	'!='           reduce using rule 70
	'%'            reduce using rule 70
	'&'            reduce using rule 70
	'&&'           reduce using rule 70
	')'            reduce using rule 70
	'*'            reduce using rule 70
	'+'            reduce using rule 70
	'++'           reduce using rule 70
	','            reduce using rule 70
	'-'            reduce using rule 70
	'--'           reduce using rule 70
	'/'            reduce using rule 70
	';'            reduce using rule 70
	'<'            reduce using rule 70
	'<<'           reduce using rule 70
	'<='           reduce using rule 70
	'='            reduce using rule 70
	'=='           reduce using rule 70
	'>'            reduce using rule 70
	'>='           reduce using rule 70
	'>>'           reduce using rule 70
	']'            reduce using rule 70
	'^'            reduce using rule 70
	'else'         reduce using rule 70
	'|'            reduce using rule 70
	'||'           reduce using rule 70
	'to'           reduce using rule 70
	'down'         reduce using rule 70
	'by'           reduce using rule 70
	'then'         reduce using rule 70


State 107

	Stmt -> Expr '++' . ';'                             (rule 31)

	';'            shift, and enter state 155


State 108

	Stmt -> Expr '--' . ';'                             (rule 32)

	';'            shift, and enter state 154


State 109

	Stmt -> Expr ';' .                                  (rule 43)

	'!'            reduce using rule 43
	'('            reduce using rule 43
	'-'            reduce using rule 43
	';'            reduce using rule 43
	'\\'           reduce using rule 43
	'bool'         reduce using rule 43
	'else'         reduce using rule 43
	'false'        reduce using rule 43
	'if'           reduce using rule 43
	'int'          reduce using rule 43
	'new'          reduce using rule 43
	'null'         reduce using rule 43
	'return'       reduce using rule 43
	'true'         reduce using rule 43
	'void'         reduce using rule 43
	'while'        reduce using rule 43
	'{'            reduce using rule 43
	'}'            reduce using rule 43
	'~'            reduce using rule 43
	'for'          reduce using rule 43
	'char'         reduce using rule 43
	'string'       reduce using rule 43
	L_integ        reduce using rule 43
	L_CIdent       reduce using rule 43
	L_VIdent       reduce using rule 43
	L_String       reduce using rule 43
	L_Char         reduce using rule 43


State 110

	Stmt -> Expr '=' . Expr ';'                         (rule 30)

	'!'            shift, and enter state 80
	'('            shift, and enter state 81
	'-'            shift, and enter state 82
	'\\'           shift, and enter state 84
	'false'        shift, and enter state 85
	'new'          shift, and enter state 87
	'null'         shift, and enter state 88
	'true'         shift, and enter state 90
	'~'            shift, and enter state 93
	L_integ        shift, and enter state 2
	L_VIdent       shift, and enter state 21
	L_String       shift, and enter state 95
	L_Char         shift, and enter state 96

	Integer        goto state 64
	String         goto state 65
	Char           goto state 66
	VIdent         goto state 67
	Expr7          goto state 71
	Expr6          goto state 72
	Expr5          goto state 73
	Expr4          goto state 74
	Expr3          goto state 75
	Expr2          goto state 76
	Expr1          goto state 77
	Expr           goto state 153
	UnaryOp        goto state 79

State 111

	Expr1 -> Expr2 '||' . Expr1                         (rule 80)

	'!'            shift, and enter state 80
	'('            shift, and enter state 81
	'-'            shift, and enter state 82
	'false'        shift, and enter state 85
	'null'         shift, and enter state 88
	'true'         shift, and enter state 90
	'~'            shift, and enter state 93
	L_integ        shift, and enter state 2
	L_VIdent       shift, and enter state 21
	L_String       shift, and enter state 95
	L_Char         shift, and enter state 96

	Integer        goto state 64
	String         goto state 65
	Char           goto state 66
	VIdent         goto state 67
	Expr7          goto state 71
	Expr6          goto state 72
	Expr5          goto state 73
	Expr4          goto state 74
	Expr3          goto state 75
	Expr2          goto state 76
	Expr1          goto state 152
	UnaryOp        goto state 79

State 112

	Expr3 -> Expr3 RelOp . Expr4                        (rule 76)

	'!'            shift, and enter state 80
	'('            shift, and enter state 81
	'-'            shift, and enter state 82
	'false'        shift, and enter state 85
	'null'         shift, and enter state 88
	'true'         shift, and enter state 90
	'~'            shift, and enter state 93
	L_integ        shift, and enter state 2
	L_VIdent       shift, and enter state 21
	L_String       shift, and enter state 95
	L_Char         shift, and enter state 96

	Integer        goto state 64
	String         goto state 65
	Char           goto state 66
	VIdent         goto state 67
	Expr7          goto state 71
	Expr6          goto state 72
	Expr5          goto state 73
	Expr4          goto state 151
	UnaryOp        goto state 79

State 113

	RelOp -> '!=' .                                     (rule 110)

	'!'            reduce using rule 110
	'('            reduce using rule 110
	'-'            reduce using rule 110
	'false'        reduce using rule 110
	'null'         reduce using rule 110
	'true'         reduce using rule 110
	'~'            reduce using rule 110
	L_integ        reduce using rule 110
	L_VIdent       reduce using rule 110
	L_String       reduce using rule 110
	L_Char         reduce using rule 110


State 114

	Expr2 -> Expr3 '&&' . Expr2                         (rule 78)

	'!'            shift, and enter state 80
	'('            shift, and enter state 81
	'-'            shift, and enter state 82
	'false'        shift, and enter state 85
	'null'         shift, and enter state 88
	'true'         shift, and enter state 90
	'~'            shift, and enter state 93
	L_integ        shift, and enter state 2
	L_VIdent       shift, and enter state 21
	L_String       shift, and enter state 95
	L_Char         shift, and enter state 96

	Integer        goto state 64
	String         goto state 65
	Char           goto state 66
	VIdent         goto state 67
	Expr7          goto state 71
	Expr6          goto state 72
	Expr5          goto state 73
	Expr4          goto state 74
	Expr3          goto state 75
	Expr2          goto state 150
	UnaryOp        goto state 79

State 115

	RelOp -> '<' .                                      (rule 105)

	'!'            reduce using rule 105
	'('            reduce using rule 105
	'-'            reduce using rule 105
	'false'        reduce using rule 105
	'null'         reduce using rule 105
	'true'         reduce using rule 105
	'~'            reduce using rule 105
	L_integ        reduce using rule 105
	L_VIdent       reduce using rule 105
	L_String       reduce using rule 105
	L_Char         reduce using rule 105


State 116

	RelOp -> '<=' .                                     (rule 106)

	'!'            reduce using rule 106
	'('            reduce using rule 106
	'-'            reduce using rule 106
	'false'        reduce using rule 106
	'null'         reduce using rule 106
	'true'         reduce using rule 106
	'~'            reduce using rule 106
	L_integ        reduce using rule 106
	L_VIdent       reduce using rule 106
	L_String       reduce using rule 106
	L_Char         reduce using rule 106


State 117

	RelOp -> '==' .                                     (rule 109)

	'!'            reduce using rule 109
	'('            reduce using rule 109
	'-'            reduce using rule 109
	'false'        reduce using rule 109
	'null'         reduce using rule 109
	'true'         reduce using rule 109
	'~'            reduce using rule 109
	L_integ        reduce using rule 109
	L_VIdent       reduce using rule 109
	L_String       reduce using rule 109
	L_Char         reduce using rule 109


State 118

	RelOp -> '>' .                                      (rule 107)

	'!'            reduce using rule 107
	'('            reduce using rule 107
	'-'            reduce using rule 107
	'false'        reduce using rule 107
	'null'         reduce using rule 107
	'true'         reduce using rule 107
	'~'            reduce using rule 107
	L_integ        reduce using rule 107
	L_VIdent       reduce using rule 107
	L_String       reduce using rule 107
	L_Char         reduce using rule 107


State 119

	RelOp -> '>=' .                                     (rule 108)

	'!'            reduce using rule 108
	'('            reduce using rule 108
	'-'            reduce using rule 108
	'false'        reduce using rule 108
	'null'         reduce using rule 108
	'true'         reduce using rule 108
	'~'            reduce using rule 108
	L_integ        reduce using rule 108
	L_VIdent       reduce using rule 108
	L_String       reduce using rule 108
	L_Char         reduce using rule 108


State 120

	Expr4 -> Expr4 AddOp . Expr5                        (rule 74)

	'!'            shift, and enter state 80
	'('            shift, and enter state 81
	'-'            shift, and enter state 82
	'false'        shift, and enter state 85
	'null'         shift, and enter state 88
	'true'         shift, and enter state 90
	'~'            shift, and enter state 93
	L_integ        shift, and enter state 2
	L_VIdent       shift, and enter state 21
	L_String       shift, and enter state 95
	L_Char         shift, and enter state 96

	Integer        goto state 64
	String         goto state 65
	Char           goto state 66
	VIdent         goto state 67
	Expr7          goto state 71
	Expr6          goto state 72
	Expr5          goto state 149
	UnaryOp        goto state 79

State 121

	AddOp -> '+' .                                      (rule 95)

	'!'            reduce using rule 95
	'('            reduce using rule 95
	'-'            reduce using rule 95
	'false'        reduce using rule 95
	'null'         reduce using rule 95
	'true'         reduce using rule 95
	'~'            reduce using rule 95
	L_integ        reduce using rule 95
	L_VIdent       reduce using rule 95
	L_String       reduce using rule 95
	L_Char         reduce using rule 95


State 122

	AddOp -> '-' .                                      (rule 96)

	'!'            reduce using rule 96
	'('            reduce using rule 96
	'-'            reduce using rule 96
	'false'        reduce using rule 96
	'null'         reduce using rule 96
	'true'         reduce using rule 96
	'~'            reduce using rule 96
	L_integ        reduce using rule 96
	L_VIdent       reduce using rule 96
	L_String       reduce using rule 96
	L_Char         reduce using rule 96


State 123

	Expr5 -> Expr5 MulOp . Expr6                        (rule 72)

	'!'            shift, and enter state 80
	'('            shift, and enter state 81
	'-'            shift, and enter state 82
	'false'        shift, and enter state 85
	'null'         shift, and enter state 88
	'true'         shift, and enter state 90
	'~'            shift, and enter state 93
	L_integ        shift, and enter state 2
	L_VIdent       shift, and enter state 21
	L_String       shift, and enter state 95
	L_Char         shift, and enter state 96

	Integer        goto state 64
	String         goto state 65
	Char           goto state 66
	VIdent         goto state 67
	Expr7          goto state 71
	Expr6          goto state 148
	UnaryOp        goto state 79

State 124

	MulOp -> '%' .                                      (rule 99)

	'!'            reduce using rule 99
	'('            reduce using rule 99
	'-'            reduce using rule 99
	'false'        reduce using rule 99
	'null'         reduce using rule 99
	'true'         reduce using rule 99
	'~'            reduce using rule 99
	L_integ        reduce using rule 99
	L_VIdent       reduce using rule 99
	L_String       reduce using rule 99
	L_Char         reduce using rule 99


State 125

	MulOp -> '&' .                                      (rule 102)

	'!'            reduce using rule 102
	'('            reduce using rule 102
	'-'            reduce using rule 102
	'false'        reduce using rule 102
	'null'         reduce using rule 102
	'true'         reduce using rule 102
	'~'            reduce using rule 102
	L_integ        reduce using rule 102
	L_VIdent       reduce using rule 102
	L_String       reduce using rule 102
	L_Char         reduce using rule 102


State 126

	MulOp -> '*' .                                      (rule 97)

	'!'            reduce using rule 97
	'('            reduce using rule 97
	'-'            reduce using rule 97
	'false'        reduce using rule 97
	'null'         reduce using rule 97
	'true'         reduce using rule 97
	'~'            reduce using rule 97
	L_integ        reduce using rule 97
	L_VIdent       reduce using rule 97
	L_String       reduce using rule 97
	L_Char         reduce using rule 97


State 127

	MulOp -> '/' .                                      (rule 98)

	'!'            reduce using rule 98
	'('            reduce using rule 98
	'-'            reduce using rule 98
	'false'        reduce using rule 98
	'null'         reduce using rule 98
	'true'         reduce using rule 98
	'~'            reduce using rule 98
	L_integ        reduce using rule 98
	L_VIdent       reduce using rule 98
	L_String       reduce using rule 98
	L_Char         reduce using rule 98


State 128

	MulOp -> '<<' .                                     (rule 100)

	'!'            reduce using rule 100
	'('            reduce using rule 100
	'-'            reduce using rule 100
	'false'        reduce using rule 100
	'null'         reduce using rule 100
	'true'         reduce using rule 100
	'~'            reduce using rule 100
	L_integ        reduce using rule 100
	L_VIdent       reduce using rule 100
	L_String       reduce using rule 100
	L_Char         reduce using rule 100


State 129

	MulOp -> '>>' .                                     (rule 101)

	'!'            reduce using rule 101
	'('            reduce using rule 101
	'-'            reduce using rule 101
	'false'        reduce using rule 101
	'null'         reduce using rule 101
	'true'         reduce using rule 101
	'~'            reduce using rule 101
	L_integ        reduce using rule 101
	L_VIdent       reduce using rule 101
	L_String       reduce using rule 101
	L_Char         reduce using rule 101


State 130

	MulOp -> '^' .                                      (rule 104)

	'!'            reduce using rule 104
	'('            reduce using rule 104
	'-'            reduce using rule 104
	'false'        reduce using rule 104
	'null'         reduce using rule 104
	'true'         reduce using rule 104
	'~'            reduce using rule 104
	L_integ        reduce using rule 104
	L_VIdent       reduce using rule 104
	L_String       reduce using rule 104
	L_Char         reduce using rule 104


State 131

	MulOp -> '|' .                                      (rule 103)

	'!'            reduce using rule 103
	'('            reduce using rule 103
	'-'            reduce using rule 103
	'false'        reduce using rule 103
	'null'         reduce using rule 103
	'true'         reduce using rule 103
	'~'            reduce using rule 103
	L_integ        reduce using rule 103
	L_VIdent       reduce using rule 103
	L_String       reduce using rule 103
	L_Char         reduce using rule 103


State 132

	Expr7 -> Expr7 '(' . ListExpr ')'                   (rule 68)

	'!'            shift, and enter state 80
	'('            shift, and enter state 81
	')'            reduce using rule 86
	'-'            shift, and enter state 82
	'\\'           shift, and enter state 84
	'false'        shift, and enter state 85
	'new'          shift, and enter state 87
	'null'         shift, and enter state 88
	'true'         shift, and enter state 90
	'~'            shift, and enter state 93
	L_integ        shift, and enter state 2
	L_VIdent       shift, and enter state 21
	L_String       shift, and enter state 95
	L_Char         shift, and enter state 96

	Integer        goto state 64
	String         goto state 65
	Char           goto state 66
	VIdent         goto state 67
	Expr7          goto state 71
	Expr6          goto state 72
	Expr5          goto state 73
	Expr4          goto state 74
	Expr3          goto state 75
	Expr2          goto state 76
	Expr1          goto state 77
	Expr           goto state 146
	ListExpr       goto state 147
	UnaryOp        goto state 79

State 133

	Expr7 -> Expr7 '.' . VIdent                         (rule 66)

	L_VIdent       shift, and enter state 21

	VIdent         goto state 145

State 134

	Expr7 -> Expr7 '[' . Expr ']'                       (rule 67)

	'!'            shift, and enter state 80
	'('            shift, and enter state 81
	'-'            shift, and enter state 82
	'\\'           shift, and enter state 84
	'false'        shift, and enter state 85
	'new'          shift, and enter state 87
	'null'         shift, and enter state 88
	'true'         shift, and enter state 90
	'~'            shift, and enter state 93
	L_integ        shift, and enter state 2
	L_VIdent       shift, and enter state 21
	L_String       shift, and enter state 95
	L_Char         shift, and enter state 96

	Integer        goto state 64
	String         goto state 65
	Char           goto state 66
	VIdent         goto state 67
	Expr7          goto state 71
	Expr6          goto state 72
	Expr5          goto state 73
	Expr4          goto state 74
	Expr3          goto state 75
	Expr2          goto state 76
	Expr1          goto state 77
	Expr           goto state 144
	UnaryOp        goto state 79

State 135

	Item -> VIdent .                                    (rule 44)
	Item -> VIdent . '=' Expr                           (rule 45)

	','            reduce using rule 44
	';'            reduce using rule 44
	'='            shift, and enter state 143


State 136

	ListItem -> Item .                                  (rule 46)
	ListItem -> Item . ',' ListItem                     (rule 47)

	','            shift, and enter state 142
	';'            reduce using rule 46


State 137

	Stmt -> Type ListItem . ';'                         (rule 29)

	';'            shift, and enter state 141


State 138

	ClassElem -> Type VIdent '(' ListArgument ')' . Block    (rule 19)

	'{'            shift, and enter state 53

	Block          goto state 140

State 139

	ClassElem -> 'constr' '(' ListArgument ')' Block .    (rule 18)

	'bool'         reduce using rule 18
	'int'          reduce using rule 18
	'void'         reduce using rule 18
	'}'            reduce using rule 18
	'constr'       reduce using rule 18
	'char'         reduce using rule 18
	'string'       reduce using rule 18
	L_CIdent       reduce using rule 18


State 140

	ClassElem -> Type VIdent '(' ListArgument ')' Block .    (rule 19)

	'bool'         reduce using rule 19
	'int'          reduce using rule 19
	'void'         reduce using rule 19
	'}'            reduce using rule 19
	'constr'       reduce using rule 19
	'char'         reduce using rule 19
	'string'       reduce using rule 19
	L_CIdent       reduce using rule 19


State 141

	Stmt -> Type ListItem ';' .                         (rule 29)

	'!'            reduce using rule 29
	'('            reduce using rule 29
	'-'            reduce using rule 29
	';'            reduce using rule 29
	'\\'           reduce using rule 29
	'bool'         reduce using rule 29
	'else'         reduce using rule 29
	'false'        reduce using rule 29
	'if'           reduce using rule 29
	'int'          reduce using rule 29
	'new'          reduce using rule 29
	'null'         reduce using rule 29
	'return'       reduce using rule 29
	'true'         reduce using rule 29
	'void'         reduce using rule 29
	'while'        reduce using rule 29
	'{'            reduce using rule 29
	'}'            reduce using rule 29
	'~'            reduce using rule 29
	'for'          reduce using rule 29
	'char'         reduce using rule 29
	'string'       reduce using rule 29
	L_integ        reduce using rule 29
	L_CIdent       reduce using rule 29
	L_VIdent       reduce using rule 29
	L_String       reduce using rule 29
	L_Char         reduce using rule 29


State 142

	ListItem -> Item ',' . ListItem                     (rule 47)

	L_VIdent       shift, and enter state 21

	VIdent         goto state 135
	Item           goto state 136
	ListItem       goto state 179

State 143

	Item -> VIdent '=' . Expr                           (rule 45)

	'!'            shift, and enter state 80
	'('            shift, and enter state 81
	'-'            shift, and enter state 82
	'\\'           shift, and enter state 84
	'false'        shift, and enter state 85
	'new'          shift, and enter state 87
	'null'         shift, and enter state 88
	'true'         shift, and enter state 90
	'~'            shift, and enter state 93
	L_integ        shift, and enter state 2
	L_VIdent       shift, and enter state 21
	L_String       shift, and enter state 95
	L_Char         shift, and enter state 96

	Integer        goto state 64
	String         goto state 65
	Char           goto state 66
	VIdent         goto state 67
	Expr7          goto state 71
	Expr6          goto state 72
	Expr5          goto state 73
	Expr4          goto state 74
	Expr3          goto state 75
	Expr2          goto state 76
	Expr1          goto state 77
	Expr           goto state 178
	UnaryOp        goto state 79

State 144

	Expr7 -> Expr7 '[' Expr . ']'                       (rule 67)

	']'            shift, and enter state 177


State 145

	Expr7 -> Expr7 '.' VIdent .                         (rule 66)

	'!='           reduce using rule 66
	'%'            reduce using rule 66
	'&'            reduce using rule 66
	'&&'           reduce using rule 66
	'('            reduce using rule 66
	')'            reduce using rule 66
	'*'            reduce using rule 66
	'+'            reduce using rule 66
	'++'           reduce using rule 66
	','            reduce using rule 66
	'-'            reduce using rule 66
	'--'           reduce using rule 66
	'.'            reduce using rule 66
	'/'            reduce using rule 66
	';'            reduce using rule 66
	'<'            reduce using rule 66
	'<<'           reduce using rule 66
	'<='           reduce using rule 66
	'='            reduce using rule 66
	'=='           reduce using rule 66
	'>'            reduce using rule 66
	'>='           reduce using rule 66
	'>>'           reduce using rule 66
	'['            reduce using rule 66
	']'            reduce using rule 66
	'^'            reduce using rule 66
	'else'         reduce using rule 66
	'|'            reduce using rule 66
	'||'           reduce using rule 66
	'to'           reduce using rule 66
	'down'         reduce using rule 66
	'by'           reduce using rule 66
	'then'         reduce using rule 66


State 146

	ListExpr -> Expr .                                  (rule 87)
	ListExpr -> Expr . ',' ListExpr                     (rule 88)

	')'            reduce using rule 87
	','            shift, and enter state 176


State 147

	Expr7 -> Expr7 '(' ListExpr . ')'                   (rule 68)

	')'            shift, and enter state 175


State 148

	Expr5 -> Expr5 MulOp Expr6 .                        (rule 72)

	'!='           reduce using rule 72
	'%'            reduce using rule 72
	'&'            reduce using rule 72
	'&&'           reduce using rule 72
	')'            reduce using rule 72
	'*'            reduce using rule 72
	'+'            reduce using rule 72
	'++'           reduce using rule 72
	','            reduce using rule 72
	'-'            reduce using rule 72
	'--'           reduce using rule 72
	'/'            reduce using rule 72
	';'            reduce using rule 72
	'<'            reduce using rule 72
	'<<'           reduce using rule 72
	'<='           reduce using rule 72
	'='            reduce using rule 72
	'=='           reduce using rule 72
	'>'            reduce using rule 72
	'>='           reduce using rule 72
	'>>'           reduce using rule 72
	']'            reduce using rule 72
	'^'            reduce using rule 72
	'else'         reduce using rule 72
	'|'            reduce using rule 72
	'||'           reduce using rule 72
	'to'           reduce using rule 72
	'down'         reduce using rule 72
	'by'           reduce using rule 72
	'then'         reduce using rule 72


State 149

	Expr5 -> Expr5 . MulOp Expr6                        (rule 72)
	Expr4 -> Expr4 AddOp Expr5 .                        (rule 74)

	'!='           reduce using rule 74
	'%'            shift, and enter state 124
	'&'            shift, and enter state 125
	'&&'           reduce using rule 74
	')'            reduce using rule 74
	'*'            shift, and enter state 126
	'+'            reduce using rule 74
	'++'           reduce using rule 74
	','            reduce using rule 74
	'-'            reduce using rule 74
	'--'           reduce using rule 74
	'/'            shift, and enter state 127
	';'            reduce using rule 74
	'<'            reduce using rule 74
	'<<'           shift, and enter state 128
	'<='           reduce using rule 74
	'='            reduce using rule 74
	'=='           reduce using rule 74
	'>'            reduce using rule 74
	'>='           reduce using rule 74
	'>>'           shift, and enter state 129
	']'            reduce using rule 74
	'^'            shift, and enter state 130
	'else'         reduce using rule 74
	'|'            shift, and enter state 131
	'||'           reduce using rule 74
	'to'           reduce using rule 74
	'down'         reduce using rule 74
	'by'           reduce using rule 74
	'then'         reduce using rule 74

	MulOp          goto state 123

State 150

	Expr2 -> Expr3 '&&' Expr2 .                         (rule 78)

	')'            reduce using rule 78
	'++'           reduce using rule 78
	','            reduce using rule 78
	'--'           reduce using rule 78
	';'            reduce using rule 78
	'='            reduce using rule 78
	']'            reduce using rule 78
	'else'         reduce using rule 78
	'||'           reduce using rule 78
	'to'           reduce using rule 78
	'down'         reduce using rule 78
	'by'           reduce using rule 78
	'then'         reduce using rule 78


State 151

	Expr4 -> Expr4 . AddOp Expr5                        (rule 74)
	Expr3 -> Expr3 RelOp Expr4 .                        (rule 76)

	'!='           reduce using rule 76
	'&&'           reduce using rule 76
	')'            reduce using rule 76
	'+'            shift, and enter state 121
	'++'           reduce using rule 76
	','            reduce using rule 76
	'-'            shift, and enter state 122
	'--'           reduce using rule 76
	';'            reduce using rule 76
	'<'            reduce using rule 76
	'<='           reduce using rule 76
	'='            reduce using rule 76
	'=='           reduce using rule 76
	'>'            reduce using rule 76
	'>='           reduce using rule 76
	']'            reduce using rule 76
	'else'         reduce using rule 76
	'||'           reduce using rule 76
	'to'           reduce using rule 76
	'down'         reduce using rule 76
	'by'           reduce using rule 76
	'then'         reduce using rule 76

	AddOp          goto state 120

State 152

	Expr1 -> Expr2 '||' Expr1 .                         (rule 80)

	')'            reduce using rule 80
	'++'           reduce using rule 80
	','            reduce using rule 80
	'--'           reduce using rule 80
	';'            reduce using rule 80
	'='            reduce using rule 80
	']'            reduce using rule 80
	'else'         reduce using rule 80
	'to'           reduce using rule 80
	'down'         reduce using rule 80
	'by'           reduce using rule 80
	'then'         reduce using rule 80


State 153

	Stmt -> Expr '=' Expr . ';'                         (rule 30)

	';'            shift, and enter state 174


State 154

	Stmt -> Expr '--' ';' .                             (rule 32)

	'!'            reduce using rule 32
	'('            reduce using rule 32
	'-'            reduce using rule 32
	';'            reduce using rule 32
	'\\'           reduce using rule 32
	'bool'         reduce using rule 32
	'else'         reduce using rule 32
	'false'        reduce using rule 32
	'if'           reduce using rule 32
	'int'          reduce using rule 32
	'new'          reduce using rule 32
	'null'         reduce using rule 32
	'return'       reduce using rule 32
	'true'         reduce using rule 32
	'void'         reduce using rule 32
	'while'        reduce using rule 32
	'{'            reduce using rule 32
	'}'            reduce using rule 32
	'~'            reduce using rule 32
	'for'          reduce using rule 32
	'char'         reduce using rule 32
	'string'       reduce using rule 32
	L_integ        reduce using rule 32
	L_CIdent       reduce using rule 32
	L_VIdent       reduce using rule 32
	L_String       reduce using rule 32
	L_Char         reduce using rule 32


State 155

	Stmt -> Expr '++' ';' .                             (rule 31)

	'!'            reduce using rule 31
	'('            reduce using rule 31
	'-'            reduce using rule 31
	';'            reduce using rule 31
	'\\'           reduce using rule 31
	'bool'         reduce using rule 31
	'else'         reduce using rule 31
	'false'        reduce using rule 31
	'if'           reduce using rule 31
	'int'          reduce using rule 31
	'new'          reduce using rule 31
	'null'         reduce using rule 31
	'return'       reduce using rule 31
	'true'         reduce using rule 31
	'void'         reduce using rule 31
	'while'        reduce using rule 31
	'{'            reduce using rule 31
	'}'            reduce using rule 31
	'~'            reduce using rule 31
	'for'          reduce using rule 31
	'char'         reduce using rule 31
	'string'       reduce using rule 31
	L_integ        reduce using rule 31
	L_CIdent       reduce using rule 31
	L_VIdent       reduce using rule 31
	L_String       reduce using rule 31
	L_Char         reduce using rule 31


State 156

	Expr7 -> '(' Expr ')' .                             (rule 69)

	'!='           reduce using rule 69
	'%'            reduce using rule 69
	'&'            reduce using rule 69
	'&&'           reduce using rule 69
	'('            reduce using rule 69
	')'            reduce using rule 69
	'*'            reduce using rule 69
	'+'            reduce using rule 69
	'++'           reduce using rule 69
	','            reduce using rule 69
	'-'            reduce using rule 69
	'--'           reduce using rule 69
	'.'            reduce using rule 69
	'/'            reduce using rule 69
	';'            reduce using rule 69
	'<'            reduce using rule 69
	'<<'           reduce using rule 69
	'<='           reduce using rule 69
	'='            reduce using rule 69
	'=='           reduce using rule 69
	'>'            reduce using rule 69
	'>='           reduce using rule 69
	'>>'           reduce using rule 69
	'['            reduce using rule 69
	']'            reduce using rule 69
	'^'            reduce using rule 69
	'else'         reduce using rule 69
	'|'            reduce using rule 69
	'||'           reduce using rule 69
	'to'           reduce using rule 69
	'down'         reduce using rule 69
	'by'           reduce using rule 69
	'then'         reduce using rule 69


State 157

	Expr -> '\\' ListArgument '->' . LambdaExpr         (rule 84)

	'!'            shift, and enter state 80
	'('            shift, and enter state 81
	'-'            shift, and enter state 82
	'\\'           shift, and enter state 84
	'false'        shift, and enter state 85
	'if'           shift, and enter state 173
	'new'          shift, and enter state 87
	'null'         shift, and enter state 88
	'true'         shift, and enter state 90
	'{'            shift, and enter state 53
	'~'            shift, and enter state 93
	L_integ        shift, and enter state 2
	L_VIdent       shift, and enter state 21
	L_String       shift, and enter state 95
	L_Char         shift, and enter state 96

	Integer        goto state 64
	String         goto state 65
	Char           goto state 66
	VIdent         goto state 67
	Block          goto state 170
	Expr7          goto state 71
	Expr6          goto state 72
	Expr5          goto state 73
	Expr4          goto state 74
	Expr3          goto state 75
	Expr2          goto state 76
	Expr1          goto state 77
	Expr           goto state 171
	LambdaExpr     goto state 172
	UnaryOp        goto state 79

State 158

	Stmt -> 'if' '(' Expr . ')' Stmt                    (rule 35)
	Stmt -> 'if' '(' Expr . ')' Stmt 'else' Stmt        (rule 36)

	')'            shift, and enter state 169


State 159

	Expr -> 'new' Type '[' . Expr ']'                   (rule 83)

	'!'            shift, and enter state 80
	'('            shift, and enter state 81
	'-'            shift, and enter state 82
	'\\'           shift, and enter state 84
	'false'        shift, and enter state 85
	'new'          shift, and enter state 87
	'null'         shift, and enter state 88
	'true'         shift, and enter state 90
	'~'            shift, and enter state 93
	L_integ        shift, and enter state 2
	L_VIdent       shift, and enter state 21
	L_String       shift, and enter state 95
	L_Char         shift, and enter state 96

	Integer        goto state 64
	String         goto state 65
	Char           goto state 66
	VIdent         goto state 67
	Expr7          goto state 71
	Expr6          goto state 72
	Expr5          goto state 73
	Expr4          goto state 74
	Expr3          goto state 75
	Expr2          goto state 76
	Expr1          goto state 77
	Expr           goto state 168
	UnaryOp        goto state 79

State 160

	Expr -> 'new' CIdent '(' . ListExpr ')'             (rule 82)

	'!'            shift, and enter state 80
	'('            shift, and enter state 81
	')'            reduce using rule 86
	'-'            shift, and enter state 82
	'\\'           shift, and enter state 84
	'false'        shift, and enter state 85
	'new'          shift, and enter state 87
	'null'         shift, and enter state 88
	'true'         shift, and enter state 90
	'~'            shift, and enter state 93
	L_integ        shift, and enter state 2
	L_VIdent       shift, and enter state 21
	L_String       shift, and enter state 95
	L_Char         shift, and enter state 96

	Integer        goto state 64
	String         goto state 65
	Char           goto state 66
	VIdent         goto state 67
	Expr7          goto state 71
	Expr6          goto state 72
	Expr5          goto state 73
	Expr4          goto state 74
	Expr3          goto state 75
	Expr2          goto state 76
	Expr1          goto state 77
	Expr           goto state 146
	ListExpr       goto state 167
	UnaryOp        goto state 79

State 161

	Stmt -> 'return' Expr ';' .                         (rule 33)

	'!'            reduce using rule 33
	'('            reduce using rule 33
	'-'            reduce using rule 33
	';'            reduce using rule 33
	'\\'           reduce using rule 33
	'bool'         reduce using rule 33
	'else'         reduce using rule 33
	'false'        reduce using rule 33
	'if'           reduce using rule 33
	'int'          reduce using rule 33
	'new'          reduce using rule 33
	'null'         reduce using rule 33
	'return'       reduce using rule 33
	'true'         reduce using rule 33
	'void'         reduce using rule 33
	'while'        reduce using rule 33
	'{'            reduce using rule 33
	'}'            reduce using rule 33
	'~'            reduce using rule 33
	'for'          reduce using rule 33
	'char'         reduce using rule 33
	'string'       reduce using rule 33
	L_integ        reduce using rule 33
	L_CIdent       reduce using rule 33
	L_VIdent       reduce using rule 33
	L_String       reduce using rule 33
	L_Char         reduce using rule 33


State 162

	Stmt -> 'while' '(' Expr . ')' Stmt                 (rule 37)

	')'            shift, and enter state 166


State 163

	Stmt -> 'for' '(' VIdent . '=' Expr 'to' Expr ')' Stmt    (rule 38)
	Stmt -> 'for' '(' VIdent . '=' Expr 'to' Expr 'by' Expr ')' Stmt    (rule 39)
	Stmt -> 'for' '(' VIdent . '=' Expr 'down' 'to' Expr ')' Stmt    (rule 40)
	Stmt -> 'for' '(' VIdent . '=' Expr 'down' 'to' Expr 'by' Expr ')' Stmt    (rule 41)
	Stmt -> 'for' '(' VIdent . 'in' Expr ')' Stmt       (rule 42)

	'='            shift, and enter state 164
	'in'           shift, and enter state 165


State 164

	Stmt -> 'for' '(' VIdent '=' . Expr 'to' Expr ')' Stmt    (rule 38)
	Stmt -> 'for' '(' VIdent '=' . Expr 'to' Expr 'by' Expr ')' Stmt    (rule 39)
	Stmt -> 'for' '(' VIdent '=' . Expr 'down' 'to' Expr ')' Stmt    (rule 40)
	Stmt -> 'for' '(' VIdent '=' . Expr 'down' 'to' Expr 'by' Expr ')' Stmt    (rule 41)

	'!'            shift, and enter state 80
	'('            shift, and enter state 81
	'-'            shift, and enter state 82
	'\\'           shift, and enter state 84
	'false'        shift, and enter state 85
	'new'          shift, and enter state 87
	'null'         shift, and enter state 88
	'true'         shift, and enter state 90
	'~'            shift, and enter state 93
	L_integ        shift, and enter state 2
	L_VIdent       shift, and enter state 21
	L_String       shift, and enter state 95
	L_Char         shift, and enter state 96

	Integer        goto state 64
	String         goto state 65
	Char           goto state 66
	VIdent         goto state 67
	Expr7          goto state 71
	Expr6          goto state 72
	Expr5          goto state 73
	Expr4          goto state 74
	Expr3          goto state 75
	Expr2          goto state 76
	Expr1          goto state 77
	Expr           goto state 187
	UnaryOp        goto state 79

State 165

	Stmt -> 'for' '(' VIdent 'in' . Expr ')' Stmt       (rule 42)

	'!'            shift, and enter state 80
	'('            shift, and enter state 81
	'-'            shift, and enter state 82
	'\\'           shift, and enter state 84
	'false'        shift, and enter state 85
	'new'          shift, and enter state 87
	'null'         shift, and enter state 88
	'true'         shift, and enter state 90
	'~'            shift, and enter state 93
	L_integ        shift, and enter state 2
	L_VIdent       shift, and enter state 21
	L_String       shift, and enter state 95
	L_Char         shift, and enter state 96

	Integer        goto state 64
	String         goto state 65
	Char           goto state 66
	VIdent         goto state 67
	Expr7          goto state 71
	Expr6          goto state 72
	Expr5          goto state 73
	Expr4          goto state 74
	Expr3          goto state 75
	Expr2          goto state 76
	Expr1          goto state 77
	Expr           goto state 186
	UnaryOp        goto state 79

State 166

	Stmt -> 'while' '(' Expr ')' . Stmt                 (rule 37)

	'!'            shift, and enter state 80
	'('            shift, and enter state 81
	'-'            shift, and enter state 82
	';'            shift, and enter state 83
	'\\'           shift, and enter state 84
	'bool'         shift, and enter state 8
	'false'        shift, and enter state 85
	'if'           shift, and enter state 86
	'int'          shift, and enter state 10
	'new'          shift, and enter state 87
	'null'         shift, and enter state 88
	'return'       shift, and enter state 89
	'true'         shift, and enter state 90
	'void'         shift, and enter state 11
	'while'        shift, and enter state 91
	'{'            shift, and enter state 53
	'~'            shift, and enter state 93
	'for'          shift, and enter state 94
	'char'         shift, and enter state 13
	'string'       shift, and enter state 14
	L_integ        shift, and enter state 2
	L_CIdent       shift, and enter state 15
	L_VIdent       shift, and enter state 21
	L_String       shift, and enter state 95
	L_Char         shift, and enter state 96

	Integer        goto state 64
	String         goto state 65
	Char           goto state 66
	CIdent         goto state 3
	VIdent         goto state 67
	Block          goto state 68
	Stmt           goto state 185
	Type           goto state 70
	Expr7          goto state 71
	Expr6          goto state 72
	Expr5          goto state 73
	Expr4          goto state 74
	Expr3          goto state 75
	Expr2          goto state 76
	Expr1          goto state 77
	Expr           goto state 78
	UnaryOp        goto state 79

State 167

	Expr -> 'new' CIdent '(' ListExpr . ')'             (rule 82)

	')'            shift, and enter state 184


State 168

	Expr -> 'new' Type '[' Expr . ']'                   (rule 83)

	']'            shift, and enter state 183


State 169

	Stmt -> 'if' '(' Expr ')' . Stmt                    (rule 35)
	Stmt -> 'if' '(' Expr ')' . Stmt 'else' Stmt        (rule 36)

	'!'            shift, and enter state 80
	'('            shift, and enter state 81
	'-'            shift, and enter state 82
	';'            shift, and enter state 83
	'\\'           shift, and enter state 84
	'bool'         shift, and enter state 8
	'false'        shift, and enter state 85
	'if'           shift, and enter state 86
	'int'          shift, and enter state 10
	'new'          shift, and enter state 87
	'null'         shift, and enter state 88
	'return'       shift, and enter state 89
	'true'         shift, and enter state 90
	'void'         shift, and enter state 11
	'while'        shift, and enter state 91
	'{'            shift, and enter state 53
	'~'            shift, and enter state 93
	'for'          shift, and enter state 94
	'char'         shift, and enter state 13
	'string'       shift, and enter state 14
	L_integ        shift, and enter state 2
	L_CIdent       shift, and enter state 15
	L_VIdent       shift, and enter state 21
	L_String       shift, and enter state 95
	L_Char         shift, and enter state 96

	Integer        goto state 64
	String         goto state 65
	Char           goto state 66
	CIdent         goto state 3
	VIdent         goto state 67
	Block          goto state 68
	Stmt           goto state 182
	Type           goto state 70
	Expr7          goto state 71
	Expr6          goto state 72
	Expr5          goto state 73
	Expr4          goto state 74
	Expr3          goto state 75
	Expr2          goto state 76
	Expr1          goto state 77
	Expr           goto state 78
	UnaryOp        goto state 79

State 170

	LambdaExpr -> Block .                               (rule 91)

	')'            reduce using rule 91
	'++'           reduce using rule 91
	','            reduce using rule 91
	'--'           reduce using rule 91
	';'            reduce using rule 91
	'='            reduce using rule 91
	']'            reduce using rule 91
	'else'         reduce using rule 91
	'to'           reduce using rule 91
	'down'         reduce using rule 91
	'by'           reduce using rule 91
	'then'         reduce using rule 91


State 171

	LambdaExpr -> Expr .                                (rule 89)

	')'            reduce using rule 89
	'++'           reduce using rule 89
	','            reduce using rule 89
	'--'           reduce using rule 89
	';'            reduce using rule 89
	'='            reduce using rule 89
	']'            reduce using rule 89
	'else'         reduce using rule 89
	'to'           reduce using rule 89
	'down'         reduce using rule 89
	'by'           reduce using rule 89
	'then'         reduce using rule 89


State 172

	Expr -> '\\' ListArgument '->' LambdaExpr .         (rule 84)

	')'            reduce using rule 84
	'++'           reduce using rule 84
	','            reduce using rule 84
	'--'           reduce using rule 84
	';'            reduce using rule 84
	'='            reduce using rule 84
	']'            reduce using rule 84
	'else'         reduce using rule 84
	'to'           reduce using rule 84
	'down'         reduce using rule 84
	'by'           reduce using rule 84
	'then'         reduce using rule 84


State 173

	LambdaExpr -> 'if' . Expr 'then' LambdaExpr 'else' LambdaExpr    (rule 90)

	'!'            shift, and enter state 80
	'('            shift, and enter state 81
	'-'            shift, and enter state 82
	'\\'           shift, and enter state 84
	'false'        shift, and enter state 85
	'new'          shift, and enter state 87
	'null'         shift, and enter state 88
	'true'         shift, and enter state 90
	'~'            shift, and enter state 93
	L_integ        shift, and enter state 2
	L_VIdent       shift, and enter state 21
	L_String       shift, and enter state 95
	L_Char         shift, and enter state 96

	Integer        goto state 64
	String         goto state 65
	Char           goto state 66
	VIdent         goto state 67
	Expr7          goto state 71
	Expr6          goto state 72
	Expr5          goto state 73
	Expr4          goto state 74
	Expr3          goto state 75
	Expr2          goto state 76
	Expr1          goto state 77
	Expr           goto state 181
	UnaryOp        goto state 79

State 174

	Stmt -> Expr '=' Expr ';' .                         (rule 30)

	'!'            reduce using rule 30
	'('            reduce using rule 30
	'-'            reduce using rule 30
	';'            reduce using rule 30
	'\\'           reduce using rule 30
	'bool'         reduce using rule 30
	'else'         reduce using rule 30
	'false'        reduce using rule 30
	'if'           reduce using rule 30
	'int'          reduce using rule 30
	'new'          reduce using rule 30
	'null'         reduce using rule 30
	'return'       reduce using rule 30
	'true'         reduce using rule 30
	'void'         reduce using rule 30
	'while'        reduce using rule 30
	'{'            reduce using rule 30
	'}'            reduce using rule 30
	'~'            reduce using rule 30
	'for'          reduce using rule 30
	'char'         reduce using rule 30
	'string'       reduce using rule 30
	L_integ        reduce using rule 30
	L_CIdent       reduce using rule 30
	L_VIdent       reduce using rule 30
	L_String       reduce using rule 30
	L_Char         reduce using rule 30


State 175

	Expr7 -> Expr7 '(' ListExpr ')' .                   (rule 68)

	'!='           reduce using rule 68
	'%'            reduce using rule 68
	'&'            reduce using rule 68
	'&&'           reduce using rule 68
	'('            reduce using rule 68
	')'            reduce using rule 68
	'*'            reduce using rule 68
	'+'            reduce using rule 68
	'++'           reduce using rule 68
	','            reduce using rule 68
	'-'            reduce using rule 68
	'--'           reduce using rule 68
	'.'            reduce using rule 68
	'/'            reduce using rule 68
	';'            reduce using rule 68
	'<'            reduce using rule 68
	'<<'           reduce using rule 68
	'<='           reduce using rule 68
	'='            reduce using rule 68
	'=='           reduce using rule 68
	'>'            reduce using rule 68
	'>='           reduce using rule 68
	'>>'           reduce using rule 68
	'['            reduce using rule 68
	']'            reduce using rule 68
	'^'            reduce using rule 68
	'else'         reduce using rule 68
	'|'            reduce using rule 68
	'||'           reduce using rule 68
	'to'           reduce using rule 68
	'down'         reduce using rule 68
	'by'           reduce using rule 68
	'then'         reduce using rule 68


State 176

	ListExpr -> Expr ',' . ListExpr                     (rule 88)

	'!'            shift, and enter state 80
	'('            shift, and enter state 81
	')'            reduce using rule 86
	'-'            shift, and enter state 82
	'\\'           shift, and enter state 84
	'false'        shift, and enter state 85
	'new'          shift, and enter state 87
	'null'         shift, and enter state 88
	'true'         shift, and enter state 90
	'~'            shift, and enter state 93
	L_integ        shift, and enter state 2
	L_VIdent       shift, and enter state 21
	L_String       shift, and enter state 95
	L_Char         shift, and enter state 96

	Integer        goto state 64
	String         goto state 65
	Char           goto state 66
	VIdent         goto state 67
	Expr7          goto state 71
	Expr6          goto state 72
	Expr5          goto state 73
	Expr4          goto state 74
	Expr3          goto state 75
	Expr2          goto state 76
	Expr1          goto state 77
	Expr           goto state 146
	ListExpr       goto state 180
	UnaryOp        goto state 79

State 177

	Expr7 -> Expr7 '[' Expr ']' .                       (rule 67)

	'!='           reduce using rule 67
	'%'            reduce using rule 67
	'&'            reduce using rule 67
	'&&'           reduce using rule 67
	'('            reduce using rule 67
	')'            reduce using rule 67
	'*'            reduce using rule 67
	'+'            reduce using rule 67
	'++'           reduce using rule 67
	','            reduce using rule 67
	'-'            reduce using rule 67
	'--'           reduce using rule 67
	'.'            reduce using rule 67
	'/'            reduce using rule 67
	';'            reduce using rule 67
	'<'            reduce using rule 67
	'<<'           reduce using rule 67
	'<='           reduce using rule 67
	'='            reduce using rule 67
	'=='           reduce using rule 67
	'>'            reduce using rule 67
	'>='           reduce using rule 67
	'>>'           reduce using rule 67
	'['            reduce using rule 67
	']'            reduce using rule 67
	'^'            reduce using rule 67
	'else'         reduce using rule 67
	'|'            reduce using rule 67
	'||'           reduce using rule 67
	'to'           reduce using rule 67
	'down'         reduce using rule 67
	'by'           reduce using rule 67
	'then'         reduce using rule 67


State 178

	Item -> VIdent '=' Expr .                           (rule 45)

	','            reduce using rule 45
	';'            reduce using rule 45


State 179

	ListItem -> Item ',' ListItem .                     (rule 47)

	';'            reduce using rule 47


State 180

	ListExpr -> Expr ',' ListExpr .                     (rule 88)

	')'            reduce using rule 88


State 181

	LambdaExpr -> 'if' Expr . 'then' LambdaExpr 'else' LambdaExpr    (rule 90)

	'then'         shift, and enter state 192


State 182

	Stmt -> 'if' '(' Expr ')' Stmt .                    (rule 35)
	Stmt -> 'if' '(' Expr ')' Stmt . 'else' Stmt        (rule 36)

	'!'            reduce using rule 35
	'('            reduce using rule 35
	'-'            reduce using rule 35
	';'            reduce using rule 35
	'\\'           reduce using rule 35
	'bool'         reduce using rule 35
	'else'         shift, and enter state 191
			(reduce using rule 35)

	'false'        reduce using rule 35
	'if'           reduce using rule 35
	'int'          reduce using rule 35
	'new'          reduce using rule 35
	'null'         reduce using rule 35
	'return'       reduce using rule 35
	'true'         reduce using rule 35
	'void'         reduce using rule 35
	'while'        reduce using rule 35
	'{'            reduce using rule 35
	'}'            reduce using rule 35
	'~'            reduce using rule 35
	'for'          reduce using rule 35
	'char'         reduce using rule 35
	'string'       reduce using rule 35
	L_integ        reduce using rule 35
	L_CIdent       reduce using rule 35
	L_VIdent       reduce using rule 35
	L_String       reduce using rule 35
	L_Char         reduce using rule 35


State 183

	Expr -> 'new' Type '[' Expr ']' .                   (rule 83)

	')'            reduce using rule 83
	'++'           reduce using rule 83
	','            reduce using rule 83
	'--'           reduce using rule 83
	';'            reduce using rule 83
	'='            reduce using rule 83
	']'            reduce using rule 83
	'else'         reduce using rule 83
	'to'           reduce using rule 83
	'down'         reduce using rule 83
	'by'           reduce using rule 83
	'then'         reduce using rule 83


State 184

	Expr -> 'new' CIdent '(' ListExpr ')' .             (rule 82)

	')'            reduce using rule 82
	'++'           reduce using rule 82
	','            reduce using rule 82
	'--'           reduce using rule 82
	';'            reduce using rule 82
	'='            reduce using rule 82
	']'            reduce using rule 82
	'else'         reduce using rule 82
	'to'           reduce using rule 82
	'down'         reduce using rule 82
	'by'           reduce using rule 82
	'then'         reduce using rule 82


State 185

	Stmt -> 'while' '(' Expr ')' Stmt .                 (rule 37)

	'!'            reduce using rule 37
	'('            reduce using rule 37
	'-'            reduce using rule 37
	';'            reduce using rule 37
	'\\'           reduce using rule 37
	'bool'         reduce using rule 37
	'else'         reduce using rule 37
	'false'        reduce using rule 37
	'if'           reduce using rule 37
	'int'          reduce using rule 37
	'new'          reduce using rule 37
	'null'         reduce using rule 37
	'return'       reduce using rule 37
	'true'         reduce using rule 37
	'void'         reduce using rule 37
	'while'        reduce using rule 37
	'{'            reduce using rule 37
	'}'            reduce using rule 37
	'~'            reduce using rule 37
	'for'          reduce using rule 37
	'char'         reduce using rule 37
	'string'       reduce using rule 37
	L_integ        reduce using rule 37
	L_CIdent       reduce using rule 37
	L_VIdent       reduce using rule 37
	L_String       reduce using rule 37
	L_Char         reduce using rule 37


State 186

	Stmt -> 'for' '(' VIdent 'in' Expr . ')' Stmt       (rule 42)

	')'            shift, and enter state 190


State 187

	Stmt -> 'for' '(' VIdent '=' Expr . 'to' Expr ')' Stmt    (rule 38)
	Stmt -> 'for' '(' VIdent '=' Expr . 'to' Expr 'by' Expr ')' Stmt    (rule 39)
	Stmt -> 'for' '(' VIdent '=' Expr . 'down' 'to' Expr ')' Stmt    (rule 40)
	Stmt -> 'for' '(' VIdent '=' Expr . 'down' 'to' Expr 'by' Expr ')' Stmt    (rule 41)

	'to'           shift, and enter state 188
	'down'         shift, and enter state 189


State 188

	Stmt -> 'for' '(' VIdent '=' Expr 'to' . Expr ')' Stmt    (rule 38)
	Stmt -> 'for' '(' VIdent '=' Expr 'to' . Expr 'by' Expr ')' Stmt    (rule 39)

	'!'            shift, and enter state 80
	'('            shift, and enter state 81
	'-'            shift, and enter state 82
	'\\'           shift, and enter state 84
	'false'        shift, and enter state 85
	'new'          shift, and enter state 87
	'null'         shift, and enter state 88
	'true'         shift, and enter state 90
	'~'            shift, and enter state 93
	L_integ        shift, and enter state 2
	L_VIdent       shift, and enter state 21
	L_String       shift, and enter state 95
	L_Char         shift, and enter state 96

	Integer        goto state 64
	String         goto state 65
	Char           goto state 66
	VIdent         goto state 67
	Expr7          goto state 71
	Expr6          goto state 72
	Expr5          goto state 73
	Expr4          goto state 74
	Expr3          goto state 75
	Expr2          goto state 76
	Expr1          goto state 77
	Expr           goto state 197
	UnaryOp        goto state 79

State 189

	Stmt -> 'for' '(' VIdent '=' Expr 'down' . 'to' Expr ')' Stmt    (rule 40)
	Stmt -> 'for' '(' VIdent '=' Expr 'down' . 'to' Expr 'by' Expr ')' Stmt    (rule 41)

	'to'           shift, and enter state 196


State 190

	Stmt -> 'for' '(' VIdent 'in' Expr ')' . Stmt       (rule 42)

	'!'            shift, and enter state 80
	'('            shift, and enter state 81
	'-'            shift, and enter state 82
	';'            shift, and enter state 83
	'\\'           shift, and enter state 84
	'bool'         shift, and enter state 8
	'false'        shift, and enter state 85
	'if'           shift, and enter state 86
	'int'          shift, and enter state 10
	'new'          shift, and enter state 87
	'null'         shift, and enter state 88
	'return'       shift, and enter state 89
	'true'         shift, and enter state 90
	'void'         shift, and enter state 11
	'while'        shift, and enter state 91
	'{'            shift, and enter state 53
	'~'            shift, and enter state 93
	'for'          shift, and enter state 94
	'char'         shift, and enter state 13
	'string'       shift, and enter state 14
	L_integ        shift, and enter state 2
	L_CIdent       shift, and enter state 15
	L_VIdent       shift, and enter state 21
	L_String       shift, and enter state 95
	L_Char         shift, and enter state 96

	Integer        goto state 64
	String         goto state 65
	Char           goto state 66
	CIdent         goto state 3
	VIdent         goto state 67
	Block          goto state 68
	Stmt           goto state 195
	Type           goto state 70
	Expr7          goto state 71
	Expr6          goto state 72
	Expr5          goto state 73
	Expr4          goto state 74
	Expr3          goto state 75
	Expr2          goto state 76
	Expr1          goto state 77
	Expr           goto state 78
	UnaryOp        goto state 79

State 191

	Stmt -> 'if' '(' Expr ')' Stmt 'else' . Stmt        (rule 36)

	'!'            shift, and enter state 80
	'('            shift, and enter state 81
	'-'            shift, and enter state 82
	';'            shift, and enter state 83
	'\\'           shift, and enter state 84
	'bool'         shift, and enter state 8
	'false'        shift, and enter state 85
	'if'           shift, and enter state 86
	'int'          shift, and enter state 10
	'new'          shift, and enter state 87
	'null'         shift, and enter state 88
	'return'       shift, and enter state 89
	'true'         shift, and enter state 90
	'void'         shift, and enter state 11
	'while'        shift, and enter state 91
	'{'            shift, and enter state 53
	'~'            shift, and enter state 93
	'for'          shift, and enter state 94
	'char'         shift, and enter state 13
	'string'       shift, and enter state 14
	L_integ        shift, and enter state 2
	L_CIdent       shift, and enter state 15
	L_VIdent       shift, and enter state 21
	L_String       shift, and enter state 95
	L_Char         shift, and enter state 96

	Integer        goto state 64
	String         goto state 65
	Char           goto state 66
	CIdent         goto state 3
	VIdent         goto state 67
	Block          goto state 68
	Stmt           goto state 194
	Type           goto state 70
	Expr7          goto state 71
	Expr6          goto state 72
	Expr5          goto state 73
	Expr4          goto state 74
	Expr3          goto state 75
	Expr2          goto state 76
	Expr1          goto state 77
	Expr           goto state 78
	UnaryOp        goto state 79

State 192

	LambdaExpr -> 'if' Expr 'then' . LambdaExpr 'else' LambdaExpr    (rule 90)

	'!'            shift, and enter state 80
	'('            shift, and enter state 81
	'-'            shift, and enter state 82
	'\\'           shift, and enter state 84
	'false'        shift, and enter state 85
	'if'           shift, and enter state 173
	'new'          shift, and enter state 87
	'null'         shift, and enter state 88
	'true'         shift, and enter state 90
	'{'            shift, and enter state 53
	'~'            shift, and enter state 93
	L_integ        shift, and enter state 2
	L_VIdent       shift, and enter state 21
	L_String       shift, and enter state 95
	L_Char         shift, and enter state 96

	Integer        goto state 64
	String         goto state 65
	Char           goto state 66
	VIdent         goto state 67
	Block          goto state 170
	Expr7          goto state 71
	Expr6          goto state 72
	Expr5          goto state 73
	Expr4          goto state 74
	Expr3          goto state 75
	Expr2          goto state 76
	Expr1          goto state 77
	Expr           goto state 171
	LambdaExpr     goto state 193
	UnaryOp        goto state 79

State 193

	LambdaExpr -> 'if' Expr 'then' LambdaExpr . 'else' LambdaExpr    (rule 90)

	'else'         shift, and enter state 201


State 194

	Stmt -> 'if' '(' Expr ')' Stmt 'else' Stmt .        (rule 36)

	'!'            reduce using rule 36
	'('            reduce using rule 36
	'-'            reduce using rule 36
	';'            reduce using rule 36
	'\\'           reduce using rule 36
	'bool'         reduce using rule 36
	'else'         reduce using rule 36
	'false'        reduce using rule 36
	'if'           reduce using rule 36
	'int'          reduce using rule 36
	'new'          reduce using rule 36
	'null'         reduce using rule 36
	'return'       reduce using rule 36
	'true'         reduce using rule 36
	'void'         reduce using rule 36
	'while'        reduce using rule 36
	'{'            reduce using rule 36
	'}'            reduce using rule 36
	'~'            reduce using rule 36
	'for'          reduce using rule 36
	'char'         reduce using rule 36
	'string'       reduce using rule 36
	L_integ        reduce using rule 36
	L_CIdent       reduce using rule 36
	L_VIdent       reduce using rule 36
	L_String       reduce using rule 36
	L_Char         reduce using rule 36


State 195

	Stmt -> 'for' '(' VIdent 'in' Expr ')' Stmt .       (rule 42)

	'!'            reduce using rule 42
	'('            reduce using rule 42
	'-'            reduce using rule 42
	';'            reduce using rule 42
	'\\'           reduce using rule 42
	'bool'         reduce using rule 42
	'else'         reduce using rule 42
	'false'        reduce using rule 42
	'if'           reduce using rule 42
	'int'          reduce using rule 42
	'new'          reduce using rule 42
	'null'         reduce using rule 42
	'return'       reduce using rule 42
	'true'         reduce using rule 42
	'void'         reduce using rule 42
	'while'        reduce using rule 42
	'{'            reduce using rule 42
	'}'            reduce using rule 42
	'~'            reduce using rule 42
	'for'          reduce using rule 42
	'char'         reduce using rule 42
	'string'       reduce using rule 42
	L_integ        reduce using rule 42
	L_CIdent       reduce using rule 42
	L_VIdent       reduce using rule 42
	L_String       reduce using rule 42
	L_Char         reduce using rule 42


State 196

	Stmt -> 'for' '(' VIdent '=' Expr 'down' 'to' . Expr ')' Stmt    (rule 40)
	Stmt -> 'for' '(' VIdent '=' Expr 'down' 'to' . Expr 'by' Expr ')' Stmt    (rule 41)

	'!'            shift, and enter state 80
	'('            shift, and enter state 81
	'-'            shift, and enter state 82
	'\\'           shift, and enter state 84
	'false'        shift, and enter state 85
	'new'          shift, and enter state 87
	'null'         shift, and enter state 88
	'true'         shift, and enter state 90
	'~'            shift, and enter state 93
	L_integ        shift, and enter state 2
	L_VIdent       shift, and enter state 21
	L_String       shift, and enter state 95
	L_Char         shift, and enter state 96

	Integer        goto state 64
	String         goto state 65
	Char           goto state 66
	VIdent         goto state 67
	Expr7          goto state 71
	Expr6          goto state 72
	Expr5          goto state 73
	Expr4          goto state 74
	Expr3          goto state 75
	Expr2          goto state 76
	Expr1          goto state 77
	Expr           goto state 200
	UnaryOp        goto state 79

State 197

	Stmt -> 'for' '(' VIdent '=' Expr 'to' Expr . ')' Stmt    (rule 38)
	Stmt -> 'for' '(' VIdent '=' Expr 'to' Expr . 'by' Expr ')' Stmt    (rule 39)

	')'            shift, and enter state 198
	'by'           shift, and enter state 199


State 198

	Stmt -> 'for' '(' VIdent '=' Expr 'to' Expr ')' . Stmt    (rule 38)

	'!'            shift, and enter state 80
	'('            shift, and enter state 81
	'-'            shift, and enter state 82
	';'            shift, and enter state 83
	'\\'           shift, and enter state 84
	'bool'         shift, and enter state 8
	'false'        shift, and enter state 85
	'if'           shift, and enter state 86
	'int'          shift, and enter state 10
	'new'          shift, and enter state 87
	'null'         shift, and enter state 88
	'return'       shift, and enter state 89
	'true'         shift, and enter state 90
	'void'         shift, and enter state 11
	'while'        shift, and enter state 91
	'{'            shift, and enter state 53
	'~'            shift, and enter state 93
	'for'          shift, and enter state 94
	'char'         shift, and enter state 13
	'string'       shift, and enter state 14
	L_integ        shift, and enter state 2
	L_CIdent       shift, and enter state 15
	L_VIdent       shift, and enter state 21
	L_String       shift, and enter state 95
	L_Char         shift, and enter state 96

	Integer        goto state 64
	String         goto state 65
	Char           goto state 66
	CIdent         goto state 3
	VIdent         goto state 67
	Block          goto state 68
	Stmt           goto state 206
	Type           goto state 70
	Expr7          goto state 71
	Expr6          goto state 72
	Expr5          goto state 73
	Expr4          goto state 74
	Expr3          goto state 75
	Expr2          goto state 76
	Expr1          goto state 77
	Expr           goto state 78
	UnaryOp        goto state 79

State 199

	Stmt -> 'for' '(' VIdent '=' Expr 'to' Expr 'by' . Expr ')' Stmt    (rule 39)

	'!'            shift, and enter state 80
	'('            shift, and enter state 81
	'-'            shift, and enter state 82
	'\\'           shift, and enter state 84
	'false'        shift, and enter state 85
	'new'          shift, and enter state 87
	'null'         shift, and enter state 88
	'true'         shift, and enter state 90
	'~'            shift, and enter state 93
	L_integ        shift, and enter state 2
	L_VIdent       shift, and enter state 21
	L_String       shift, and enter state 95
	L_Char         shift, and enter state 96

	Integer        goto state 64
	String         goto state 65
	Char           goto state 66
	VIdent         goto state 67
	Expr7          goto state 71
	Expr6          goto state 72
	Expr5          goto state 73
	Expr4          goto state 74
	Expr3          goto state 75
	Expr2          goto state 76
	Expr1          goto state 77
	Expr           goto state 205
	UnaryOp        goto state 79

State 200

	Stmt -> 'for' '(' VIdent '=' Expr 'down' 'to' Expr . ')' Stmt    (rule 40)
	Stmt -> 'for' '(' VIdent '=' Expr 'down' 'to' Expr . 'by' Expr ')' Stmt    (rule 41)

	')'            shift, and enter state 203
	'by'           shift, and enter state 204


State 201

	LambdaExpr -> 'if' Expr 'then' LambdaExpr 'else' . LambdaExpr    (rule 90)

	'!'            shift, and enter state 80
	'('            shift, and enter state 81
	'-'            shift, and enter state 82
	'\\'           shift, and enter state 84
	'false'        shift, and enter state 85
	'if'           shift, and enter state 173
	'new'          shift, and enter state 87
	'null'         shift, and enter state 88
	'true'         shift, and enter state 90
	'{'            shift, and enter state 53
	'~'            shift, and enter state 93
	L_integ        shift, and enter state 2
	L_VIdent       shift, and enter state 21
	L_String       shift, and enter state 95
	L_Char         shift, and enter state 96

	Integer        goto state 64
	String         goto state 65
	Char           goto state 66
	VIdent         goto state 67
	Block          goto state 170
	Expr7          goto state 71
	Expr6          goto state 72
	Expr5          goto state 73
	Expr4          goto state 74
	Expr3          goto state 75
	Expr2          goto state 76
	Expr1          goto state 77
	Expr           goto state 171
	LambdaExpr     goto state 202
	UnaryOp        goto state 79

State 202

	LambdaExpr -> 'if' Expr 'then' LambdaExpr 'else' LambdaExpr .    (rule 90)

	')'            reduce using rule 90
	'++'           reduce using rule 90
	','            reduce using rule 90
	'--'           reduce using rule 90
	';'            reduce using rule 90
	'='            reduce using rule 90
	']'            reduce using rule 90
	'else'         reduce using rule 90
	'to'           reduce using rule 90
	'down'         reduce using rule 90
	'by'           reduce using rule 90
	'then'         reduce using rule 90


State 203

	Stmt -> 'for' '(' VIdent '=' Expr 'down' 'to' Expr ')' . Stmt    (rule 40)

	'!'            shift, and enter state 80
	'('            shift, and enter state 81
	'-'            shift, and enter state 82
	';'            shift, and enter state 83
	'\\'           shift, and enter state 84
	'bool'         shift, and enter state 8
	'false'        shift, and enter state 85
	'if'           shift, and enter state 86
	'int'          shift, and enter state 10
	'new'          shift, and enter state 87
	'null'         shift, and enter state 88
	'return'       shift, and enter state 89
	'true'         shift, and enter state 90
	'void'         shift, and enter state 11
	'while'        shift, and enter state 91
	'{'            shift, and enter state 53
	'~'            shift, and enter state 93
	'for'          shift, and enter state 94
	'char'         shift, and enter state 13
	'string'       shift, and enter state 14
	L_integ        shift, and enter state 2
	L_CIdent       shift, and enter state 15
	L_VIdent       shift, and enter state 21
	L_String       shift, and enter state 95
	L_Char         shift, and enter state 96

	Integer        goto state 64
	String         goto state 65
	Char           goto state 66
	CIdent         goto state 3
	VIdent         goto state 67
	Block          goto state 68
	Stmt           goto state 209
	Type           goto state 70
	Expr7          goto state 71
	Expr6          goto state 72
	Expr5          goto state 73
	Expr4          goto state 74
	Expr3          goto state 75
	Expr2          goto state 76
	Expr1          goto state 77
	Expr           goto state 78
	UnaryOp        goto state 79

State 204

	Stmt -> 'for' '(' VIdent '=' Expr 'down' 'to' Expr 'by' . Expr ')' Stmt    (rule 41)

	'!'            shift, and enter state 80
	'('            shift, and enter state 81
	'-'            shift, and enter state 82
	'\\'           shift, and enter state 84
	'false'        shift, and enter state 85
	'new'          shift, and enter state 87
	'null'         shift, and enter state 88
	'true'         shift, and enter state 90
	'~'            shift, and enter state 93
	L_integ        shift, and enter state 2
	L_VIdent       shift, and enter state 21
	L_String       shift, and enter state 95
	L_Char         shift, and enter state 96

	Integer        goto state 64
	String         goto state 65
	Char           goto state 66
	VIdent         goto state 67
	Expr7          goto state 71
	Expr6          goto state 72
	Expr5          goto state 73
	Expr4          goto state 74
	Expr3          goto state 75
	Expr2          goto state 76
	Expr1          goto state 77
	Expr           goto state 208
	UnaryOp        goto state 79

State 205

	Stmt -> 'for' '(' VIdent '=' Expr 'to' Expr 'by' Expr . ')' Stmt    (rule 39)

	')'            shift, and enter state 207


State 206

	Stmt -> 'for' '(' VIdent '=' Expr 'to' Expr ')' Stmt .    (rule 38)

	'!'            reduce using rule 38
	'('            reduce using rule 38
	'-'            reduce using rule 38
	';'            reduce using rule 38
	'\\'           reduce using rule 38
	'bool'         reduce using rule 38
	'else'         reduce using rule 38
	'false'        reduce using rule 38
	'if'           reduce using rule 38
	'int'          reduce using rule 38
	'new'          reduce using rule 38
	'null'         reduce using rule 38
	'return'       reduce using rule 38
	'true'         reduce using rule 38
	'void'         reduce using rule 38
	'while'        reduce using rule 38
	'{'            reduce using rule 38
	'}'            reduce using rule 38
	'~'            reduce using rule 38
	'for'          reduce using rule 38
	'char'         reduce using rule 38
	'string'       reduce using rule 38
	L_integ        reduce using rule 38
	L_CIdent       reduce using rule 38
	L_VIdent       reduce using rule 38
	L_String       reduce using rule 38
	L_Char         reduce using rule 38


State 207

	Stmt -> 'for' '(' VIdent '=' Expr 'to' Expr 'by' Expr ')' . Stmt    (rule 39)

	'!'            shift, and enter state 80
	'('            shift, and enter state 81
	'-'            shift, and enter state 82
	';'            shift, and enter state 83
	'\\'           shift, and enter state 84
	'bool'         shift, and enter state 8
	'false'        shift, and enter state 85
	'if'           shift, and enter state 86
	'int'          shift, and enter state 10
	'new'          shift, and enter state 87
	'null'         shift, and enter state 88
	'return'       shift, and enter state 89
	'true'         shift, and enter state 90
	'void'         shift, and enter state 11
	'while'        shift, and enter state 91
	'{'            shift, and enter state 53
	'~'            shift, and enter state 93
	'for'          shift, and enter state 94
	'char'         shift, and enter state 13
	'string'       shift, and enter state 14
	L_integ        shift, and enter state 2
	L_CIdent       shift, and enter state 15
	L_VIdent       shift, and enter state 21
	L_String       shift, and enter state 95
	L_Char         shift, and enter state 96

	Integer        goto state 64
	String         goto state 65
	Char           goto state 66
	CIdent         goto state 3
	VIdent         goto state 67
	Block          goto state 68
	Stmt           goto state 211
	Type           goto state 70
	Expr7          goto state 71
	Expr6          goto state 72
	Expr5          goto state 73
	Expr4          goto state 74
	Expr3          goto state 75
	Expr2          goto state 76
	Expr1          goto state 77
	Expr           goto state 78
	UnaryOp        goto state 79

State 208

	Stmt -> 'for' '(' VIdent '=' Expr 'down' 'to' Expr 'by' Expr . ')' Stmt    (rule 41)

	')'            shift, and enter state 210


State 209

	Stmt -> 'for' '(' VIdent '=' Expr 'down' 'to' Expr ')' Stmt .    (rule 40)

	'!'            reduce using rule 40
	'('            reduce using rule 40
	'-'            reduce using rule 40
	';'            reduce using rule 40
	'\\'           reduce using rule 40
	'bool'         reduce using rule 40
	'else'         reduce using rule 40
	'false'        reduce using rule 40
	'if'           reduce using rule 40
	'int'          reduce using rule 40
	'new'          reduce using rule 40
	'null'         reduce using rule 40
	'return'       reduce using rule 40
	'true'         reduce using rule 40
	'void'         reduce using rule 40
	'while'        reduce using rule 40
	'{'            reduce using rule 40
	'}'            reduce using rule 40
	'~'            reduce using rule 40
	'for'          reduce using rule 40
	'char'         reduce using rule 40
	'string'       reduce using rule 40
	L_integ        reduce using rule 40
	L_CIdent       reduce using rule 40
	L_VIdent       reduce using rule 40
	L_String       reduce using rule 40
	L_Char         reduce using rule 40


State 210

	Stmt -> 'for' '(' VIdent '=' Expr 'down' 'to' Expr 'by' Expr ')' . Stmt    (rule 41)

	'!'            shift, and enter state 80
	'('            shift, and enter state 81
	'-'            shift, and enter state 82
	';'            shift, and enter state 83
	'\\'           shift, and enter state 84
	'bool'         shift, and enter state 8
	'false'        shift, and enter state 85
	'if'           shift, and enter state 86
	'int'          shift, and enter state 10
	'new'          shift, and enter state 87
	'null'         shift, and enter state 88
	'return'       shift, and enter state 89
	'true'         shift, and enter state 90
	'void'         shift, and enter state 11
	'while'        shift, and enter state 91
	'{'            shift, and enter state 53
	'~'            shift, and enter state 93
	'for'          shift, and enter state 94
	'char'         shift, and enter state 13
	'string'       shift, and enter state 14
	L_integ        shift, and enter state 2
	L_CIdent       shift, and enter state 15
	L_VIdent       shift, and enter state 21
	L_String       shift, and enter state 95
	L_Char         shift, and enter state 96

	Integer        goto state 64
	String         goto state 65
	Char           goto state 66
	CIdent         goto state 3
	VIdent         goto state 67
	Block          goto state 68
	Stmt           goto state 212
	Type           goto state 70
	Expr7          goto state 71
	Expr6          goto state 72
	Expr5          goto state 73
	Expr4          goto state 74
	Expr3          goto state 75
	Expr2          goto state 76
	Expr1          goto state 77
	Expr           goto state 78
	UnaryOp        goto state 79

State 211

	Stmt -> 'for' '(' VIdent '=' Expr 'to' Expr 'by' Expr ')' Stmt .    (rule 39)

	'!'            reduce using rule 39
	'('            reduce using rule 39
	'-'            reduce using rule 39
	';'            reduce using rule 39
	'\\'           reduce using rule 39
	'bool'         reduce using rule 39
	'else'         reduce using rule 39
	'false'        reduce using rule 39
	'if'           reduce using rule 39
	'int'          reduce using rule 39
	'new'          reduce using rule 39
	'null'         reduce using rule 39
	'return'       reduce using rule 39
	'true'         reduce using rule 39
	'void'         reduce using rule 39
	'while'        reduce using rule 39
	'{'            reduce using rule 39
	'}'            reduce using rule 39
	'~'            reduce using rule 39
	'for'          reduce using rule 39
	'char'         reduce using rule 39
	'string'       reduce using rule 39
	L_integ        reduce using rule 39
	L_CIdent       reduce using rule 39
	L_VIdent       reduce using rule 39
	L_String       reduce using rule 39
	L_Char         reduce using rule 39


State 212

	Stmt -> 'for' '(' VIdent '=' Expr 'down' 'to' Expr 'by' Expr ')' Stmt .    (rule 41)

	'!'            reduce using rule 41
	'('            reduce using rule 41
	'-'            reduce using rule 41
	';'            reduce using rule 41
	'\\'           reduce using rule 41
	'bool'         reduce using rule 41
	'else'         reduce using rule 41
	'false'        reduce using rule 41
	'if'           reduce using rule 41
	'int'          reduce using rule 41
	'new'          reduce using rule 41
	'null'         reduce using rule 41
	'return'       reduce using rule 41
	'true'         reduce using rule 41
	'void'         reduce using rule 41
	'while'        reduce using rule 41
	'{'            reduce using rule 41
	'}'            reduce using rule 41
	'~'            reduce using rule 41
	'for'          reduce using rule 41
	'char'         reduce using rule 41
	'string'       reduce using rule 41
	L_integ        reduce using rule 41
	L_CIdent       reduce using rule 41
	L_VIdent       reduce using rule 41
	L_String       reduce using rule 41
	L_Char         reduce using rule 41


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 111
Number of terminals: 64
Number of non-terminals: 35
Number of states: 213

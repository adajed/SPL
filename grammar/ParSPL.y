-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module ParSPL where
import AbsSPL
import LexSPL
import ErrM

}

%name pProgram Program
-- no lexer declaration
%monad { Err } { thenM } { returnM }
%tokentype {Token}
%token
  '!' { PT _ (TS _ 1) }
  '!=' { PT _ (TS _ 2) }
  '%' { PT _ (TS _ 3) }
  '&' { PT _ (TS _ 4) }
  '&&' { PT _ (TS _ 5) }
  '(' { PT _ (TS _ 6) }
  ')' { PT _ (TS _ 7) }
  '*' { PT _ (TS _ 8) }
  '+' { PT _ (TS _ 9) }
  '++' { PT _ (TS _ 10) }
  ',' { PT _ (TS _ 11) }
  '-' { PT _ (TS _ 12) }
  '--' { PT _ (TS _ 13) }
  '->' { PT _ (TS _ 14) }
  '.' { PT _ (TS _ 15) }
  '/' { PT _ (TS _ 16) }
  ';' { PT _ (TS _ 17) }
  '<' { PT _ (TS _ 18) }
  '<<' { PT _ (TS _ 19) }
  '<=' { PT _ (TS _ 20) }
  '=' { PT _ (TS _ 21) }
  '==' { PT _ (TS _ 22) }
  '>' { PT _ (TS _ 23) }
  '>=' { PT _ (TS _ 24) }
  '>>' { PT _ (TS _ 25) }
  '[' { PT _ (TS _ 26) }
  '[]' { PT _ (TS _ 27) }
  '\\' { PT _ (TS _ 28) }
  ']' { PT _ (TS _ 29) }
  '^' { PT _ (TS _ 30) }
  'bool' { PT _ (TS _ 31) }
  'class' { PT _ (TS _ 32) }
  'else' { PT _ (TS _ 33) }
  'false' { PT _ (TS _ 34) }
  'if' { PT _ (TS _ 35) }
  'int' { PT _ (TS _ 36) }
  'new' { PT _ (TS _ 37) }
  'null' { PT _ (TS _ 38) }
  'return' { PT _ (TS _ 39) }
  'true' { PT _ (TS _ 40) }
  'void' { PT _ (TS _ 41) }
  'while' { PT _ (TS _ 42) }
  '{' { PT _ (TS _ 43) }
  '|' { PT _ (TS _ 44) }
  '||' { PT _ (TS _ 45) }
  '}' { PT _ (TS _ 46) }
  '~' { PT _ (TS _ 47) }

L_integ  { PT _ (TI $$) }
L_CIdent { PT _ (T_CIdent $$) }
L_VIdent { PT _ (T_VIdent $$) }


%%

Integer :: { Integer } : L_integ  { (read ( $1)) :: Integer }
CIdent    :: { CIdent} : L_CIdent { CIdent ($1)}
VIdent    :: { VIdent} : L_VIdent { VIdent ($1)}

Program :: { (Program ()) }
Program : ListTopDef { AbsSPL.Prog () $1 }
TopDef :: { (TopDef ()) }
TopDef : Type VIdent '(' ListArgument ')' Block { AbsSPL.FnDef () $1 $2 $4 $6 }
       | 'class' CIdent '{' ListClassArgument '}' { AbsSPL.ClDef () $2 (reverse $4) }
ListTopDef :: { [TopDef ()] }
ListTopDef : TopDef { (:[]) $1 } | TopDef ListTopDef { (:) $1 $2 }
Argument :: { (Argument ()) }
Argument : Type VIdent { AbsSPL.Arg () $1 $2 }
ListArgument :: { [Argument ()] }
ListArgument : {- empty -} { [] }
             | Argument { (:[]) $1 }
             | Argument ',' ListArgument { (:) $1 $3 }
ClassArgument :: { (ClassArgument ()) }
ClassArgument : Type ListVIdent ';' { AbsSPL.Field () $1 $2 }
ListVIdent :: { [VIdent] }
ListVIdent : VIdent { (:[]) $1 }
           | VIdent ',' ListVIdent { (:) $1 $3 }
ListClassArgument :: { [ClassArgument ()] }
ListClassArgument : {- empty -} { [] }
                  | ListClassArgument ClassArgument { flip (:) $1 $2 }
Block :: { (Block ()) }
Block : '{' ListStmt '}' { AbsSPL.Bl () (reverse $2) }
ListStmt :: { [Stmt ()] }
ListStmt : {- empty -} { [] } | ListStmt Stmt { flip (:) $1 $2 }
Stmt :: { (Stmt ()) }
Stmt : ';' { AbsSPL.Empty () }
     | Block { AbsSPL.BStmt () $1 }
     | Type ListItem ';' { AbsSPL.Decl () $1 $2 }
     | Expr '=' Expr ';' { AbsSPL.Ass () $1 $3 }
     | Expr '++' ';' { AbsSPL.Incr () $1 }
     | Expr '--' ';' { AbsSPL.Decr () $1 }
     | 'return' Expr ';' { AbsSPL.Ret () $2 }
     | 'return' ';' { AbsSPL.VRet () }
     | 'if' '(' Expr ')' Stmt { AbsSPL.Cond () $3 $5 }
     | 'if' '(' Expr ')' Stmt 'else' Stmt { AbsSPL.CondElse () $3 $5 $7 }
     | 'while' '(' Expr ')' Stmt { AbsSPL.While () $3 $5 }
     | Expr ';' { AbsSPL.SExp () $1 }
Item :: { (Item ()) }
Item : VIdent { AbsSPL.NoInit () $1 }
     | VIdent '=' Expr { AbsSPL.Init () $1 $3 }
ListItem :: { [Item ()] }
ListItem : Item { (:[]) $1 } | Item ',' ListItem { (:) $1 $3 }
Type :: { (Type ()) }
Type : 'int' { AbsSPL.Int () }
     | 'bool' { AbsSPL.Bool () }
     | 'void' { AbsSPL.Void () }
     | CIdent { AbsSPL.Class () $1 }
     | Type '[]' { AbsSPL.Array () $1 }
     | Type '(' ListType ')' { AbsSPL.Fun () $1 $3 }
ListType :: { [Type ()] }
ListType : {- empty -} { [] }
         | Type { (:[]) $1 }
         | Type ',' ListType { (:) $1 $3 }
Expr6 :: { Expr () }
Expr6 : 'null' { AbsSPL.ENull () }
      | Integer { AbsSPL.EInt () $1 }
      | 'true' { AbsSPL.ETrue () }
      | 'false' { AbsSPL.EFalse () }
      | VIdent { AbsSPL.EVar () $1 }
      | Expr6 '.' VIdent { AbsSPL.EField () $1 $3 }
      | Expr6 '[' Expr ']' { AbsSPL.EArrAcc () $1 $3 }
      | Expr6 '(' ListExpr ')' { AbsSPL.EApp () $1 $3 }
      | '(' Expr ')' { $2 }
Expr5 :: { Expr () }
Expr5 : UnaryOp Expr5 { AbsSPL.EUnaryOp () $1 $2 } | Expr6 { $1 }
Expr4 :: { Expr () }
Expr4 : Expr4 MulOp Expr5 { AbsSPL.EMul () $1 $2 $3 }
      | Expr5 { $1 }
Expr3 :: { Expr () }
Expr3 : Expr3 AddOp Expr4 { AbsSPL.EAdd () $1 $2 $3 }
      | Expr4 { $1 }
Expr2 :: { Expr () }
Expr2 : Expr2 RelOp Expr3 { AbsSPL.ERel () $1 $2 $3 }
      | Expr3 { $1 }
Expr1 :: { Expr () }
Expr1 : Expr2 '&&' Expr1 { AbsSPL.EAnd () $1 $3 } | Expr2 { $1 }
Expr :: { (Expr ()) }
Expr : Expr1 '||' Expr { AbsSPL.EOr () $1 $3 }
     | 'new' CIdent { AbsSPL.EObjNew () $2 }
     | 'new' Type '[' Expr ']' { AbsSPL.EArrNew () $2 $4 }
     | '\\' ListArgument '->' Stmt { AbsSPL.ELambda () $2 $4 }
     | Expr1 { $1 }
ListExpr :: { [Expr ()] }
ListExpr : {- empty -} { [] }
         | Expr { (:[]) $1 }
         | Expr ',' ListExpr { (:) $1 $3 }
UnaryOp :: { (UnaryOp ()) }
UnaryOp : '-' { AbsSPL.Neg () }
        | '!' { AbsSPL.Not () }
        | '~' { AbsSPL.BitNot () }
AddOp :: { (AddOp ()) }
AddOp : '+' { AbsSPL.Plus () } | '-' { AbsSPL.Minus () }
MulOp :: { (MulOp ()) }
MulOp : '*' { AbsSPL.Times () }
      | '/' { AbsSPL.Div () }
      | '%' { AbsSPL.Mod () }
      | '<<' { AbsSPL.LShift () }
      | '>>' { AbsSPL.RShift () }
      | '&' { AbsSPL.BitAnd () }
      | '|' { AbsSPL.BitOr () }
      | '^' { AbsSPL.BitXor () }
RelOp :: { (RelOp ()) }
RelOp : '<' { AbsSPL.LTH () }
      | '<=' { AbsSPL.LE () }
      | '>' { AbsSPL.GTH () }
      | '>=' { AbsSPL.GE () }
      | '==' { AbsSPL.EQU () }
      | '!=' { AbsSPL.NE () }
{

returnM :: a -> Err a
returnM = return

thenM :: Err a -> (a -> Err b) -> Err b
thenM = (>>=)

happyError :: [Token] -> Err a
happyError ts =
  Bad $ "syntax error at " ++ tokenPos ts ++ 
  case ts of
    [] -> []
    [Err _] -> " due to lexer error"
    _ -> " before " ++ unwords (map (id . prToken) (take 4 ts))

myLexer = tokens
}

